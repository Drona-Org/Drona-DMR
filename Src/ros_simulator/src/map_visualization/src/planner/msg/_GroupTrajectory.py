"""autogenerated by genpy from planner/GroupTrajectory.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import planner.msg
import quadrotor_msgs.msg

class GroupTrajectory(genpy.Message):
  _md5sum = "22c2cfbc72167989eb5caaeeb9fbe61b"
  _type = "planner/GroupTrajectory"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """quadrotor_msgs/TrajectoryData[6] traj
planner/State q_f
================================================================================
MSG: quadrotor_msgs/TrajectoryData
float64[8] xcoef
float64[8] ycoef
float64[8] zcoef
float64 duration

================================================================================
MSG: planner/State
int32 x
int32 y
int32 z
int32 v
int32 f
int32[6] assignment

"""
  __slots__ = ['traj','q_f']
  _slot_types = ['quadrotor_msgs/TrajectoryData[6]','planner/State']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       traj,q_f

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(GroupTrajectory, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.traj is None:
        self.traj = [quadrotor_msgs.msg.TrajectoryData(),quadrotor_msgs.msg.TrajectoryData(),quadrotor_msgs.msg.TrajectoryData(),quadrotor_msgs.msg.TrajectoryData(),quadrotor_msgs.msg.TrajectoryData(),quadrotor_msgs.msg.TrajectoryData()]
      if self.q_f is None:
        self.q_f = planner.msg.State()
    else:
      self.traj = [quadrotor_msgs.msg.TrajectoryData(),quadrotor_msgs.msg.TrajectoryData(),quadrotor_msgs.msg.TrajectoryData(),quadrotor_msgs.msg.TrajectoryData(),quadrotor_msgs.msg.TrajectoryData(),quadrotor_msgs.msg.TrajectoryData()]
      self.q_f = planner.msg.State()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      for val1 in self.traj:
        buff.write(_struct_8d.pack(*val1.xcoef))
        buff.write(_struct_8d.pack(*val1.ycoef))
        buff.write(_struct_8d.pack(*val1.zcoef))
        buff.write(_struct_d.pack(val1.duration))
      _x = self
      buff.write(_struct_5i.pack(_x.q_f.x, _x.q_f.y, _x.q_f.z, _x.q_f.v, _x.q_f.f))
      buff.write(_struct_6i.pack(*self.q_f.assignment))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.traj is None:
        self.traj = None
      if self.q_f is None:
        self.q_f = planner.msg.State()
      end = 0
      self.traj = []
      for i in range(0, 6):
        val1 = quadrotor_msgs.msg.TrajectoryData()
        start = end
        end += 64
        val1.xcoef = _struct_8d.unpack(str[start:end])
        start = end
        end += 64
        val1.ycoef = _struct_8d.unpack(str[start:end])
        start = end
        end += 64
        val1.zcoef = _struct_8d.unpack(str[start:end])
        start = end
        end += 8
        (val1.duration,) = _struct_d.unpack(str[start:end])
        self.traj.append(val1)
      _x = self
      start = end
      end += 20
      (_x.q_f.x, _x.q_f.y, _x.q_f.z, _x.q_f.v, _x.q_f.f,) = _struct_5i.unpack(str[start:end])
      start = end
      end += 24
      self.q_f.assignment = _struct_6i.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      for val1 in self.traj:
        buff.write(val1.xcoef.tostring())
        buff.write(val1.ycoef.tostring())
        buff.write(val1.zcoef.tostring())
        buff.write(_struct_d.pack(val1.duration))
      _x = self
      buff.write(_struct_5i.pack(_x.q_f.x, _x.q_f.y, _x.q_f.z, _x.q_f.v, _x.q_f.f))
      buff.write(self.q_f.assignment.tostring())
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.traj is None:
        self.traj = None
      if self.q_f is None:
        self.q_f = planner.msg.State()
      end = 0
      self.traj = []
      for i in range(0, 6):
        val1 = quadrotor_msgs.msg.TrajectoryData()
        start = end
        end += 64
        val1.xcoef = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=8)
        start = end
        end += 64
        val1.ycoef = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=8)
        start = end
        end += 64
        val1.zcoef = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=8)
        start = end
        end += 8
        (val1.duration,) = _struct_d.unpack(str[start:end])
        self.traj.append(val1)
      _x = self
      start = end
      end += 20
      (_x.q_f.x, _x.q_f.y, _x.q_f.z, _x.q_f.v, _x.q_f.f,) = _struct_5i.unpack(str[start:end])
      start = end
      end += 24
      self.q_f.assignment = numpy.frombuffer(str[start:end], dtype=numpy.int32, count=6)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_6i = struct.Struct("<6i")
_struct_5i = struct.Struct("<5i")
_struct_d = struct.Struct("<d")
_struct_8d = struct.Struct("<8d")
