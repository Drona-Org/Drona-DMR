"""autogenerated by genpy from planner/PathPackage.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import planner.msg
import quadrotor_msgs.msg

class PathPackage(genpy.Message):
  _md5sum = "56c986c01abc8331f3922f18767a0214"
  _type = "planner/PathPackage"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """planner/GroupTrajectory[] path


================================================================================
MSG: planner/GroupTrajectory
quadrotor_msgs/TrajectoryData[6] traj
planner/State q_f
================================================================================
MSG: quadrotor_msgs/TrajectoryData
float64[8] xcoef
float64[8] ycoef
float64[8] zcoef
float64 duration

================================================================================
MSG: planner/State
int32 x
int32 y
int32 z
int32 v
int32 f
int32[6] assignment

"""
  __slots__ = ['path']
  _slot_types = ['planner/GroupTrajectory[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       path

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(PathPackage, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.path is None:
        self.path = []
    else:
      self.path = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      length = len(self.path)
      buff.write(_struct_I.pack(length))
      for val1 in self.path:
        for val2 in val1.traj:
          buff.write(_struct_8d.pack(*val2.xcoef))
          buff.write(_struct_8d.pack(*val2.ycoef))
          buff.write(_struct_8d.pack(*val2.zcoef))
          buff.write(_struct_d.pack(val2.duration))
        _v1 = val1.q_f
        _x = _v1
        buff.write(_struct_5i.pack(_x.x, _x.y, _x.z, _x.v, _x.f))
        buff.write(_struct_6i.pack(*_v1.assignment))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.path is None:
        self.path = None
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.path = []
      for i in range(0, length):
        val1 = planner.msg.GroupTrajectory()
        val1.traj = []
        for i in range(0, 6):
          val2 = quadrotor_msgs.msg.TrajectoryData()
          start = end
          end += 64
          val2.xcoef = _struct_8d.unpack(str[start:end])
          start = end
          end += 64
          val2.ycoef = _struct_8d.unpack(str[start:end])
          start = end
          end += 64
          val2.zcoef = _struct_8d.unpack(str[start:end])
          start = end
          end += 8
          (val2.duration,) = _struct_d.unpack(str[start:end])
          val1.traj.append(val2)
        _v2 = val1.q_f
        _x = _v2
        start = end
        end += 20
        (_x.x, _x.y, _x.z, _x.v, _x.f,) = _struct_5i.unpack(str[start:end])
        start = end
        end += 24
        _v2.assignment = _struct_6i.unpack(str[start:end])
        self.path.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      length = len(self.path)
      buff.write(_struct_I.pack(length))
      for val1 in self.path:
        for val2 in val1.traj:
          buff.write(val2.xcoef.tostring())
          buff.write(val2.ycoef.tostring())
          buff.write(val2.zcoef.tostring())
          buff.write(_struct_d.pack(val2.duration))
        _v3 = val1.q_f
        _x = _v3
        buff.write(_struct_5i.pack(_x.x, _x.y, _x.z, _x.v, _x.f))
        buff.write(_v3.assignment.tostring())
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.path is None:
        self.path = None
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.path = []
      for i in range(0, length):
        val1 = planner.msg.GroupTrajectory()
        val1.traj = []
        for i in range(0, 6):
          val2 = quadrotor_msgs.msg.TrajectoryData()
          start = end
          end += 64
          val2.xcoef = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=8)
          start = end
          end += 64
          val2.ycoef = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=8)
          start = end
          end += 64
          val2.zcoef = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=8)
          start = end
          end += 8
          (val2.duration,) = _struct_d.unpack(str[start:end])
          val1.traj.append(val2)
        _v4 = val1.q_f
        _x = _v4
        start = end
        end += 20
        (_x.x, _x.y, _x.z, _x.v, _x.f,) = _struct_5i.unpack(str[start:end])
        start = end
        end += 24
        _v4.assignment = numpy.frombuffer(str[start:end], dtype=numpy.int32, count=6)
        self.path.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_6i = struct.Struct("<6i")
_struct_5i = struct.Struct("<5i")
_struct_d = struct.Struct("<d")
_struct_8d = struct.Struct("<8d")
