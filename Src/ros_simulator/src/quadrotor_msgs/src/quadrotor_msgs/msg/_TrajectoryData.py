# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from quadrotor_msgs/TrajectoryData.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class TrajectoryData(genpy.Message):
  _md5sum = "42d0c3eb5251279330d61627c670218f"
  _type = "quadrotor_msgs/TrajectoryData"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """float64[8] xcoef
float64[8] ycoef
float64[8] zcoef
float64 duration
"""
  __slots__ = ['xcoef','ycoef','zcoef','duration']
  _slot_types = ['float64[8]','float64[8]','float64[8]','float64']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       xcoef,ycoef,zcoef,duration

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(TrajectoryData, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.xcoef is None:
        self.xcoef = [0.,0.,0.,0.,0.,0.,0.,0.]
      if self.ycoef is None:
        self.ycoef = [0.,0.,0.,0.,0.,0.,0.,0.]
      if self.zcoef is None:
        self.zcoef = [0.,0.,0.,0.,0.,0.,0.,0.]
      if self.duration is None:
        self.duration = 0.
    else:
      self.xcoef = [0.,0.,0.,0.,0.,0.,0.,0.]
      self.ycoef = [0.,0.,0.,0.,0.,0.,0.,0.]
      self.zcoef = [0.,0.,0.,0.,0.,0.,0.,0.]
      self.duration = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      buff.write(_struct_8d.pack(*self.xcoef))
      buff.write(_struct_8d.pack(*self.ycoef))
      buff.write(_struct_8d.pack(*self.zcoef))
      buff.write(_struct_d.pack(self.duration))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      start = end
      end += 64
      self.xcoef = _struct_8d.unpack(str[start:end])
      start = end
      end += 64
      self.ycoef = _struct_8d.unpack(str[start:end])
      start = end
      end += 64
      self.zcoef = _struct_8d.unpack(str[start:end])
      start = end
      end += 8
      (self.duration,) = _struct_d.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      buff.write(self.xcoef.tostring())
      buff.write(self.ycoef.tostring())
      buff.write(self.zcoef.tostring())
      buff.write(_struct_d.pack(self.duration))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      start = end
      end += 64
      self.xcoef = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=8)
      start = end
      end += 64
      self.ycoef = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=8)
      start = end
      end += 64
      self.zcoef = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=8)
      start = end
      end += 8
      (self.duration,) = _struct_d.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_d = struct.Struct("<d")
_struct_8d = struct.Struct("<8d")
