enum Machine {_default, _DriverMachine, _RobotTaskPlanner, _MotionPlanner, _MotionPlanExecutor, _Environment, _RobotStateManager, _SenseAndInfer, _Timer, _Prop_1, _Prop_2, _Prop_6, _Prop_7, _Prop_8, _Prop_9, _Prop_3, _Prop_10a, _Prop_10b, _Prop_10c};

enum Event {_default, _halt, _ReDo, _success, _doScanning, _startNewHerding, _continueCurrentHerding, _newPlan, _GetEnv, _SetEnv, _EnvState, _UpdateRobotState, _GetRobotState, _ExecutePlan, _CancelPlan, _GeneratePlanFor, _CancelOperation, _MotionPlanFor, _FailureToComputePlan, _ReachedDestination, _FailureExecuting, _CancelSucess, _BatteryLow, _EnvEventDetected, _CurrentState, _START, _CANCEL, _TIMEOUT, _CANCEL_SUCCESS, _CANCEL_FAILURE, _local, _done, _initial_setup, _infer, _UNIT, _M_hDog, _M_sDog, _M_rDog, _M_hCat, _M_sCat, _M_rCat, _M_hMice, _M_sMice, _M_rMice};

enum State {_default, _DriverMachine_Init, _RobotTaskPlanner_Init, _RobotTaskPlanner_SetUpSystem, _RobotTaskPlanner_ScanningModeOfOperation, _RobotTaskPlanner_ExecutePlan, _RobotTaskPlanner_LowBatteryDetected, _RobotTaskPlanner_TakeActionOnEnvEventDetected, _RobotTaskPlanner_SelectGoalLocationAndComputePlan, _MotionPlanner_Init, _MotionPlanner_WaitForCommands, _MotionPlanExecutor_Init, _MotionPlanExecutor_WaitForCommands, _MotionPlanExecutor_StartExecutingPlan, _Environment_Init, _Environment_StartSimulation, _RobotStateManager_Init, _RobotStateManager_WaitForCommands, _RobotStateManager_GetStateFromEnvMachine, _SenseAndInfer_Init, _SenseAndInfer_PeriodicallySenseUpdate, _SenseAndInfer_SenseEnvironment, _Timer_Init, _Timer_WaitForReq, _Timer_WaitForCancel, _Prop_1_Init, _Prop_2_Init, _Prop_6_Init, _Prop_6_Wait, _Prop_6_Wait_M_hDog, _Prop_7_Init, _Prop_7_Wait, _Prop_7_WaitHDog, _Prop_7_WaitHCat, _Prop_8_Init, _Prop_8_Wait, _Prop_8_WaitHCat, _Prop_8_WaitHMice, _Prop_9_Init, _Prop_9_Wait, _Prop_9_WaitHCat, _Prop_3_Init, _Prop_3_WaitForHerding, _Prop_3_Done, _Prop_10a_Init, _Prop_10a_WaitrDog, _Prop_10a_Done, _Prop_10b_Init, _Prop_10b_WaitrCat, _Prop_10b_Done, _Prop_10c_Init, _Prop_10c_WaitrMice, _Prop_10c_Done};

enum ActionOrFun {_default, _InvokeMotionPlanner, _GetPath, _AddObstacle, _ResetObstacle, _InitializeObstacles, _Seal, _Unseal, _PRINT, _InitializeMotionPlanning, _CAT_CAGE_LOC, _DOG_CAGE_LOC, _MICE_CAGE_LOC, _BATTERY_THRESHOLD, _DOG, _CAT, _MICE, _BATTERY_CHARGE_LOCATION, _ROBOT_START_STATE, _SIZE_OF_GRID, _ROBOT_SCAN_LOCATIONS, _GetStaticGoals, _GetStaticObstacles, _EventDetected, _DriverMachine_ignore, _DriverMachine_AnonFun0, _DriverMachine_AnonFun1, _RobotTaskPlanner_ignore, _RobotTaskPlanner_GetNextScanLocation, _RobotTaskPlanner_CancelCurrentExecution, _RobotTaskPlanner_UpdateCurrentRobotState, _RobotTaskPlanner_AnonFun0, _RobotTaskPlanner_AnonFun1, _RobotTaskPlanner_AnonFun2, _RobotTaskPlanner_AnonFun3, _RobotTaskPlanner_AnonFun4, _RobotTaskPlanner_AnonFun5, _RobotTaskPlanner_AnonFun6, _RobotTaskPlanner_AnonFun7, _RobotTaskPlanner_AnonFun8, _RobotTaskPlanner_AnonFun9, _RobotTaskPlanner_AnonFun10, _RobotTaskPlanner_AnonFun11, _MotionPlanner_ignore, _MotionPlanner_GetMotionPlan, _MotionPlanner_KillMotionPlanner, _MotionPlanner_ComputeMotionPlanAndSend, _MotionPlanner_AnonFun0, _MotionPlanner_AnonFun1, _MotionPlanExecutor_ignore, _MotionPlanExecutor_GotoLocation, _MotionPlanExecutor_AnonFun0, _MotionPlanExecutor_AnonFun1, _MotionPlanExecutor_AnonFun2, _MotionPlanExecutor_AnonFun3, _MotionPlanExecutor_AnonFun4, _MotionPlanExecutor_AnonFun5, _Environment_ignore, _Environment_AnonFun0, _Environment_AnonFun1, _Environment_AnonFun2, _Environment_AnonFun3, _RobotStateManager_ignore, _RobotStateManager_AnonFun0, _RobotStateManager_AnonFun1, _RobotStateManager_AnonFun2, _RobotStateManager_AnonFun3, _RobotStateManager_AnonFun4, _RobotStateManager_AnonFun5, _SenseAndInfer_ignore, _SenseAndInfer_InferCurrentStateAndInformTPorMP, _SenseAndInfer_AnonFun0, _SenseAndInfer_AnonFun1, _SenseAndInfer_AnonFun2, _SenseAndInfer_AnonFun3, _SenseAndInfer_AnonFun4, _Timer_ignore, _Timer_AnonFun0, _Timer_AnonFun1, _Timer_AnonFun2, _Timer_AnonFun3, _Timer_AnonFun4, _Prop_1_ignore, _Prop_1_AnonFun0, _Prop_1_AnonFun1, _Prop_1_AnonFun2, _Prop_1_AnonFun3, _Prop_1_AnonFun4, _Prop_1_AnonFun5, _Prop_2_ignore, _Prop_2_AnonFun0, _Prop_2_AnonFun1, _Prop_2_AnonFun2, _Prop_2_AnonFun3, _Prop_2_AnonFun4, _Prop_2_AnonFun5, _Prop_6_ignore, _Prop_6_AnonFun0, _Prop_6_AnonFun1, _Prop_6_AnonFun2, _Prop_6_AnonFun3, _Prop_6_AnonFun4, _Prop_7_ignore, _Prop_7_AnonFun0, _Prop_7_AnonFun1, _Prop_8_ignore, _Prop_8_AnonFun0, _Prop_8_AnonFun1, _Prop_9_ignore, _Prop_9_AnonFun0, _Prop_9_AnonFun1, _Prop_9_AnonFun2, _Prop_9_AnonFun3, _Prop_9_AnonFun4, _Prop_9_AnonFun5, _Prop_9_AnonFun6, _Prop_3_ignore, _Prop_3_AnonFun0, _Prop_3_AnonFun1, _Prop_3_AnonFun2, _Prop_10a_ignore, _Prop_10a_AnonFun0, _Prop_10b_ignore, _Prop_10b_AnonFun0, _Prop_10c_ignore, _Prop_10c_AnonFun0};

set SET_Prop_1 MACHINE_Prop_1;

set SET_Prop_2 MACHINE_Prop_2;

set SET_Prop_6 MACHINE_Prop_6;

set SET_Prop_7 MACHINE_Prop_7;

set SET_Prop_8 MACHINE_Prop_8;

set SET_Prop_9 MACHINE_Prop_9;

set SET_Prop_3 MACHINE_Prop_3;

set SET_Prop_10a MACHINE_Prop_10a;

set SET_Prop_10b MACHINE_Prop_10b;

set SET_Prop_10c MACHINE_Prop_10c;

class MACHINE_DriverMachine{
PRT_VALUE robot;
PRT_VALUE envMachine;
PRT_VALUE robotStMng;
SM_HANDLE myHandle;
void DriverMachine_Init_CalculateDeferredAndActionSet() {

dummy:
myHandle.stack.deferredSet = new SM_EVENT_SET;
myHandle.stack.actionSet = new SM_EVENT_SET;
myHandle.stack.AddStackDeferredSet(myHandle.stack.deferredSet);
myHandle.stack.AddStackActionSet(myHandle.stack.actionSet);
myHandle.stack.es = new SM_EVENT_ARRAY[0];
myHandle.stack.as = new ActionOrFun_ARRAY[0];

;

}
void Start() {

dummy:
Run(Main.DriverMachine_Init_SM_STATE);
if ((myHandle.currentEvent == Main.halt_SM_EVENT)) {
myHandle.stack = null;
myHandle.buffer = null;
myHandle.currentArg = null;
SM_HANDLE.halted = (SM_HANDLE.halted + myHandle);
SM_HANDLE.enabled = (SM_HANDLE.enabled - myHandle);
return;

}
trace("<StateLog> Unhandled event exception by machine DriverMachine-{0}\n", myHandle.instance);
assert(false, "Unhandled event exception by machine DriverMachine");

;

}
void Run(SM_STATE state) {
bool doPop;
bool hasNullTransitionOrAction;

init:
myHandle.Push();
myHandle.stack.state = state;
doPop = RunHelper(true);
while (!doPop) {
hasNullTransitionOrAction = myHandle.stack.HasNullTransitionOrAction();
myHandle.DequeueEvent(hasNullTransitionOrAction);
doPop = RunHelper(false);

}
myHandle.Pop();

;

}
void TraceEnterState(SM_STATE state) {

init:
if ((state == Main.DriverMachine_Init_SM_STATE)) {
trace("<StateLog> Machine DriverMachine-{0} entering State Init\n", myHandle.instance);
return;

}
assert(false, "Internal error");

;

}
void TraceExitState(SM_STATE state) {

init:
if ((state == Main.DriverMachine_Init_SM_STATE)) {
trace("<StateLog> Machine DriverMachine-{0} exiting State Init\n", myHandle.instance);
return;

}
assert(false, "Internal error");

;

}
void CalculateDeferredAndActionSet(SM_STATE state) {

init:
if ((state == Main.DriverMachine_Init_SM_STATE)) {
DriverMachine_Init_CalculateDeferredAndActionSet();
return;

}
assert(false, "Internal error");

;

}
bool RunHelper(bool start) {
SM_STATE state;
SM_TRANSITION transition;
ActionOrFun actionFun;

init:
state = myHandle.stack.state;
if (start) {
goto enter;
} else {
goto handle;
}

;


enter:
state = myHandle.stack.state;
TraceEnterState(state);
CalculateDeferredAndActionSet(state);
actionFun = state.entryFun;

;


execute:
ReentrancyHelper(actionFun);
if ((myHandle.cont.reason == ContinuationReason.Raise)) {
goto handle;
}
myHandle.currentEvent = null;
myHandle.currentArg = PRT_VALUE.PrtMkDefaultValue(Main.type_0_PRT_TYPE);
if ((myHandle.cont.reason != ContinuationReason.Pop)) {
return false;

}
TraceExitState(state);
ReentrancyHelper(state.exitFun);
return true;

;


handle:
if ((myHandle.currentEvent in myHandle.stack.actionSet)) {
actionFun = myHandle.stack.Find(myHandle.currentEvent);
goto execute;
}
transition = state.FindPushTransition(myHandle.currentEvent);
if ((transition != null)) {
Run(transition.to);
if ((myHandle.currentEvent == null)) {
return false;

} else {
goto handle;
}

}
TraceExitState(state);
ReentrancyHelper(state.exitFun);
transition = state.FindTransition(myHandle.currentEvent);
if ((transition == null)) {
return true;

}
ReentrancyHelper(transition.fun);
myHandle.stack.state = transition.to;
state = myHandle.stack.state;
goto enter;
;

}
bool ProcessContinuation() {
bool doPop;

init:
if ((myHandle.cont.reason == ContinuationReason.Return)) {
return true;

}
if ((myHandle.cont.reason == ContinuationReason.Pop)) {
return true;

}
if ((myHandle.cont.reason == ContinuationReason.Raise)) {
return true;

}
if ((myHandle.cont.reason == ContinuationReason.Receive)) {
myHandle.DequeueEvent(false);
return false;

}
if ((myHandle.cont.reason == ContinuationReason.Nondet)) {
myHandle.cont.nondet = choose(bool);
return false;

}
if ((myHandle.cont.reason == ContinuationReason.NewMachine)) {
yield;
return false;

}
if ((myHandle.cont.reason == ContinuationReason.Send)) {
yield;
return false;

}

;

}
void ReentrancyHelper(ActionOrFun actionFun) {
PRT_VALUE_ARRAY locals;
bool doPop;

init:
doPop = false;
myHandle.cont.Reset();
if ((actionFun == ActionOrFun._ResetObstacle)) {
trace("<FunctionLog> Machine DriverMachine-{0} executing Function ResetObstacle\n", myHandle.instance);
locals = null;
myHandle.cont.PushReturnTo(0, locals, myHandle.currentEvent, myHandle.currentArg);
goto execute_ResetObstacle;
}
if ((actionFun == ActionOrFun._Seal)) {
trace("<FunctionLog> Machine DriverMachine-{0} executing Function Seal\n", myHandle.instance);
locals = null;
myHandle.cont.PushReturnTo(0, locals, myHandle.currentEvent, myHandle.currentArg);
goto execute_Seal;
}
if ((actionFun == ActionOrFun._Unseal)) {
trace("<FunctionLog> Machine DriverMachine-{0} executing Function Unseal\n", myHandle.instance);
locals = null;
myHandle.cont.PushReturnTo(0, locals, myHandle.currentEvent, myHandle.currentArg);
goto execute_Unseal;
}
if ((actionFun == ActionOrFun._InitializeMotionPlanning)) {
trace("<FunctionLog> Machine DriverMachine-{0} executing Function InitializeMotionPlanning\n", myHandle.instance);
locals = new PRT_VALUE_ARRAY[4];
locals[3] = PRT_VALUE.PrtMkDefaultValue(Main.type_1_PRT_TYPE);
locals[2] = PRT_VALUE.PrtMkDefaultValue(Main.type_2_PRT_TYPE);
locals[1] = PRT_VALUE.PrtMkDefaultValue(Main.type_2_PRT_TYPE);
locals[0] = PRT_VALUE.PrtMkDefaultValue(Main.type_4_PRT_TYPE);
myHandle.cont.PushReturnTo(0, locals, myHandle.currentEvent, myHandle.currentArg);
goto execute_InitializeMotionPlanning;
}
if ((actionFun == ActionOrFun._CAT_CAGE_LOC)) {
trace("<FunctionLog> Machine DriverMachine-{0} executing Function CAT_CAGE_LOC\n", myHandle.instance);
locals = null;
myHandle.cont.PushReturnTo(0, locals, myHandle.currentEvent, myHandle.currentArg);
goto execute_CAT_CAGE_LOC;
}
if ((actionFun == ActionOrFun._DOG_CAGE_LOC)) {
trace("<FunctionLog> Machine DriverMachine-{0} executing Function DOG_CAGE_LOC\n", myHandle.instance);
locals = null;
myHandle.cont.PushReturnTo(0, locals, myHandle.currentEvent, myHandle.currentArg);
goto execute_DOG_CAGE_LOC;
}
if ((actionFun == ActionOrFun._MICE_CAGE_LOC)) {
trace("<FunctionLog> Machine DriverMachine-{0} executing Function MICE_CAGE_LOC\n", myHandle.instance);
locals = null;
myHandle.cont.PushReturnTo(0, locals, myHandle.currentEvent, myHandle.currentArg);
goto execute_MICE_CAGE_LOC;
}
if ((actionFun == ActionOrFun._BATTERY_THRESHOLD)) {
trace("<FunctionLog> Machine DriverMachine-{0} executing Function BATTERY_THRESHOLD\n", myHandle.instance);
locals = null;
myHandle.cont.PushReturnTo(0, locals, myHandle.currentEvent, myHandle.currentArg);
goto execute_BATTERY_THRESHOLD;
}
if ((actionFun == ActionOrFun._DOG)) {
trace("<FunctionLog> Machine DriverMachine-{0} executing Function DOG\n", myHandle.instance);
locals = null;
myHandle.cont.PushReturnTo(0, locals, myHandle.currentEvent, myHandle.currentArg);
goto execute_DOG;
}
if ((actionFun == ActionOrFun._CAT)) {
trace("<FunctionLog> Machine DriverMachine-{0} executing Function CAT\n", myHandle.instance);
locals = null;
myHandle.cont.PushReturnTo(0, locals, myHandle.currentEvent, myHandle.currentArg);
goto execute_CAT;
}
if ((actionFun == ActionOrFun._MICE)) {
trace("<FunctionLog> Machine DriverMachine-{0} executing Function MICE\n", myHandle.instance);
locals = null;
myHandle.cont.PushReturnTo(0, locals, myHandle.currentEvent, myHandle.currentArg);
goto execute_MICE;
}
if ((actionFun == ActionOrFun._BATTERY_CHARGE_LOCATION)) {
trace("<FunctionLog> Machine DriverMachine-{0} executing Function BATTERY_CHARGE_LOCATION\n", myHandle.instance);
locals = null;
myHandle.cont.PushReturnTo(0, locals, myHandle.currentEvent, myHandle.currentArg);
goto execute_BATTERY_CHARGE_LOCATION;
}
if ((actionFun == ActionOrFun._ROBOT_START_STATE)) {
trace("<FunctionLog> Machine DriverMachine-{0} executing Function ROBOT_START_STATE\n", myHandle.instance);
locals = null;
myHandle.cont.PushReturnTo(0, locals, myHandle.currentEvent, myHandle.currentArg);
goto execute_ROBOT_START_STATE;
}
if ((actionFun == ActionOrFun._SIZE_OF_GRID)) {
trace("<FunctionLog> Machine DriverMachine-{0} executing Function SIZE_OF_GRID\n", myHandle.instance);
locals = null;
myHandle.cont.PushReturnTo(0, locals, myHandle.currentEvent, myHandle.currentArg);
goto execute_SIZE_OF_GRID;
}
if ((actionFun == ActionOrFun._ROBOT_SCAN_LOCATIONS)) {
trace("<FunctionLog> Machine DriverMachine-{0} executing Function ROBOT_SCAN_LOCATIONS\n", myHandle.instance);
locals = new PRT_VALUE_ARRAY[3];
locals[2] = PRT_VALUE.PrtMkDefaultValue(Main.type_2_PRT_TYPE);
locals[1] = PRT_VALUE.PrtMkDefaultValue(Main.type_2_PRT_TYPE);
locals[0] = PRT_VALUE.PrtMkDefaultValue(Main.type_1_PRT_TYPE);
myHandle.cont.PushReturnTo(0, locals, myHandle.currentEvent, myHandle.currentArg);
goto execute_ROBOT_SCAN_LOCATIONS;
}
if ((actionFun == ActionOrFun._GetStaticGoals)) {
trace("<FunctionLog> Machine DriverMachine-{0} executing Function GetStaticGoals\n", myHandle.instance);
locals = new PRT_VALUE_ARRAY[1];
locals[0] = PRT_VALUE.PrtMkDefaultValue(Main.type_7_PRT_TYPE);
myHandle.cont.PushReturnTo(0, locals, myHandle.currentEvent, myHandle.currentArg);
goto execute_GetStaticGoals;
}
if ((actionFun == ActionOrFun._GetStaticObstacles)) {
trace("<FunctionLog> Machine DriverMachine-{0} executing Function GetStaticObstacles\n", myHandle.instance);
locals = new PRT_VALUE_ARRAY[1];
locals[0] = PRT_VALUE.PrtMkDefaultValue(Main.type_2_PRT_TYPE);
myHandle.cont.PushReturnTo(0, locals, myHandle.currentEvent, myHandle.currentArg);
goto execute_GetStaticObstacles;
}
if ((actionFun == ActionOrFun._DriverMachine_ignore)) {
trace("<FunctionLog> Machine DriverMachine-{0} executing Function ignore\n", myHandle.instance);
locals = null;
myHandle.cont.PushReturnTo(0, locals, myHandle.currentEvent, myHandle.currentArg);
goto execute_ignore;
}
if ((actionFun == ActionOrFun._DriverMachine_AnonFun0)) {
locals = null;
myHandle.cont.PushReturnTo(0, locals, myHandle.currentEvent, myHandle.currentArg);
goto execute_AnonFun0;
}
if ((actionFun == ActionOrFun._DriverMachine_AnonFun1)) {
locals = null;
myHandle.cont.PushReturnTo(0, locals, myHandle.currentEvent, myHandle.currentArg);
goto execute_AnonFun1;
}
assert(false, "Internal error");

;


execute_ResetObstacle:
while (!doPop) {
Main.ResetObstacle(myHandle, myHandle.cont);
doPop = ProcessContinuation();

}
return;

;


execute_Seal:
while (!doPop) {
Main.Seal(myHandle, myHandle.cont);
doPop = ProcessContinuation();

}
return;

;


execute_Unseal:
while (!doPop) {
Main.Unseal(myHandle, myHandle.cont);
doPop = ProcessContinuation();

}
return;

;


execute_InitializeMotionPlanning:
while (!doPop) {
Main.InitializeMotionPlanning(myHandle, myHandle.cont);
doPop = ProcessContinuation();

}
return;

;


execute_CAT_CAGE_LOC:
while (!doPop) {
Main.CAT_CAGE_LOC(myHandle, myHandle.cont);
doPop = ProcessContinuation();

}
return;

;


execute_DOG_CAGE_LOC:
while (!doPop) {
Main.DOG_CAGE_LOC(myHandle, myHandle.cont);
doPop = ProcessContinuation();

}
return;

;


execute_MICE_CAGE_LOC:
while (!doPop) {
Main.MICE_CAGE_LOC(myHandle, myHandle.cont);
doPop = ProcessContinuation();

}
return;

;


execute_BATTERY_THRESHOLD:
while (!doPop) {
Main.BATTERY_THRESHOLD(myHandle, myHandle.cont);
doPop = ProcessContinuation();

}
return;

;


execute_DOG:
while (!doPop) {
Main.DOG(myHandle, myHandle.cont);
doPop = ProcessContinuation();

}
return;

;


execute_CAT:
while (!doPop) {
Main.CAT(myHandle, myHandle.cont);
doPop = ProcessContinuation();

}
return;

;


execute_MICE:
while (!doPop) {
Main.MICE(myHandle, myHandle.cont);
doPop = ProcessContinuation();

}
return;

;


execute_BATTERY_CHARGE_LOCATION:
while (!doPop) {
Main.BATTERY_CHARGE_LOCATION(myHandle, myHandle.cont);
doPop = ProcessContinuation();

}
return;

;


execute_ROBOT_START_STATE:
while (!doPop) {
Main.ROBOT_START_STATE(myHandle, myHandle.cont);
doPop = ProcessContinuation();

}
return;

;


execute_SIZE_OF_GRID:
while (!doPop) {
Main.SIZE_OF_GRID(myHandle, myHandle.cont);
doPop = ProcessContinuation();

}
return;

;


execute_ROBOT_SCAN_LOCATIONS:
while (!doPop) {
Main.ROBOT_SCAN_LOCATIONS(myHandle, myHandle.cont);
doPop = ProcessContinuation();

}
return;

;


execute_GetStaticGoals:
while (!doPop) {
Main.GetStaticGoals(myHandle, myHandle.cont);
doPop = ProcessContinuation();

}
return;

;


execute_GetStaticObstacles:
while (!doPop) {
Main.GetStaticObstacles(myHandle, myHandle.cont);
doPop = ProcessContinuation();

}
return;

;


execute_ignore:
while (!doPop) {
ignore(myHandle.cont);
doPop = ProcessContinuation();

}
return;

;


execute_AnonFun0:
while (!doPop) {
AnonFun0(myHandle.cont);
doPop = ProcessContinuation();

}
return;

;


execute_AnonFun1:
while (!doPop) {
AnonFun1(myHandle.cont);
doPop = ProcessContinuation();

}
return;

;

}
void ignore(Continuation entryCtxt) {
PRT_VALUE_ARRAY locals;
SM_EVENT currentEvent;
PRT_VALUE currentArg;
StackFrame retTo_0;

dummy:
retTo_0 = entryCtxt.PopReturnTo();
locals = retTo_0.locals;
currentEvent = retTo_0.currentEvent;
currentArg = retTo_0.currentArg;
if ((retTo_0.pc == 0)) {
goto start;
}
assert(false, "Internal error");

start:

;
entryCtxt.Return();
return;

;

}
void AnonFun0(Continuation entryCtxt) {
PRT_VALUE_ARRAY locals;
SM_EVENT currentEvent;
PRT_VALUE currentArg;
StackFrame retTo_1;

dummy:
retTo_1 = entryCtxt.PopReturnTo();
locals = retTo_1.locals;
currentEvent = retTo_1.currentEvent;
currentArg = retTo_1.currentArg;
if ((retTo_1.pc == 0)) {
goto start;
}
assert(false, "Internal error");

start:

;
entryCtxt.Return();
return;

;

}
void AnonFun1(Continuation entryCtxt) {
PRT_VALUE_ARRAY locals;
SM_EVENT currentEvent;
PRT_VALUE currentArg;
PRT_VALUE tmpSendPayload_0;
PRT_VALUE tmpSendPayload_1;
PRT_VALUE tmp_0;
PRT_VALUE tmpSendPayload_2;
PRT_VALUE tmpSendPayload_3;
PRT_VALUE tmpSendPayload_4;
PRT_VALUE tmpSendPayload_5;
PRT_VALUE tmpSendPayload_6;
PRT_VALUE tmpSendPayload_7;
PRT_VALUE tmpSendPayload_8;
PRT_VALUE tmpSendPayload_9;
PRT_VALUE tmpSendPayload_10;
SM_HANDLE newMachine_0;
PRT_VALUE tmp_1;
PRT_VALUE_ARRAY argCloneVar_0;
PRT_VALUE ret_0;
PRT_VALUE tmpTuple_0;
PRT_VALUE tmpSendPayload_11;
SM_HANDLE newMachine_1;
PRT_VALUE tmp_2;
PRT_VALUE tmpTuple_1;
PRT_VALUE tmpSendPayload_12;
SM_HANDLE newMachine_2;
PRT_VALUE tmp_3;
PRT_VALUE tmp_4;
PRT_VALUE tmpPayload_0;
StackFrame retTo_2;

dummy:
retTo_2 = entryCtxt.PopReturnTo();
locals = retTo_2.locals;
currentEvent = retTo_2.currentEvent;
currentArg = retTo_2.currentArg;
if ((retTo_2.pc == 0)) {
goto start;
}
if ((retTo_2.pc == 1)) {
goto AnonFun1_0;
}
if ((retTo_2.pc == 2)) {
goto AnonFun1_1;
}
if ((retTo_2.pc == 3)) {
goto AnonFun1_2;
}
if ((retTo_2.pc == 4)) {
goto AnonFun1_3;
}
assert(false, "Internal error");

start:
tmpSendPayload_0 = PRT_VALUE.PrtMkDefaultValue(Main.type_0_PRT_TYPE);
Main.CreateMachine_Prop_1(tmpSendPayload_0);
tmpSendPayload_1 = PRT_VALUE.PrtMkDefaultValue(Main.type_0_PRT_TYPE);
Main.CreateMachine_Prop_2(tmpSendPayload_1);
tmp_0 = PRT_VALUE.PrtMkDefaultValue(Main.type_1_PRT_TYPE);
PRT_VALUE.PrtPrimSetInt(tmp_0, 3);
tmpSendPayload_2 = PRT_VALUE.PrtCloneValue(tmp_0);
Main.CreateMachine_Prop_3(tmpSendPayload_2);
tmpSendPayload_3 = PRT_VALUE.PrtMkDefaultValue(Main.type_0_PRT_TYPE);
Main.CreateMachine_Prop_6(tmpSendPayload_3);
tmpSendPayload_4 = PRT_VALUE.PrtMkDefaultValue(Main.type_0_PRT_TYPE);
Main.CreateMachine_Prop_7(tmpSendPayload_4);
tmpSendPayload_5 = PRT_VALUE.PrtMkDefaultValue(Main.type_0_PRT_TYPE);
Main.CreateMachine_Prop_8(tmpSendPayload_5);
tmpSendPayload_6 = PRT_VALUE.PrtMkDefaultValue(Main.type_0_PRT_TYPE);
Main.CreateMachine_Prop_9(tmpSendPayload_6);
tmpSendPayload_7 = PRT_VALUE.PrtMkDefaultValue(Main.type_0_PRT_TYPE);
Main.CreateMachine_Prop_10a(tmpSendPayload_7);
tmpSendPayload_8 = PRT_VALUE.PrtMkDefaultValue(Main.type_0_PRT_TYPE);
Main.CreateMachine_Prop_10b(tmpSendPayload_8);
tmpSendPayload_9 = PRT_VALUE.PrtMkDefaultValue(Main.type_0_PRT_TYPE);
Main.CreateMachine_Prop_10c(tmpSendPayload_9);
tmpSendPayload_10 = PRT_VALUE.PrtMkDefaultValue(Main.type_0_PRT_TYPE);
newMachine_0 = Main.CreateMachine_Environment(tmpSendPayload_10);
entryCtxt.NewMachine(1, locals, currentEvent, currentArg, newMachine_0);
return;

AnonFun1_0:
newMachine_0 = entryCtxt.id;

;
entryCtxt.id = null;
tmp_1 = PRT_VALUE.PrtMkDefaultValue(Main.type_8_PRT_TYPE);
PRT_VALUE.PrtPrimSetMachine(tmp_1, newMachine_0);
envMachine = PRT_VALUE.PrtCloneValue(tmp_1);
argCloneVar_0 = null;
entryCtxt.PushReturnTo(0, argCloneVar_0, currentEvent, currentArg);

AnonFun1_1:
Main.ROBOT_START_STATE(myHandle, entryCtxt);

;
if ((entryCtxt.reason == ContinuationReason.Return)) {
ret_0 = entryCtxt.retVal;

} else {
entryCtxt.PushReturnTo(2, locals, currentEvent, currentArg);
return;

}
tmpTuple_0 = PRT_VALUE.PrtMkDefaultValue(Main.type_10_PRT_TYPE);
PRT_VALUE.PrtTupleSet(tmpTuple_0, 0, ret_0);
PRT_VALUE.PrtTupleSet(tmpTuple_0, 1, envMachine);
tmpSendPayload_11 = PRT_VALUE.PrtCloneValue(tmpTuple_0);
newMachine_1 = Main.CreateMachine_RobotStateManager(tmpSendPayload_11);
entryCtxt.NewMachine(3, locals, currentEvent, currentArg, newMachine_1);
return;

AnonFun1_2:
newMachine_1 = entryCtxt.id;

;
entryCtxt.id = null;
tmp_2 = PRT_VALUE.PrtMkDefaultValue(Main.type_8_PRT_TYPE);
PRT_VALUE.PrtPrimSetMachine(tmp_2, newMachine_1);
robotStMng = PRT_VALUE.PrtCloneValue(tmp_2);
tmpTuple_1 = PRT_VALUE.PrtMkDefaultValue(Main.type_11_PRT_TYPE);
PRT_VALUE.PrtTupleSet(tmpTuple_1, 0, envMachine);
PRT_VALUE.PrtTupleSet(tmpTuple_1, 1, robotStMng);
tmpSendPayload_12 = PRT_VALUE.PrtCloneValue(tmpTuple_1);
newMachine_2 = Main.CreateMachine_RobotTaskPlanner(tmpSendPayload_12);
entryCtxt.NewMachine(4, locals, currentEvent, currentArg, newMachine_2);
return;

AnonFun1_3:
newMachine_2 = entryCtxt.id;

;
entryCtxt.id = null;
tmp_3 = PRT_VALUE.PrtMkDefaultValue(Main.type_8_PRT_TYPE);
PRT_VALUE.PrtPrimSetMachine(tmp_3, newMachine_2);
robot = PRT_VALUE.PrtCloneValue(tmp_3);
tmp_4 = PRT_VALUE.PrtMkDefaultValue(Main.type_12_PRT_TYPE);
PRT_VALUE.PrtPrimSetEvent(tmp_4, Main.halt_SM_EVENT);
tmpPayload_0 = PRT_VALUE.PrtMkDefaultValue(Main.type_0_PRT_TYPE);
assert((tmp_4.ev != null), "(67, 4): Raised event must be non-null");
trace("<RaiseLog> Machine DriverMachine-{0} raised Event {1}\n", myHandle.instance, tmp_4.ev.name);
myHandle.currentEvent = tmp_4.ev;
myHandle.currentArg = tmpPayload_0;
entryCtxt.Raise();
return;

;
entryCtxt.Return();
return;

;

}
};

class MACHINE_RobotTaskPlanner{
PRT_VALUE senseInfer;
PRT_VALUE envMachine;
PRT_VALUE robotStMng;
PRT_VALUE motionPlanner;
PRT_VALUE motionPlanEx;
PRT_VALUE currentRobotState;
PRT_VALUE currentSensorState;
PRT_VALUE scanLocations;
PRT_VALUE herdingState;
PRT_VALUE herdingTogether;
PRT_VALUE nextLocation;
SM_HANDLE myHandle;
void RobotTaskPlanner_Init_CalculateDeferredAndActionSet() {

dummy:
myHandle.stack.deferredSet = new SM_EVENT_SET;
myHandle.stack.actionSet = new SM_EVENT_SET;
myHandle.stack.AddStackDeferredSet(myHandle.stack.deferredSet);
myHandle.stack.deferredSet = (myHandle.stack.deferredSet - Main.local_SM_EVENT);
myHandle.stack.AddStackActionSet(myHandle.stack.actionSet);
myHandle.stack.actionSet = (myHandle.stack.actionSet - Main.local_SM_EVENT);
myHandle.stack.es = new SM_EVENT_ARRAY[0];
myHandle.stack.as = new ActionOrFun_ARRAY[0];

;

}
void RobotTaskPlanner_SetUpSystem_CalculateDeferredAndActionSet() {

dummy:
myHandle.stack.deferredSet = new SM_EVENT_SET;
myHandle.stack.actionSet = new SM_EVENT_SET;
myHandle.stack.AddStackDeferredSet(myHandle.stack.deferredSet);
myHandle.stack.deferredSet = (myHandle.stack.deferredSet - Main.local_SM_EVENT);
myHandle.stack.AddStackActionSet(myHandle.stack.actionSet);
myHandle.stack.actionSet = (myHandle.stack.actionSet - Main.local_SM_EVENT);
myHandle.stack.es = new SM_EVENT_ARRAY[0];
myHandle.stack.as = new ActionOrFun_ARRAY[0];

;

}
void RobotTaskPlanner_ScanningModeOfOperation_CalculateDeferredAndActionSet() {

dummy:
myHandle.stack.deferredSet = new SM_EVENT_SET;
myHandle.stack.actionSet = new SM_EVENT_SET;
myHandle.stack.AddStackDeferredSet(myHandle.stack.deferredSet);
myHandle.stack.deferredSet = (myHandle.stack.deferredSet - Main.FailureToComputePlan_SM_EVENT);
myHandle.stack.deferredSet = (myHandle.stack.deferredSet - Main.MotionPlanFor_SM_EVENT);
myHandle.stack.deferredSet = (myHandle.stack.deferredSet - Main.BatteryLow_SM_EVENT);
myHandle.stack.deferredSet = (myHandle.stack.deferredSet - Main.startNewHerding_SM_EVENT);
myHandle.stack.deferredSet = (myHandle.stack.deferredSet - Main.EnvEventDetected_SM_EVENT);
myHandle.stack.deferredSet = (myHandle.stack.deferredSet - Main.ReDo_SM_EVENT);
myHandle.stack.deferredSet = (myHandle.stack.deferredSet - Main.success_SM_EVENT);
myHandle.stack.AddStackActionSet(myHandle.stack.actionSet);
myHandle.stack.actionSet = (myHandle.stack.actionSet + Main.FailureToComputePlan_SM_EVENT);
myHandle.stack.actionSet = (myHandle.stack.actionSet - Main.MotionPlanFor_SM_EVENT);
myHandle.stack.actionSet = (myHandle.stack.actionSet - Main.BatteryLow_SM_EVENT);
myHandle.stack.actionSet = (myHandle.stack.actionSet - Main.startNewHerding_SM_EVENT);
myHandle.stack.actionSet = (myHandle.stack.actionSet - Main.EnvEventDetected_SM_EVENT);
myHandle.stack.actionSet = (myHandle.stack.actionSet - Main.ReDo_SM_EVENT);
myHandle.stack.actionSet = (myHandle.stack.actionSet - Main.success_SM_EVENT);
myHandle.stack.es = new SM_EVENT_ARRAY[1];
myHandle.stack.as = new ActionOrFun_ARRAY[1];
myHandle.stack.es[0] = Main.FailureToComputePlan_SM_EVENT;
myHandle.stack.as[0] = ActionOrFun._RobotTaskPlanner_AnonFun4;

;

}
void RobotTaskPlanner_ExecutePlan_CalculateDeferredAndActionSet() {

dummy:
myHandle.stack.deferredSet = new SM_EVENT_SET;
myHandle.stack.actionSet = new SM_EVENT_SET;
myHandle.stack.AddStackDeferredSet(myHandle.stack.deferredSet);
myHandle.stack.deferredSet = (myHandle.stack.deferredSet - Main.continueCurrentHerding_SM_EVENT);
myHandle.stack.deferredSet = (myHandle.stack.deferredSet - Main.ReachedDestination_SM_EVENT);
myHandle.stack.AddStackActionSet(myHandle.stack.actionSet);
myHandle.stack.actionSet = (myHandle.stack.actionSet + Main.continueCurrentHerding_SM_EVENT);
myHandle.stack.actionSet = (myHandle.stack.actionSet + Main.ReachedDestination_SM_EVENT);
myHandle.stack.es = new SM_EVENT_ARRAY[2];
myHandle.stack.as = new ActionOrFun_ARRAY[2];
myHandle.stack.es[0] = Main.continueCurrentHerding_SM_EVENT;
myHandle.stack.as[0] = ActionOrFun._RobotTaskPlanner_ignore;
myHandle.stack.es[1] = Main.ReachedDestination_SM_EVENT;
myHandle.stack.as[1] = ActionOrFun._RobotTaskPlanner_AnonFun6;

;

}
void RobotTaskPlanner_LowBatteryDetected_CalculateDeferredAndActionSet() {

dummy:
myHandle.stack.deferredSet = new SM_EVENT_SET;
myHandle.stack.actionSet = new SM_EVENT_SET;
myHandle.stack.AddStackDeferredSet(myHandle.stack.deferredSet);
myHandle.stack.deferredSet = (myHandle.stack.deferredSet + Main.EnvEventDetected_SM_EVENT);
myHandle.stack.deferredSet = (myHandle.stack.deferredSet - Main.FailureToComputePlan_SM_EVENT);
myHandle.stack.deferredSet = (myHandle.stack.deferredSet - Main.MotionPlanFor_SM_EVENT);
myHandle.stack.deferredSet = (myHandle.stack.deferredSet - Main.BatteryLow_SM_EVENT);
myHandle.stack.deferredSet = (myHandle.stack.deferredSet - Main.ReDo_SM_EVENT);
myHandle.stack.deferredSet = (myHandle.stack.deferredSet - Main.success_SM_EVENT);
myHandle.stack.AddStackActionSet(myHandle.stack.actionSet);
myHandle.stack.actionSet = (myHandle.stack.actionSet - Main.EnvEventDetected_SM_EVENT);
myHandle.stack.actionSet = (myHandle.stack.actionSet + Main.FailureToComputePlan_SM_EVENT);
myHandle.stack.actionSet = (myHandle.stack.actionSet - Main.MotionPlanFor_SM_EVENT);
myHandle.stack.actionSet = (myHandle.stack.actionSet - Main.BatteryLow_SM_EVENT);
myHandle.stack.actionSet = (myHandle.stack.actionSet - Main.ReDo_SM_EVENT);
myHandle.stack.actionSet = (myHandle.stack.actionSet - Main.success_SM_EVENT);
myHandle.stack.es = new SM_EVENT_ARRAY[1];
myHandle.stack.as = new ActionOrFun_ARRAY[1];
myHandle.stack.es[0] = Main.FailureToComputePlan_SM_EVENT;
myHandle.stack.as[0] = ActionOrFun._RobotTaskPlanner_AnonFun4;

;

}
void RobotTaskPlanner_TakeActionOnEnvEventDetected_CalculateDeferredAndActionSet() {

dummy:
myHandle.stack.deferredSet = new SM_EVENT_SET;
myHandle.stack.actionSet = new SM_EVENT_SET;
myHandle.stack.AddStackDeferredSet(myHandle.stack.deferredSet);
myHandle.stack.AddStackActionSet(myHandle.stack.actionSet);
myHandle.stack.es = new SM_EVENT_ARRAY[0];
myHandle.stack.as = new ActionOrFun_ARRAY[0];

;

}
void RobotTaskPlanner_SelectGoalLocationAndComputePlan_CalculateDeferredAndActionSet() {

dummy:
myHandle.stack.deferredSet = new SM_EVENT_SET;
myHandle.stack.actionSet = new SM_EVENT_SET;
myHandle.stack.AddStackDeferredSet(myHandle.stack.deferredSet);
myHandle.stack.deferredSet = (myHandle.stack.deferredSet - Main.continueCurrentHerding_SM_EVENT);
myHandle.stack.deferredSet = (myHandle.stack.deferredSet - Main.ReachedDestination_SM_EVENT);
myHandle.stack.deferredSet = (myHandle.stack.deferredSet - Main.FailureToComputePlan_SM_EVENT);
myHandle.stack.deferredSet = (myHandle.stack.deferredSet - Main.success_SM_EVENT);
myHandle.stack.deferredSet = (myHandle.stack.deferredSet - Main.MotionPlanFor_SM_EVENT);
myHandle.stack.deferredSet = (myHandle.stack.deferredSet - Main.ReDo_SM_EVENT);
myHandle.stack.deferredSet = (myHandle.stack.deferredSet - Main.doScanning_SM_EVENT);
myHandle.stack.deferredSet = (myHandle.stack.deferredSet - Main.BatteryLow_SM_EVENT);
myHandle.stack.deferredSet = (myHandle.stack.deferredSet - Main.EnvEventDetected_SM_EVENT);
myHandle.stack.AddStackActionSet(myHandle.stack.actionSet);
myHandle.stack.actionSet = (myHandle.stack.actionSet + Main.continueCurrentHerding_SM_EVENT);
myHandle.stack.actionSet = (myHandle.stack.actionSet + Main.ReachedDestination_SM_EVENT);
myHandle.stack.actionSet = (myHandle.stack.actionSet + Main.FailureToComputePlan_SM_EVENT);
myHandle.stack.actionSet = (myHandle.stack.actionSet + Main.success_SM_EVENT);
myHandle.stack.actionSet = (myHandle.stack.actionSet - Main.MotionPlanFor_SM_EVENT);
myHandle.stack.actionSet = (myHandle.stack.actionSet - Main.ReDo_SM_EVENT);
myHandle.stack.actionSet = (myHandle.stack.actionSet - Main.doScanning_SM_EVENT);
myHandle.stack.actionSet = (myHandle.stack.actionSet - Main.BatteryLow_SM_EVENT);
myHandle.stack.actionSet = (myHandle.stack.actionSet - Main.EnvEventDetected_SM_EVENT);
myHandle.stack.es = new SM_EVENT_ARRAY[4];
myHandle.stack.as = new ActionOrFun_ARRAY[4];
myHandle.stack.es[0] = Main.continueCurrentHerding_SM_EVENT;
myHandle.stack.as[0] = ActionOrFun._RobotTaskPlanner_ignore;
myHandle.stack.es[1] = Main.ReachedDestination_SM_EVENT;
myHandle.stack.as[1] = ActionOrFun._RobotTaskPlanner_ignore;
myHandle.stack.es[2] = Main.FailureToComputePlan_SM_EVENT;
myHandle.stack.as[2] = ActionOrFun._RobotTaskPlanner_AnonFun4;
myHandle.stack.es[3] = Main.success_SM_EVENT;
myHandle.stack.as[3] = ActionOrFun._RobotTaskPlanner_AnonFun11;

;

}
void Start() {

dummy:
Run(Main.RobotTaskPlanner_Init_SM_STATE);
if ((myHandle.currentEvent == Main.halt_SM_EVENT)) {
myHandle.stack = null;
myHandle.buffer = null;
myHandle.currentArg = null;
SM_HANDLE.halted = (SM_HANDLE.halted + myHandle);
SM_HANDLE.enabled = (SM_HANDLE.enabled - myHandle);
return;

}
trace("<StateLog> Unhandled event exception by machine RobotTaskPlanner-{0}\n", myHandle.instance);
assert(false, "Unhandled event exception by machine RobotTaskPlanner");

;

}
void Run(SM_STATE state) {
bool doPop;
bool hasNullTransitionOrAction;

init:
myHandle.Push();
myHandle.stack.state = state;
doPop = RunHelper(true);
while (!doPop) {
hasNullTransitionOrAction = myHandle.stack.HasNullTransitionOrAction();
myHandle.DequeueEvent(hasNullTransitionOrAction);
doPop = RunHelper(false);

}
myHandle.Pop();

;

}
void TraceEnterState(SM_STATE state) {

init:
if ((state == Main.RobotTaskPlanner_Init_SM_STATE)) {
trace("<StateLog> Machine RobotTaskPlanner-{0} entering State Init\n", myHandle.instance);
return;

}
if ((state == Main.RobotTaskPlanner_SetUpSystem_SM_STATE)) {
trace("<StateLog> Machine RobotTaskPlanner-{0} entering State SetUpSystem\n", myHandle.instance);
return;

}
if ((state == Main.RobotTaskPlanner_ScanningModeOfOperation_SM_STATE)) {
trace("<StateLog> Machine RobotTaskPlanner-{0} entering State ScanningModeOfOperation\n", myHandle.instance);
return;

}
if ((state == Main.RobotTaskPlanner_ExecutePlan_SM_STATE)) {
trace("<StateLog> Machine RobotTaskPlanner-{0} entering State ExecutePlan\n", myHandle.instance);
return;

}
if ((state == Main.RobotTaskPlanner_LowBatteryDetected_SM_STATE)) {
trace("<StateLog> Machine RobotTaskPlanner-{0} entering State LowBatteryDetected\n", myHandle.instance);
return;

}
if ((state == Main.RobotTaskPlanner_TakeActionOnEnvEventDetected_SM_STATE)) {
trace("<StateLog> Machine RobotTaskPlanner-{0} entering State TakeActionOnEnvEventDetected\n", myHandle.instance);
return;

}
if ((state == Main.RobotTaskPlanner_SelectGoalLocationAndComputePlan_SM_STATE)) {
trace("<StateLog> Machine RobotTaskPlanner-{0} entering State SelectGoalLocationAndComputePlan\n", myHandle.instance);
return;

}
assert(false, "Internal error");

;

}
void TraceExitState(SM_STATE state) {

init:
if ((state == Main.RobotTaskPlanner_Init_SM_STATE)) {
trace("<StateLog> Machine RobotTaskPlanner-{0} exiting State Init\n", myHandle.instance);
return;

}
if ((state == Main.RobotTaskPlanner_SetUpSystem_SM_STATE)) {
trace("<StateLog> Machine RobotTaskPlanner-{0} exiting State SetUpSystem\n", myHandle.instance);
return;

}
if ((state == Main.RobotTaskPlanner_ScanningModeOfOperation_SM_STATE)) {
trace("<StateLog> Machine RobotTaskPlanner-{0} exiting State ScanningModeOfOperation\n", myHandle.instance);
return;

}
if ((state == Main.RobotTaskPlanner_ExecutePlan_SM_STATE)) {
trace("<StateLog> Machine RobotTaskPlanner-{0} exiting State ExecutePlan\n", myHandle.instance);
return;

}
if ((state == Main.RobotTaskPlanner_LowBatteryDetected_SM_STATE)) {
trace("<StateLog> Machine RobotTaskPlanner-{0} exiting State LowBatteryDetected\n", myHandle.instance);
return;

}
if ((state == Main.RobotTaskPlanner_TakeActionOnEnvEventDetected_SM_STATE)) {
trace("<StateLog> Machine RobotTaskPlanner-{0} exiting State TakeActionOnEnvEventDetected\n", myHandle.instance);
return;

}
if ((state == Main.RobotTaskPlanner_SelectGoalLocationAndComputePlan_SM_STATE)) {
trace("<StateLog> Machine RobotTaskPlanner-{0} exiting State SelectGoalLocationAndComputePlan\n", myHandle.instance);
return;

}
assert(false, "Internal error");

;

}
void CalculateDeferredAndActionSet(SM_STATE state) {

init:
if ((state == Main.RobotTaskPlanner_Init_SM_STATE)) {
RobotTaskPlanner_Init_CalculateDeferredAndActionSet();
return;

}
if ((state == Main.RobotTaskPlanner_SetUpSystem_SM_STATE)) {
RobotTaskPlanner_SetUpSystem_CalculateDeferredAndActionSet();
return;

}
if ((state == Main.RobotTaskPlanner_ScanningModeOfOperation_SM_STATE)) {
RobotTaskPlanner_ScanningModeOfOperation_CalculateDeferredAndActionSet();
return;

}
if ((state == Main.RobotTaskPlanner_ExecutePlan_SM_STATE)) {
RobotTaskPlanner_ExecutePlan_CalculateDeferredAndActionSet();
return;

}
if ((state == Main.RobotTaskPlanner_LowBatteryDetected_SM_STATE)) {
RobotTaskPlanner_LowBatteryDetected_CalculateDeferredAndActionSet();
return;

}
if ((state == Main.RobotTaskPlanner_TakeActionOnEnvEventDetected_SM_STATE)) {
RobotTaskPlanner_TakeActionOnEnvEventDetected_CalculateDeferredAndActionSet();
return;

}
if ((state == Main.RobotTaskPlanner_SelectGoalLocationAndComputePlan_SM_STATE)) {
RobotTaskPlanner_SelectGoalLocationAndComputePlan_CalculateDeferredAndActionSet();
return;

}
assert(false, "Internal error");

;

}
bool RunHelper(bool start) {
SM_STATE state;
SM_TRANSITION transition;
ActionOrFun actionFun;

init:
state = myHandle.stack.state;
if (start) {
goto enter;
} else {
goto handle;
}

;


enter:
state = myHandle.stack.state;
TraceEnterState(state);
CalculateDeferredAndActionSet(state);
actionFun = state.entryFun;

;


execute:
ReentrancyHelper(actionFun);
if ((myHandle.cont.reason == ContinuationReason.Raise)) {
goto handle;
}
myHandle.currentEvent = null;
myHandle.currentArg = PRT_VALUE.PrtMkDefaultValue(Main.type_0_PRT_TYPE);
if ((myHandle.cont.reason != ContinuationReason.Pop)) {
return false;

}
TraceExitState(state);
ReentrancyHelper(state.exitFun);
return true;

;


handle:
if ((myHandle.currentEvent in myHandle.stack.actionSet)) {
actionFun = myHandle.stack.Find(myHandle.currentEvent);
goto execute;
}
transition = state.FindPushTransition(myHandle.currentEvent);
if ((transition != null)) {
Run(transition.to);
if ((myHandle.currentEvent == null)) {
return false;

} else {
goto handle;
}

}
TraceExitState(state);
ReentrancyHelper(state.exitFun);
transition = state.FindTransition(myHandle.currentEvent);
if ((transition == null)) {
return true;

}
ReentrancyHelper(transition.fun);
myHandle.stack.state = transition.to;
state = myHandle.stack.state;
goto enter;
;

}
bool ProcessContinuation() {
bool doPop;

init:
if ((myHandle.cont.reason == ContinuationReason.Return)) {
return true;

}
if ((myHandle.cont.reason == ContinuationReason.Pop)) {
return true;

}
if ((myHandle.cont.reason == ContinuationReason.Raise)) {
return true;

}
if ((myHandle.cont.reason == ContinuationReason.Receive)) {
myHandle.DequeueEvent(false);
return false;

}
if ((myHandle.cont.reason == ContinuationReason.Nondet)) {
myHandle.cont.nondet = choose(bool);
return false;

}
if ((myHandle.cont.reason == ContinuationReason.NewMachine)) {
yield;
return false;

}
if ((myHandle.cont.reason == ContinuationReason.Send)) {
yield;
return false;

}

;

}
void ReentrancyHelper(ActionOrFun actionFun) {
PRT_VALUE_ARRAY locals;
bool doPop;

init:
doPop = false;
myHandle.cont.Reset();
if ((actionFun == ActionOrFun._ResetObstacle)) {
trace("<FunctionLog> Machine RobotTaskPlanner-{0} executing Function ResetObstacle\n", myHandle.instance);
locals = null;
myHandle.cont.PushReturnTo(0, locals, myHandle.currentEvent, myHandle.currentArg);
goto execute_ResetObstacle;
}
if ((actionFun == ActionOrFun._Seal)) {
trace("<FunctionLog> Machine RobotTaskPlanner-{0} executing Function Seal\n", myHandle.instance);
locals = null;
myHandle.cont.PushReturnTo(0, locals, myHandle.currentEvent, myHandle.currentArg);
goto execute_Seal;
}
if ((actionFun == ActionOrFun._Unseal)) {
trace("<FunctionLog> Machine RobotTaskPlanner-{0} executing Function Unseal\n", myHandle.instance);
locals = null;
myHandle.cont.PushReturnTo(0, locals, myHandle.currentEvent, myHandle.currentArg);
goto execute_Unseal;
}
if ((actionFun == ActionOrFun._InitializeMotionPlanning)) {
trace("<FunctionLog> Machine RobotTaskPlanner-{0} executing Function InitializeMotionPlanning\n", myHandle.instance);
locals = new PRT_VALUE_ARRAY[4];
locals[3] = PRT_VALUE.PrtMkDefaultValue(Main.type_1_PRT_TYPE);
locals[2] = PRT_VALUE.PrtMkDefaultValue(Main.type_2_PRT_TYPE);
locals[1] = PRT_VALUE.PrtMkDefaultValue(Main.type_2_PRT_TYPE);
locals[0] = PRT_VALUE.PrtMkDefaultValue(Main.type_4_PRT_TYPE);
myHandle.cont.PushReturnTo(0, locals, myHandle.currentEvent, myHandle.currentArg);
goto execute_InitializeMotionPlanning;
}
if ((actionFun == ActionOrFun._CAT_CAGE_LOC)) {
trace("<FunctionLog> Machine RobotTaskPlanner-{0} executing Function CAT_CAGE_LOC\n", myHandle.instance);
locals = null;
myHandle.cont.PushReturnTo(0, locals, myHandle.currentEvent, myHandle.currentArg);
goto execute_CAT_CAGE_LOC;
}
if ((actionFun == ActionOrFun._DOG_CAGE_LOC)) {
trace("<FunctionLog> Machine RobotTaskPlanner-{0} executing Function DOG_CAGE_LOC\n", myHandle.instance);
locals = null;
myHandle.cont.PushReturnTo(0, locals, myHandle.currentEvent, myHandle.currentArg);
goto execute_DOG_CAGE_LOC;
}
if ((actionFun == ActionOrFun._MICE_CAGE_LOC)) {
trace("<FunctionLog> Machine RobotTaskPlanner-{0} executing Function MICE_CAGE_LOC\n", myHandle.instance);
locals = null;
myHandle.cont.PushReturnTo(0, locals, myHandle.currentEvent, myHandle.currentArg);
goto execute_MICE_CAGE_LOC;
}
if ((actionFun == ActionOrFun._BATTERY_THRESHOLD)) {
trace("<FunctionLog> Machine RobotTaskPlanner-{0} executing Function BATTERY_THRESHOLD\n", myHandle.instance);
locals = null;
myHandle.cont.PushReturnTo(0, locals, myHandle.currentEvent, myHandle.currentArg);
goto execute_BATTERY_THRESHOLD;
}
if ((actionFun == ActionOrFun._DOG)) {
trace("<FunctionLog> Machine RobotTaskPlanner-{0} executing Function DOG\n", myHandle.instance);
locals = null;
myHandle.cont.PushReturnTo(0, locals, myHandle.currentEvent, myHandle.currentArg);
goto execute_DOG;
}
if ((actionFun == ActionOrFun._CAT)) {
trace("<FunctionLog> Machine RobotTaskPlanner-{0} executing Function CAT\n", myHandle.instance);
locals = null;
myHandle.cont.PushReturnTo(0, locals, myHandle.currentEvent, myHandle.currentArg);
goto execute_CAT;
}
if ((actionFun == ActionOrFun._MICE)) {
trace("<FunctionLog> Machine RobotTaskPlanner-{0} executing Function MICE\n", myHandle.instance);
locals = null;
myHandle.cont.PushReturnTo(0, locals, myHandle.currentEvent, myHandle.currentArg);
goto execute_MICE;
}
if ((actionFun == ActionOrFun._BATTERY_CHARGE_LOCATION)) {
trace("<FunctionLog> Machine RobotTaskPlanner-{0} executing Function BATTERY_CHARGE_LOCATION\n", myHandle.instance);
locals = null;
myHandle.cont.PushReturnTo(0, locals, myHandle.currentEvent, myHandle.currentArg);
goto execute_BATTERY_CHARGE_LOCATION;
}
if ((actionFun == ActionOrFun._ROBOT_START_STATE)) {
trace("<FunctionLog> Machine RobotTaskPlanner-{0} executing Function ROBOT_START_STATE\n", myHandle.instance);
locals = null;
myHandle.cont.PushReturnTo(0, locals, myHandle.currentEvent, myHandle.currentArg);
goto execute_ROBOT_START_STATE;
}
if ((actionFun == ActionOrFun._SIZE_OF_GRID)) {
trace("<FunctionLog> Machine RobotTaskPlanner-{0} executing Function SIZE_OF_GRID\n", myHandle.instance);
locals = null;
myHandle.cont.PushReturnTo(0, locals, myHandle.currentEvent, myHandle.currentArg);
goto execute_SIZE_OF_GRID;
}
if ((actionFun == ActionOrFun._ROBOT_SCAN_LOCATIONS)) {
trace("<FunctionLog> Machine RobotTaskPlanner-{0} executing Function ROBOT_SCAN_LOCATIONS\n", myHandle.instance);
locals = new PRT_VALUE_ARRAY[3];
locals[2] = PRT_VALUE.PrtMkDefaultValue(Main.type_2_PRT_TYPE);
locals[1] = PRT_VALUE.PrtMkDefaultValue(Main.type_2_PRT_TYPE);
locals[0] = PRT_VALUE.PrtMkDefaultValue(Main.type_1_PRT_TYPE);
myHandle.cont.PushReturnTo(0, locals, myHandle.currentEvent, myHandle.currentArg);
goto execute_ROBOT_SCAN_LOCATIONS;
}
if ((actionFun == ActionOrFun._GetStaticGoals)) {
trace("<FunctionLog> Machine RobotTaskPlanner-{0} executing Function GetStaticGoals\n", myHandle.instance);
locals = new PRT_VALUE_ARRAY[1];
locals[0] = PRT_VALUE.PrtMkDefaultValue(Main.type_7_PRT_TYPE);
myHandle.cont.PushReturnTo(0, locals, myHandle.currentEvent, myHandle.currentArg);
goto execute_GetStaticGoals;
}
if ((actionFun == ActionOrFun._GetStaticObstacles)) {
trace("<FunctionLog> Machine RobotTaskPlanner-{0} executing Function GetStaticObstacles\n", myHandle.instance);
locals = new PRT_VALUE_ARRAY[1];
locals[0] = PRT_VALUE.PrtMkDefaultValue(Main.type_2_PRT_TYPE);
myHandle.cont.PushReturnTo(0, locals, myHandle.currentEvent, myHandle.currentArg);
goto execute_GetStaticObstacles;
}
if ((actionFun == ActionOrFun._RobotTaskPlanner_ignore)) {
trace("<FunctionLog> Machine RobotTaskPlanner-{0} executing Function ignore\n", myHandle.instance);
locals = null;
myHandle.cont.PushReturnTo(0, locals, myHandle.currentEvent, myHandle.currentArg);
goto execute_ignore;
}
if ((actionFun == ActionOrFun._RobotTaskPlanner_GetNextScanLocation)) {
trace("<FunctionLog> Machine RobotTaskPlanner-{0} executing Function GetNextScanLocation\n", myHandle.instance);
locals = new PRT_VALUE_ARRAY[2];
locals[1] = PRT_VALUE.PrtMkDefaultValue(Main.type_1_PRT_TYPE);
locals[0] = PRT_VALUE.PrtMkDefaultValue(Main.type_1_PRT_TYPE);
myHandle.cont.PushReturnTo(0, locals, myHandle.currentEvent, myHandle.currentArg);
goto execute_GetNextScanLocation;
}
if ((actionFun == ActionOrFun._RobotTaskPlanner_CancelCurrentExecution)) {
trace("<FunctionLog> Machine RobotTaskPlanner-{0} executing Function CancelCurrentExecution\n", myHandle.instance);
locals = null;
myHandle.cont.PushReturnTo(0, locals, myHandle.currentEvent, myHandle.currentArg);
goto execute_CancelCurrentExecution;
}
if ((actionFun == ActionOrFun._RobotTaskPlanner_UpdateCurrentRobotState)) {
trace("<FunctionLog> Machine RobotTaskPlanner-{0} executing Function UpdateCurrentRobotState\n", myHandle.instance);
locals = null;
myHandle.cont.PushReturnTo(0, locals, myHandle.currentEvent, myHandle.currentArg);
goto execute_UpdateCurrentRobotState;
}
if ((actionFun == ActionOrFun._RobotTaskPlanner_AnonFun0)) {
locals = null;
myHandle.cont.PushReturnTo(0, locals, myHandle.currentEvent, myHandle.currentArg);
goto execute_AnonFun0;
}
if ((actionFun == ActionOrFun._RobotTaskPlanner_AnonFun1)) {
locals = null;
myHandle.cont.PushReturnTo(0, locals, myHandle.currentEvent, myHandle.currentArg);
goto execute_AnonFun1;
}
if ((actionFun == ActionOrFun._RobotTaskPlanner_AnonFun2)) {
locals = null;
myHandle.cont.PushReturnTo(0, locals, myHandle.currentEvent, myHandle.currentArg);
goto execute_AnonFun2;
}
if ((actionFun == ActionOrFun._RobotTaskPlanner_AnonFun3)) {
locals = null;
myHandle.cont.PushReturnTo(0, locals, myHandle.currentEvent, myHandle.currentArg);
goto execute_AnonFun3;
}
if ((actionFun == ActionOrFun._RobotTaskPlanner_AnonFun4)) {
locals = null;
myHandle.cont.PushReturnTo(0, locals, myHandle.currentEvent, myHandle.currentArg);
goto execute_AnonFun4;
}
if ((actionFun == ActionOrFun._RobotTaskPlanner_AnonFun5)) {
locals = null;
myHandle.cont.PushReturnTo(0, locals, myHandle.currentEvent, myHandle.currentArg);
goto execute_AnonFun5;
}
if ((actionFun == ActionOrFun._RobotTaskPlanner_AnonFun6)) {
locals = null;
myHandle.cont.PushReturnTo(0, locals, myHandle.currentEvent, myHandle.currentArg);
goto execute_AnonFun6;
}
if ((actionFun == ActionOrFun._RobotTaskPlanner_AnonFun7)) {
locals = null;
myHandle.cont.PushReturnTo(0, locals, myHandle.currentEvent, myHandle.currentArg);
goto execute_AnonFun7;
}
if ((actionFun == ActionOrFun._RobotTaskPlanner_AnonFun8)) {
locals = null;
myHandle.cont.PushReturnTo(0, locals, myHandle.currentEvent, myHandle.currentArg);
goto execute_AnonFun8;
}
if ((actionFun == ActionOrFun._RobotTaskPlanner_AnonFun9)) {
locals = null;
myHandle.cont.PushReturnTo(0, locals, myHandle.currentEvent, myHandle.currentArg);
goto execute_AnonFun9;
}
if ((actionFun == ActionOrFun._RobotTaskPlanner_AnonFun10)) {
locals = null;
myHandle.cont.PushReturnTo(0, locals, myHandle.currentEvent, myHandle.currentArg);
goto execute_AnonFun10;
}
if ((actionFun == ActionOrFun._RobotTaskPlanner_AnonFun11)) {
locals = null;
myHandle.cont.PushReturnTo(0, locals, myHandle.currentEvent, myHandle.currentArg);
goto execute_AnonFun11;
}
assert(false, "Internal error");

;


execute_ResetObstacle:
while (!doPop) {
Main.ResetObstacle(myHandle, myHandle.cont);
doPop = ProcessContinuation();

}
return;

;


execute_Seal:
while (!doPop) {
Main.Seal(myHandle, myHandle.cont);
doPop = ProcessContinuation();

}
return;

;


execute_Unseal:
while (!doPop) {
Main.Unseal(myHandle, myHandle.cont);
doPop = ProcessContinuation();

}
return;

;


execute_InitializeMotionPlanning:
while (!doPop) {
Main.InitializeMotionPlanning(myHandle, myHandle.cont);
doPop = ProcessContinuation();

}
return;

;


execute_CAT_CAGE_LOC:
while (!doPop) {
Main.CAT_CAGE_LOC(myHandle, myHandle.cont);
doPop = ProcessContinuation();

}
return;

;


execute_DOG_CAGE_LOC:
while (!doPop) {
Main.DOG_CAGE_LOC(myHandle, myHandle.cont);
doPop = ProcessContinuation();

}
return;

;


execute_MICE_CAGE_LOC:
while (!doPop) {
Main.MICE_CAGE_LOC(myHandle, myHandle.cont);
doPop = ProcessContinuation();

}
return;

;


execute_BATTERY_THRESHOLD:
while (!doPop) {
Main.BATTERY_THRESHOLD(myHandle, myHandle.cont);
doPop = ProcessContinuation();

}
return;

;


execute_DOG:
while (!doPop) {
Main.DOG(myHandle, myHandle.cont);
doPop = ProcessContinuation();

}
return;

;


execute_CAT:
while (!doPop) {
Main.CAT(myHandle, myHandle.cont);
doPop = ProcessContinuation();

}
return;

;


execute_MICE:
while (!doPop) {
Main.MICE(myHandle, myHandle.cont);
doPop = ProcessContinuation();

}
return;

;


execute_BATTERY_CHARGE_LOCATION:
while (!doPop) {
Main.BATTERY_CHARGE_LOCATION(myHandle, myHandle.cont);
doPop = ProcessContinuation();

}
return;

;


execute_ROBOT_START_STATE:
while (!doPop) {
Main.ROBOT_START_STATE(myHandle, myHandle.cont);
doPop = ProcessContinuation();

}
return;

;


execute_SIZE_OF_GRID:
while (!doPop) {
Main.SIZE_OF_GRID(myHandle, myHandle.cont);
doPop = ProcessContinuation();

}
return;

;


execute_ROBOT_SCAN_LOCATIONS:
while (!doPop) {
Main.ROBOT_SCAN_LOCATIONS(myHandle, myHandle.cont);
doPop = ProcessContinuation();

}
return;

;


execute_GetStaticGoals:
while (!doPop) {
Main.GetStaticGoals(myHandle, myHandle.cont);
doPop = ProcessContinuation();

}
return;

;


execute_GetStaticObstacles:
while (!doPop) {
Main.GetStaticObstacles(myHandle, myHandle.cont);
doPop = ProcessContinuation();

}
return;

;


execute_ignore:
while (!doPop) {
ignore(myHandle.cont);
doPop = ProcessContinuation();

}
return;

;


execute_GetNextScanLocation:
while (!doPop) {
GetNextScanLocation(myHandle.cont);
doPop = ProcessContinuation();

}
return;

;


execute_CancelCurrentExecution:
while (!doPop) {
CancelCurrentExecution(myHandle.cont);
doPop = ProcessContinuation();

}
return;

;


execute_UpdateCurrentRobotState:
while (!doPop) {
UpdateCurrentRobotState(myHandle.cont);
doPop = ProcessContinuation();

}
return;

;


execute_AnonFun0:
while (!doPop) {
AnonFun0(myHandle.cont);
doPop = ProcessContinuation();

}
return;

;


execute_AnonFun1:
while (!doPop) {
AnonFun1(myHandle.cont);
doPop = ProcessContinuation();

}
return;

;


execute_AnonFun2:
while (!doPop) {
AnonFun2(myHandle.cont);
doPop = ProcessContinuation();

}
return;

;


execute_AnonFun3:
while (!doPop) {
AnonFun3(myHandle.cont);
doPop = ProcessContinuation();

}
return;

;


execute_AnonFun4:
while (!doPop) {
AnonFun4(myHandle.cont);
doPop = ProcessContinuation();

}
return;

;


execute_AnonFun5:
while (!doPop) {
AnonFun5(myHandle.cont);
doPop = ProcessContinuation();

}
return;

;


execute_AnonFun6:
while (!doPop) {
AnonFun6(myHandle.cont);
doPop = ProcessContinuation();

}
return;

;


execute_AnonFun7:
while (!doPop) {
AnonFun7(myHandle.cont);
doPop = ProcessContinuation();

}
return;

;


execute_AnonFun8:
while (!doPop) {
AnonFun8(myHandle.cont);
doPop = ProcessContinuation();

}
return;

;


execute_AnonFun9:
while (!doPop) {
AnonFun9(myHandle.cont);
doPop = ProcessContinuation();

}
return;

;


execute_AnonFun10:
while (!doPop) {
AnonFun10(myHandle.cont);
doPop = ProcessContinuation();

}
return;

;


execute_AnonFun11:
while (!doPop) {
AnonFun11(myHandle.cont);
doPop = ProcessContinuation();

}
return;

;

}
void ignore(Continuation entryCtxt) {
PRT_VALUE_ARRAY locals;
SM_EVENT currentEvent;
PRT_VALUE currentArg;
StackFrame retTo_3;

dummy:
retTo_3 = entryCtxt.PopReturnTo();
locals = retTo_3.locals;
currentEvent = retTo_3.currentEvent;
currentArg = retTo_3.currentArg;
if ((retTo_3.pc == 0)) {
goto start;
}
assert(false, "Internal error");

start:

;
entryCtxt.Return();
return;

;

}
void GetNextScanLocation(Continuation entryCtxt) {
PRT_VALUE_ARRAY locals;
SM_EVENT currentEvent;
PRT_VALUE currentArg;
PRT_VALUE tmp_5;
PRT_VALUE tmp_6;
int tmpVar_0;
PRT_VALUE retVal_0;
bool tmpVar_1;
PRT_VALUE tmpVar_2;
PRT_VALUE tmp_7;
PRT_VALUE tmpVar_3;
PRT_VALUE tmpVal_0;
bool tmpVar_4;
PRT_VALUE tmpVar_5;
PRT_VALUE tmp_8;
PRT_VALUE tmpVar_6;
int tmpVar_7;
PRT_VALUE retVal_1;
PRT_VALUE tmpVar_8;
PRT_VALUE tmp_9;
PRT_VALUE tmpVar_9;
PRT_VALUE tmpVar_10;
PRT_VALUE tmp_10;
PRT_VALUE tmpVar_11;
PRT_VALUE tmp_11;
PRT_VALUE tmpVar_12;
StackFrame retTo_4;

dummy:
retTo_4 = entryCtxt.PopReturnTo();
locals = retTo_4.locals;
currentEvent = retTo_4.currentEvent;
currentArg = retTo_4.currentArg;
if ((retTo_4.pc == 0)) {
goto start;
}
assert(false, "Internal error");

start:
tmp_5 = PRT_VALUE.PrtMkDefaultValue(Main.type_1_PRT_TYPE);
PRT_VALUE.PrtPrimSetInt(tmp_5, 0);
locals[0] = PRT_VALUE.PrtCloneValue(tmp_5);

GetNextScanLocation_loop_start_0:
tmp_6 = PRT_VALUE.PrtMkDefaultValue(Main.type_5_PRT_TYPE);
PRT_VALUE.PrtPrimSetBool(tmp_6, true);
if (!tmp_6.bl) {
goto GetNextScanLocation_loop_end_0;
}
tmpVar_0 = PRT_VALUE.PrtSeqSizeOf(scanLocations);
retVal_0 = PRT_VALUE.PrtMkDefaultValue(Main.type_1_PRT_TYPE);
PRT_VALUE.PrtPrimSetInt(retVal_0, tmpVar_0);
tmpVar_1 = PRT_VALUE.PrtIsEqualValue(locals[0], retVal_0);
tmpVar_2 = PRT_VALUE.PrtMkDefaultValue(Main.type_5_PRT_TYPE);
PRT_VALUE.PrtPrimSetBool(tmpVar_2, tmpVar_1);
if (!tmpVar_2.bl) {
goto GetNextScanLocation_if_0_else;
}
tmp_7 = PRT_VALUE.PrtMkDefaultValue(Main.type_1_PRT_TYPE);
PRT_VALUE.PrtPrimSetInt(tmp_7, 0);
locals[0] = PRT_VALUE.PrtCloneValue(tmp_7);
goto GetNextScanLocation_if_0_end;
GetNextScanLocation_if_0_else:

;

GetNextScanLocation_if_0_end:

;
tmpVar_3 = PRT_VALUE.PrtSeqGet(scanLocations, locals[0]);
tmpVal_0 = PRT_VALUE.PrtTupleGet(currentRobotState, 0);
tmpVar_4 = PRT_VALUE.PrtIsEqualValue(tmpVar_3, tmpVal_0);
tmpVar_5 = PRT_VALUE.PrtMkDefaultValue(Main.type_5_PRT_TYPE);
PRT_VALUE.PrtPrimSetBool(tmpVar_5, tmpVar_4);
if (!tmpVar_5.bl) {
goto GetNextScanLocation_if_2_else;
}
tmp_8 = PRT_VALUE.PrtMkDefaultValue(Main.type_1_PRT_TYPE);
PRT_VALUE.PrtPrimSetInt(tmp_8, 1);
tmpVar_6 = PRT_VALUE.PrtMkDefaultValue(Main.type_1_PRT_TYPE);
PRT_VALUE.PrtPrimSetInt(tmpVar_6, (locals[0].nt + tmp_8.nt));
tmpVar_7 = PRT_VALUE.PrtSeqSizeOf(scanLocations);
retVal_1 = PRT_VALUE.PrtMkDefaultValue(Main.type_1_PRT_TYPE);
PRT_VALUE.PrtPrimSetInt(retVal_1, tmpVar_7);
tmpVar_8 = PRT_VALUE.PrtMkDefaultValue(Main.type_5_PRT_TYPE);
PRT_VALUE.PrtPrimSetBool(tmpVar_8, (tmpVar_6.nt < retVal_1.nt));
if (!tmpVar_8.bl) {
goto GetNextScanLocation_if_1_else;
}
tmp_9 = PRT_VALUE.PrtMkDefaultValue(Main.type_1_PRT_TYPE);
PRT_VALUE.PrtPrimSetInt(tmp_9, 1);
tmpVar_9 = PRT_VALUE.PrtMkDefaultValue(Main.type_1_PRT_TYPE);
PRT_VALUE.PrtPrimSetInt(tmpVar_9, (locals[0].nt + tmp_9.nt));
tmpVar_10 = PRT_VALUE.PrtSeqGet(scanLocations, tmpVar_9);
locals[1] = PRT_VALUE.PrtCloneValue(tmpVar_10);
goto GetNextScanLocation_if_1_end;
GetNextScanLocation_if_1_else:
tmp_10 = PRT_VALUE.PrtMkDefaultValue(Main.type_1_PRT_TYPE);
PRT_VALUE.PrtPrimSetInt(tmp_10, 0);
tmpVar_11 = PRT_VALUE.PrtSeqGet(scanLocations, tmp_10);
locals[1] = PRT_VALUE.PrtCloneValue(tmpVar_11);

;

GetNextScanLocation_if_1_end:

;
entryCtxt.ReturnVal(locals[1]);
return;
goto GetNextScanLocation_if_2_end;
GetNextScanLocation_if_2_else:
tmp_11 = PRT_VALUE.PrtMkDefaultValue(Main.type_1_PRT_TYPE);
PRT_VALUE.PrtPrimSetInt(tmp_11, 1);
tmpVar_12 = PRT_VALUE.PrtMkDefaultValue(Main.type_1_PRT_TYPE);
PRT_VALUE.PrtPrimSetInt(tmpVar_12, (locals[0].nt + tmp_11.nt));
locals[0] = PRT_VALUE.PrtCloneValue(tmpVar_12);

;

GetNextScanLocation_if_2_end:

;
goto GetNextScanLocation_loop_start_0;
GetNextScanLocation_loop_end_0:

;

;

;
entryCtxt.Return();
return;

;

}
void CancelCurrentExecution(Continuation entryCtxt) {
PRT_VALUE_ARRAY locals;
SM_EVENT currentEvent;
PRT_VALUE currentArg;
PRT_VALUE tmp_12;
PRT_VALUE tmpPayload_1;
StackFrame retTo_5;

dummy:
retTo_5 = entryCtxt.PopReturnTo();
locals = retTo_5.locals;
currentEvent = retTo_5.currentEvent;
currentArg = retTo_5.currentArg;
if ((retTo_5.pc == 0)) {
goto start;
}
if ((retTo_5.pc == 1)) {
goto CancelCurrentExecution_0;
}
assert(false, "Internal error");

start:
tmp_12 = PRT_VALUE.PrtMkDefaultValue(Main.type_12_PRT_TYPE);
PRT_VALUE.PrtPrimSetEvent(tmp_12, Main.CancelPlan_SM_EVENT);
assert((motionPlanEx.mach != null), "Target of send must be non-null");
tmpPayload_1 = PRT_VALUE.PrtMkDefaultValue(Main.type_0_PRT_TYPE);
Main.InvokeMachine_Prop_1(tmp_12.ev, tmpPayload_1);
Main.InvokeMachine_Prop_2(tmp_12.ev, tmpPayload_1);
Main.InvokeMachine_Prop_6(tmp_12.ev, tmpPayload_1);
Main.InvokeMachine_Prop_7(tmp_12.ev, tmpPayload_1);
Main.InvokeMachine_Prop_8(tmp_12.ev, tmpPayload_1);
Main.InvokeMachine_Prop_9(tmp_12.ev, tmpPayload_1);
Main.InvokeMachine_Prop_3(tmp_12.ev, tmpPayload_1);
Main.InvokeMachine_Prop_10a(tmp_12.ev, tmpPayload_1);
Main.InvokeMachine_Prop_10b(tmp_12.ev, tmpPayload_1);
Main.InvokeMachine_Prop_10c(tmp_12.ev, tmpPayload_1);
motionPlanEx.mach.EnqueueEvent(tmp_12.ev, tmpPayload_1, myHandle);
entryCtxt.Send(1, locals, currentEvent, currentArg);
return;

CancelCurrentExecution_0:

;

;
entryCtxt.Return();
return;

;

}
void UpdateCurrentRobotState(Continuation entryCtxt) {
PRT_VALUE_ARRAY locals;
SM_EVENT currentEvent;
PRT_VALUE currentArg;
PRT_VALUE tmp_13;
PRT_VALUE tmpPayload_2;
StackFrame retTo_6;

dummy:
retTo_6 = entryCtxt.PopReturnTo();
locals = retTo_6.locals;
currentEvent = retTo_6.currentEvent;
currentArg = retTo_6.currentArg;
if ((retTo_6.pc == 0)) {
goto start;
}
if ((retTo_6.pc == 1)) {
goto UpdateCurrentRobotState_0;
}
if ((retTo_6.pc == 2)) {
goto UpdateCurrentRobotState_1;
}
if ((retTo_6.pc == 3)) {
goto UpdateCurrentRobotState_2;
}
if ((retTo_6.pc == 4)) {
goto UpdateCurrentRobotState_3;
}
assert(false, "Internal error");

start:
tmp_13 = PRT_VALUE.PrtMkDefaultValue(Main.type_12_PRT_TYPE);
PRT_VALUE.PrtPrimSetEvent(tmp_13, Main.GetRobotState_SM_EVENT);
assert((senseInfer.mach != null), "Target of send must be non-null");
tmpPayload_2 = PRT_VALUE.PrtMkDefaultValue(Main.type_0_PRT_TYPE);
Main.InvokeMachine_Prop_1(tmp_13.ev, tmpPayload_2);
Main.InvokeMachine_Prop_2(tmp_13.ev, tmpPayload_2);
Main.InvokeMachine_Prop_6(tmp_13.ev, tmpPayload_2);
Main.InvokeMachine_Prop_7(tmp_13.ev, tmpPayload_2);
Main.InvokeMachine_Prop_8(tmp_13.ev, tmpPayload_2);
Main.InvokeMachine_Prop_9(tmp_13.ev, tmpPayload_2);
Main.InvokeMachine_Prop_3(tmp_13.ev, tmpPayload_2);
Main.InvokeMachine_Prop_10a(tmp_13.ev, tmpPayload_2);
Main.InvokeMachine_Prop_10b(tmp_13.ev, tmpPayload_2);
Main.InvokeMachine_Prop_10c(tmp_13.ev, tmpPayload_2);
senseInfer.mach.EnqueueEvent(tmp_13.ev, tmpPayload_2, myHandle);
entryCtxt.Send(1, locals, currentEvent, currentArg);
return;

UpdateCurrentRobotState_0:

;
myHandle.receiveSet = (myHandle.receiveSet + Main.CurrentState_SM_EVENT);
entryCtxt.Receive(2, locals, currentEvent, currentArg);
return;

UpdateCurrentRobotState_1:

;
if ((myHandle.currentEvent == Main.CurrentState_SM_EVENT)) {
entryCtxt.PushReturnTo(0, locals, myHandle.currentEvent, myHandle.currentArg);
goto UpdateCurrentRobotState_3;
}
assert(false);

UpdateCurrentRobotState_3:
AnonFun7(entryCtxt);

;
if ((entryCtxt.reason == ContinuationReason.Return)) {
goto UpdateCurrentRobotState_2;
} else {
entryCtxt.PushReturnTo(4, locals, currentEvent, currentArg);
return;

}

UpdateCurrentRobotState_2:

;

;
entryCtxt.Return();
return;

;

}
void AnonFun0(Continuation entryCtxt) {
PRT_VALUE_ARRAY locals;
SM_EVENT currentEvent;
PRT_VALUE currentArg;
StackFrame retTo_7;

dummy:
retTo_7 = entryCtxt.PopReturnTo();
locals = retTo_7.locals;
currentEvent = retTo_7.currentEvent;
currentArg = retTo_7.currentArg;
if ((retTo_7.pc == 0)) {
goto start;
}
assert(false, "Internal error");

start:

;
entryCtxt.Return();
return;

;

}
void AnonFun1(Continuation entryCtxt) {
PRT_VALUE_ARRAY locals;
SM_EVENT currentEvent;
PRT_VALUE currentArg;
PRT_VALUE tmpVar_13;
PRT_VALUE tmpVal_1;
PRT_VALUE tmpVar_14;
PRT_VALUE tmpVal_2;
PRT_VALUE_ARRAY argCloneVar_1;
PRT_VALUE tmp_14;
PRT_VALUE tmp_15;
PRT_VALUE tmp_16;
PRT_VALUE tmpTuple_2;
PRT_VALUE_ARRAY argCloneVar_2;
PRT_VALUE tmp_17;
PRT_VALUE tmpPayload_3;
StackFrame retTo_8;

dummy:
retTo_8 = entryCtxt.PopReturnTo();
locals = retTo_8.locals;
currentEvent = retTo_8.currentEvent;
currentArg = retTo_8.currentArg;
if ((retTo_8.pc == 0)) {
goto start;
}
if ((retTo_8.pc == 1)) {
goto AnonFun1_4;
}
if ((retTo_8.pc == 2)) {
goto AnonFun1_5;
}
assert(false, "Internal error");

start:
tmpVar_13 = PRT_VALUE.PrtCastValue(currentArg, Main.type_11_PRT_TYPE);
tmpVal_1 = PRT_VALUE.PrtTupleGet(tmpVar_13, 0);
envMachine = PRT_VALUE.PrtCloneValue(tmpVal_1);
tmpVar_14 = PRT_VALUE.PrtCastValue(currentArg, Main.type_11_PRT_TYPE);
tmpVal_2 = PRT_VALUE.PrtTupleGet(tmpVar_14, 1);
robotStMng = PRT_VALUE.PrtCloneValue(tmpVal_2);
argCloneVar_1 = null;
entryCtxt.PushReturnTo(0, argCloneVar_1, currentEvent, currentArg);

AnonFun1_4:
Main.ROBOT_START_STATE(myHandle, entryCtxt);

;
if ((entryCtxt.reason == ContinuationReason.Return)) {
currentRobotState = PRT_VALUE.PrtCloneValue(entryCtxt.retVal);

} else {
entryCtxt.PushReturnTo(1, locals, currentEvent, currentArg);
return;

}
tmp_14 = PRT_VALUE.PrtMkDefaultValue(Main.type_5_PRT_TYPE);
PRT_VALUE.PrtPrimSetBool(tmp_14, false);
tmp_15 = PRT_VALUE.PrtMkDefaultValue(Main.type_5_PRT_TYPE);
PRT_VALUE.PrtPrimSetBool(tmp_15, false);
tmp_16 = PRT_VALUE.PrtMkDefaultValue(Main.type_5_PRT_TYPE);
PRT_VALUE.PrtPrimSetBool(tmp_16, false);
tmpTuple_2 = PRT_VALUE.PrtMkDefaultValue(Main.type_13_PRT_TYPE);
PRT_VALUE.PrtTupleSet(tmpTuple_2, 0, tmp_14);
PRT_VALUE.PrtTupleSet(tmpTuple_2, 1, tmp_15);
PRT_VALUE.PrtTupleSet(tmpTuple_2, 2, tmp_16);
herdingState = PRT_VALUE.PrtCloneValue(tmpTuple_2);
argCloneVar_2 = new PRT_VALUE_ARRAY[3];
argCloneVar_2[2] = PRT_VALUE.PrtMkDefaultValue(Main.type_2_PRT_TYPE);
argCloneVar_2[1] = PRT_VALUE.PrtMkDefaultValue(Main.type_2_PRT_TYPE);
argCloneVar_2[0] = PRT_VALUE.PrtMkDefaultValue(Main.type_1_PRT_TYPE);
entryCtxt.PushReturnTo(0, argCloneVar_2, currentEvent, currentArg);

AnonFun1_5:
Main.ROBOT_SCAN_LOCATIONS(myHandle, entryCtxt);

;
if ((entryCtxt.reason == ContinuationReason.Return)) {
scanLocations = PRT_VALUE.PrtCloneValue(entryCtxt.retVal);

} else {
entryCtxt.PushReturnTo(2, locals, currentEvent, currentArg);
return;

}
tmp_17 = PRT_VALUE.PrtMkDefaultValue(Main.type_12_PRT_TYPE);
PRT_VALUE.PrtPrimSetEvent(tmp_17, Main.local_SM_EVENT);
tmpPayload_3 = PRT_VALUE.PrtMkDefaultValue(Main.type_0_PRT_TYPE);
assert((tmp_17.ev != null), "(103, 4): Raised event must be non-null");
trace("<RaiseLog> Machine RobotTaskPlanner-{0} raised Event {1}\n", myHandle.instance, tmp_17.ev.name);
myHandle.currentEvent = tmp_17.ev;
myHandle.currentArg = tmpPayload_3;
entryCtxt.Raise();
return;

;
entryCtxt.Return();
return;

;

}
void AnonFun2(Continuation entryCtxt) {
PRT_VALUE_ARRAY locals;
SM_EVENT currentEvent;
PRT_VALUE currentArg;
PRT_VALUE tmp_18;
PRT_VALUE tmpTuple_3;
PRT_VALUE tmpSendPayload_13;
SM_HANDLE newMachine_3;
PRT_VALUE tmp_19;
PRT_VALUE tmp_20;
PRT_VALUE tmpSendPayload_14;
SM_HANDLE newMachine_4;
PRT_VALUE tmp_21;
PRT_VALUE tmp_22;
PRT_VALUE tmpVal_3;
PRT_VALUE tmpTuple_4;
PRT_VALUE tmpSendPayload_15;
SM_HANDLE newMachine_5;
PRT_VALUE tmp_23;
PRT_VALUE tmp_24;
PRT_VALUE tmpPayload_4;
StackFrame retTo_9;

dummy:
retTo_9 = entryCtxt.PopReturnTo();
locals = retTo_9.locals;
currentEvent = retTo_9.currentEvent;
currentArg = retTo_9.currentArg;
if ((retTo_9.pc == 0)) {
goto start;
}
if ((retTo_9.pc == 1)) {
goto AnonFun2_0;
}
if ((retTo_9.pc == 2)) {
goto AnonFun2_1;
}
if ((retTo_9.pc == 3)) {
goto AnonFun2_2;
}
assert(false, "Internal error");

start:
tmp_18 = PRT_VALUE.PrtMkDefaultValue(Main.type_8_PRT_TYPE);
PRT_VALUE.PrtPrimSetMachine(tmp_18, myHandle);
tmpTuple_3 = PRT_VALUE.PrtMkDefaultValue(Main.type_11_PRT_TYPE);
PRT_VALUE.PrtTupleSet(tmpTuple_3, 0, tmp_18);
PRT_VALUE.PrtTupleSet(tmpTuple_3, 1, robotStMng);
tmpSendPayload_13 = PRT_VALUE.PrtCloneValue(tmpTuple_3);
newMachine_3 = Main.CreateMachine_SenseAndInfer(tmpSendPayload_13);
entryCtxt.NewMachine(1, locals, currentEvent, currentArg, newMachine_3);
return;

AnonFun2_0:
newMachine_3 = entryCtxt.id;

;
entryCtxt.id = null;
tmp_19 = PRT_VALUE.PrtMkDefaultValue(Main.type_8_PRT_TYPE);
PRT_VALUE.PrtPrimSetMachine(tmp_19, newMachine_3);
senseInfer = PRT_VALUE.PrtCloneValue(tmp_19);
tmp_20 = PRT_VALUE.PrtMkDefaultValue(Main.type_8_PRT_TYPE);
PRT_VALUE.PrtPrimSetMachine(tmp_20, myHandle);
tmpSendPayload_14 = PRT_VALUE.PrtCloneValue(tmp_20);
newMachine_4 = Main.CreateMachine_MotionPlanner(tmpSendPayload_14);
entryCtxt.NewMachine(2, locals, currentEvent, currentArg, newMachine_4);
return;

AnonFun2_1:
newMachine_4 = entryCtxt.id;

;
entryCtxt.id = null;
tmp_21 = PRT_VALUE.PrtMkDefaultValue(Main.type_8_PRT_TYPE);
PRT_VALUE.PrtPrimSetMachine(tmp_21, newMachine_4);
motionPlanner = PRT_VALUE.PrtCloneValue(tmp_21);
tmp_22 = PRT_VALUE.PrtMkDefaultValue(Main.type_8_PRT_TYPE);
PRT_VALUE.PrtPrimSetMachine(tmp_22, myHandle);
tmpVal_3 = PRT_VALUE.PrtTupleGet(currentRobotState, 0);
tmpTuple_4 = PRT_VALUE.PrtMkDefaultValue(Main.type_14_PRT_TYPE);
PRT_VALUE.PrtTupleSet(tmpTuple_4, 0, tmp_22);
PRT_VALUE.PrtTupleSet(tmpTuple_4, 1, robotStMng);
PRT_VALUE.PrtTupleSet(tmpTuple_4, 2, tmpVal_3);
tmpSendPayload_15 = PRT_VALUE.PrtCloneValue(tmpTuple_4);
newMachine_5 = Main.CreateMachine_MotionPlanExecutor(tmpSendPayload_15);
entryCtxt.NewMachine(3, locals, currentEvent, currentArg, newMachine_5);
return;

AnonFun2_2:
newMachine_5 = entryCtxt.id;

;
entryCtxt.id = null;
tmp_23 = PRT_VALUE.PrtMkDefaultValue(Main.type_8_PRT_TYPE);
PRT_VALUE.PrtPrimSetMachine(tmp_23, newMachine_5);
motionPlanEx = PRT_VALUE.PrtCloneValue(tmp_23);
tmp_24 = PRT_VALUE.PrtMkDefaultValue(Main.type_12_PRT_TYPE);
PRT_VALUE.PrtPrimSetEvent(tmp_24, Main.local_SM_EVENT);
tmpPayload_4 = PRT_VALUE.PrtMkDefaultValue(Main.type_0_PRT_TYPE);
assert((tmp_24.ev != null), "(115, 4): Raised event must be non-null");
trace("<RaiseLog> Machine RobotTaskPlanner-{0} raised Event {1}\n", myHandle.instance, tmp_24.ev.name);
myHandle.currentEvent = tmp_24.ev;
myHandle.currentArg = tmpPayload_4;
entryCtxt.Raise();
return;

;
entryCtxt.Return();
return;

;

}
void AnonFun3(Continuation entryCtxt) {
PRT_VALUE_ARRAY locals;
SM_EVENT currentEvent;
PRT_VALUE currentArg;
PRT_VALUE_ARRAY argCloneVar_3;
PRT_VALUE_ARRAY argCloneVar_4;
PRT_VALUE tmp_25;
PRT_VALUE tmpVal_4;
PRT_VALUE tmpTuple_5;
PRT_VALUE tmpPayload_5;
StackFrame retTo_10;

dummy:
retTo_10 = entryCtxt.PopReturnTo();
locals = retTo_10.locals;
currentEvent = retTo_10.currentEvent;
currentArg = retTo_10.currentArg;
if ((retTo_10.pc == 0)) {
goto start;
}
if ((retTo_10.pc == 1)) {
goto AnonFun3_0;
}
if ((retTo_10.pc == 2)) {
goto AnonFun3_1;
}
if ((retTo_10.pc == 3)) {
goto AnonFun3_2;
}
assert(false, "Internal error");

start:
argCloneVar_3 = null;
entryCtxt.PushReturnTo(0, argCloneVar_3, currentEvent, currentArg);

AnonFun3_0:
UpdateCurrentRobotState(entryCtxt);

;
if ((entryCtxt.reason == ContinuationReason.Return)) {

} else {
entryCtxt.PushReturnTo(1, locals, currentEvent, currentArg);
return;

}
argCloneVar_4 = new PRT_VALUE_ARRAY[2];
argCloneVar_4[1] = PRT_VALUE.PrtMkDefaultValue(Main.type_1_PRT_TYPE);
argCloneVar_4[0] = PRT_VALUE.PrtMkDefaultValue(Main.type_1_PRT_TYPE);
entryCtxt.PushReturnTo(0, argCloneVar_4, currentEvent, currentArg);

AnonFun3_1:
GetNextScanLocation(entryCtxt);

;
if ((entryCtxt.reason == ContinuationReason.Return)) {
nextLocation = PRT_VALUE.PrtCloneValue(entryCtxt.retVal);

} else {
entryCtxt.PushReturnTo(2, locals, currentEvent, currentArg);
return;

}
tmp_25 = PRT_VALUE.PrtMkDefaultValue(Main.type_12_PRT_TYPE);
PRT_VALUE.PrtPrimSetEvent(tmp_25, Main.GeneratePlanFor_SM_EVENT);
tmpVal_4 = PRT_VALUE.PrtTupleGet(currentRobotState, 0);
tmpTuple_5 = PRT_VALUE.PrtMkDefaultValue(Main.type_15_PRT_TYPE);
PRT_VALUE.PrtTupleSet(tmpTuple_5, 0, tmpVal_4);
PRT_VALUE.PrtTupleSet(tmpTuple_5, 1, nextLocation);
assert((motionPlanner.mach != null), "Target of send must be non-null");
tmpPayload_5 = PRT_VALUE.PrtCloneValue(tmpTuple_5);
Main.InvokeMachine_Prop_1(tmp_25.ev, tmpPayload_5);
Main.InvokeMachine_Prop_2(tmp_25.ev, tmpPayload_5);
Main.InvokeMachine_Prop_6(tmp_25.ev, tmpPayload_5);
Main.InvokeMachine_Prop_7(tmp_25.ev, tmpPayload_5);
Main.InvokeMachine_Prop_8(tmp_25.ev, tmpPayload_5);
Main.InvokeMachine_Prop_9(tmp_25.ev, tmpPayload_5);
Main.InvokeMachine_Prop_3(tmp_25.ev, tmpPayload_5);
Main.InvokeMachine_Prop_10a(tmp_25.ev, tmpPayload_5);
Main.InvokeMachine_Prop_10b(tmp_25.ev, tmpPayload_5);
Main.InvokeMachine_Prop_10c(tmp_25.ev, tmpPayload_5);
motionPlanner.mach.EnqueueEvent(tmp_25.ev, tmpPayload_5, myHandle);
entryCtxt.Send(3, locals, currentEvent, currentArg);
return;

AnonFun3_2:

;

;
entryCtxt.Return();
return;

;

}
void AnonFun4(Continuation entryCtxt) {
PRT_VALUE_ARRAY locals;
SM_EVENT currentEvent;
PRT_VALUE currentArg;
PRT_VALUE tmp_26;
StackFrame retTo_11;

dummy:
retTo_11 = entryCtxt.PopReturnTo();
locals = retTo_11.locals;
currentEvent = retTo_11.currentEvent;
currentArg = retTo_11.currentArg;
if ((retTo_11.pc == 0)) {
goto start;
}
assert(false, "Internal error");

start:
tmp_26 = PRT_VALUE.PrtMkDefaultValue(Main.type_5_PRT_TYPE);
PRT_VALUE.PrtPrimSetBool(tmp_26, false);
assert(tmp_26.bl, "(159, 52): Assert failed");

;
entryCtxt.Return();
return;

;

}
void AnonFun5(Continuation entryCtxt) {
PRT_VALUE_ARRAY locals;
SM_EVENT currentEvent;
PRT_VALUE currentArg;
PRT_VALUE tmpVal_5;
PRT_VALUE_ARRAY argCloneVar_5;
PRT_VALUE tmpVal_6;
PRT_VALUE_ARRAY argCloneVar_6;
PRT_VALUE_ARRAY argCloneVar_7;
PRT_VALUE tmpVal_7;
PRT_VALUE_ARRAY argCloneVar_8;
PRT_VALUE tmpVal_8;
PRT_VALUE tmpVal_9;
bool tmpVar_15;
PRT_VALUE tmpVar_16;
PRT_VALUE tmpVal_10;
bool tmpVar_17;
PRT_VALUE tmpVar_18;
PRT_VALUE tmpVar_19;
PRT_VALUE tmp_27;
PRT_VALUE tmpPayload_6;
PRT_VALUE tmp_28;
PRT_VALUE tmpVal_11;
PRT_VALUE tmpTuple_6;
PRT_VALUE tmpPayload_7;
StackFrame retTo_12;

dummy:
retTo_12 = entryCtxt.PopReturnTo();
locals = retTo_12.locals;
currentEvent = retTo_12.currentEvent;
currentArg = retTo_12.currentArg;
if ((retTo_12.pc == 0)) {
goto start;
}
if ((retTo_12.pc == 1)) {
goto AnonFun5_0;
}
if ((retTo_12.pc == 2)) {
goto AnonFun5_1;
}
if ((retTo_12.pc == 3)) {
goto AnonFun5_2;
}
if ((retTo_12.pc == 4)) {
goto AnonFun5_3;
}
if ((retTo_12.pc == 5)) {
goto AnonFun5_4;
}
assert(false, "Internal error");

start:
tmpVal_5 = PRT_VALUE.PrtTupleGet(currentRobotState, 0);
argCloneVar_5 = new PRT_VALUE_ARRAY[1];
argCloneVar_5[0] = PRT_VALUE.PrtCloneValue(tmpVal_5);
PRT_VALUE.Print(argCloneVar_5[0]);
trace("\n");
entryCtxt.PushReturnTo(0, argCloneVar_5, currentEvent, currentArg);

AnonFun5_0:
Main.PRINT(myHandle, entryCtxt);

;
if ((entryCtxt.reason == ContinuationReason.Return)) {

} else {
entryCtxt.PushReturnTo(1, locals, currentEvent, currentArg);
return;

}
tmpVal_6 = PRT_VALUE.PrtTupleGet(currentArg, 0);
argCloneVar_6 = new PRT_VALUE_ARRAY[1];
argCloneVar_6[0] = PRT_VALUE.PrtCloneValue(tmpVal_6);
PRT_VALUE.Print(argCloneVar_6[0]);
trace("\n");
entryCtxt.PushReturnTo(0, argCloneVar_6, currentEvent, currentArg);

AnonFun5_1:
Main.PRINT(myHandle, entryCtxt);

;
if ((entryCtxt.reason == ContinuationReason.Return)) {

} else {
entryCtxt.PushReturnTo(2, locals, currentEvent, currentArg);
return;

}
argCloneVar_7 = new PRT_VALUE_ARRAY[1];
argCloneVar_7[0] = PRT_VALUE.PrtCloneValue(nextLocation);
PRT_VALUE.Print(argCloneVar_7[0]);
trace("\n");
entryCtxt.PushReturnTo(0, argCloneVar_7, currentEvent, currentArg);

AnonFun5_2:
Main.PRINT(myHandle, entryCtxt);

;
if ((entryCtxt.reason == ContinuationReason.Return)) {

} else {
entryCtxt.PushReturnTo(3, locals, currentEvent, currentArg);
return;

}
tmpVal_7 = PRT_VALUE.PrtTupleGet(currentArg, 2);
argCloneVar_8 = new PRT_VALUE_ARRAY[1];
argCloneVar_8[0] = PRT_VALUE.PrtCloneValue(tmpVal_7);
PRT_VALUE.Print(argCloneVar_8[0]);
trace("\n");
entryCtxt.PushReturnTo(0, argCloneVar_8, currentEvent, currentArg);

AnonFun5_3:
Main.PRINT(myHandle, entryCtxt);

;
if ((entryCtxt.reason == ContinuationReason.Return)) {

} else {
entryCtxt.PushReturnTo(4, locals, currentEvent, currentArg);
return;

}
tmpVal_8 = PRT_VALUE.PrtTupleGet(currentArg, 0);
tmpVal_9 = PRT_VALUE.PrtTupleGet(currentRobotState, 0);
tmpVar_15 = PRT_VALUE.PrtIsEqualValue(tmpVal_8, tmpVal_9);
tmpVar_16 = PRT_VALUE.PrtMkDefaultValue(Main.type_5_PRT_TYPE);
PRT_VALUE.PrtPrimSetBool(tmpVar_16, !tmpVar_15);
if (tmpVar_16.bl) {

} else {
tmpVal_10 = PRT_VALUE.PrtTupleGet(currentArg, 1);
tmpVar_17 = PRT_VALUE.PrtIsEqualValue(tmpVal_10, nextLocation);
tmpVar_18 = PRT_VALUE.PrtMkDefaultValue(Main.type_5_PRT_TYPE);
PRT_VALUE.PrtPrimSetBool(tmpVar_18, !tmpVar_17);

}
tmpVar_19 = PRT_VALUE.PrtMkDefaultValue(Main.type_5_PRT_TYPE);
PRT_VALUE.PrtPrimSetBool(tmpVar_19, (tmpVar_16.bl || tmpVar_18.bl));
if (!tmpVar_19.bl) {
goto AnonFun5_if_0_else;
}
tmp_27 = PRT_VALUE.PrtMkDefaultValue(Main.type_12_PRT_TYPE);
PRT_VALUE.PrtPrimSetEvent(tmp_27, Main.ReDo_SM_EVENT);
tmpPayload_6 = PRT_VALUE.PrtMkDefaultValue(Main.type_0_PRT_TYPE);
assert((tmp_27.ev != null), "(181, 5): Raised event must be non-null");
trace("<RaiseLog> Machine RobotTaskPlanner-{0} raised Event {1}\n", myHandle.instance, tmp_27.ev.name);
myHandle.currentEvent = tmp_27.ev;
myHandle.currentArg = tmpPayload_6;
entryCtxt.Raise();
return;
goto AnonFun5_if_0_end;
AnonFun5_if_0_else:
tmp_28 = PRT_VALUE.PrtMkDefaultValue(Main.type_12_PRT_TYPE);
PRT_VALUE.PrtPrimSetEvent(tmp_28, Main.ExecutePlan_SM_EVENT);
tmpVal_11 = PRT_VALUE.PrtTupleGet(currentArg, 2);
tmpTuple_6 = PRT_VALUE.PrtMkDefaultValue(Main.type_16_PRT_TYPE);
PRT_VALUE.PrtTupleSet(tmpTuple_6, 0, tmpVal_11);
assert((motionPlanEx.mach != null), "Target of send must be non-null");
tmpPayload_7 = PRT_VALUE.PrtCloneValue(tmpTuple_6);
Main.InvokeMachine_Prop_1(tmp_28.ev, tmpPayload_7);
Main.InvokeMachine_Prop_2(tmp_28.ev, tmpPayload_7);
Main.InvokeMachine_Prop_6(tmp_28.ev, tmpPayload_7);
Main.InvokeMachine_Prop_7(tmp_28.ev, tmpPayload_7);
Main.InvokeMachine_Prop_8(tmp_28.ev, tmpPayload_7);
Main.InvokeMachine_Prop_9(tmp_28.ev, tmpPayload_7);
Main.InvokeMachine_Prop_3(tmp_28.ev, tmpPayload_7);
Main.InvokeMachine_Prop_10a(tmp_28.ev, tmpPayload_7);
Main.InvokeMachine_Prop_10b(tmp_28.ev, tmpPayload_7);
Main.InvokeMachine_Prop_10c(tmp_28.ev, tmpPayload_7);
motionPlanEx.mach.EnqueueEvent(tmp_28.ev, tmpPayload_7, myHandle);
entryCtxt.Send(5, locals, currentEvent, currentArg);
return;

AnonFun5_4:

;

;

AnonFun5_if_0_end:

;

;
entryCtxt.Return();
return;

;

}
void AnonFun6(Continuation entryCtxt) {
PRT_VALUE_ARRAY locals;
SM_EVENT currentEvent;
PRT_VALUE currentArg;
PRT_VALUE tmp_29;
PRT_VALUE tmpPayload_8;
StackFrame retTo_13;

dummy:
retTo_13 = entryCtxt.PopReturnTo();
locals = retTo_13.locals;
currentEvent = retTo_13.currentEvent;
currentArg = retTo_13.currentArg;
if ((retTo_13.pc == 0)) {
goto start;
}
assert(false, "Internal error");

start:
PRT_VALUE.PrtTupleSet(currentRobotState, 0, currentArg);
tmp_29 = PRT_VALUE.PrtMkDefaultValue(Main.type_12_PRT_TYPE);
PRT_VALUE.PrtPrimSetEvent(tmp_29, Main.success_SM_EVENT);
tmpPayload_8 = PRT_VALUE.PrtMkDefaultValue(Main.type_0_PRT_TYPE);
assert((tmp_29.ev != null), "(191, 4): Raised event must be non-null");
trace("<RaiseLog> Machine RobotTaskPlanner-{0} raised Event {1}\n", myHandle.instance, tmp_29.ev.name);
myHandle.currentEvent = tmp_29.ev;
myHandle.currentArg = tmpPayload_8;
entryCtxt.Raise();
return;

;
entryCtxt.Return();
return;

;

}
void AnonFun7(Continuation entryCtxt) {
PRT_VALUE_ARRAY locals;
SM_EVENT currentEvent;
PRT_VALUE currentArg;
PRT_VALUE tmpVal_12;
StackFrame retTo_14;

dummy:
retTo_14 = entryCtxt.PopReturnTo();
locals = retTo_14.locals;
currentEvent = retTo_14.currentEvent;
currentArg = retTo_14.currentArg;
if ((retTo_14.pc == 0)) {
goto start;
}
assert(false, "Internal error");

start:
tmpVal_12 = PRT_VALUE.PrtTupleGet(currentArg, 0);
currentRobotState = PRT_VALUE.PrtCloneValue(tmpVal_12);

;
entryCtxt.Return();
return;

;

}
void AnonFun8(Continuation entryCtxt) {
PRT_VALUE_ARRAY locals;
SM_EVENT currentEvent;
PRT_VALUE currentArg;
PRT_VALUE_ARRAY argCloneVar_9;
PRT_VALUE_ARRAY argCloneVar_10;
PRT_VALUE tmp_30;
PRT_VALUE tmpVal_13;
PRT_VALUE tmpTuple_7;
PRT_VALUE tmpPayload_9;
StackFrame retTo_15;

dummy:
retTo_15 = entryCtxt.PopReturnTo();
locals = retTo_15.locals;
currentEvent = retTo_15.currentEvent;
currentArg = retTo_15.currentArg;
if ((retTo_15.pc == 0)) {
goto start;
}
if ((retTo_15.pc == 1)) {
goto AnonFun8_0;
}
if ((retTo_15.pc == 2)) {
goto AnonFun8_1;
}
if ((retTo_15.pc == 3)) {
goto AnonFun8_2;
}
assert(false, "Internal error");

start:
argCloneVar_9 = null;
entryCtxt.PushReturnTo(0, argCloneVar_9, currentEvent, currentArg);

AnonFun8_0:
UpdateCurrentRobotState(entryCtxt);

;
if ((entryCtxt.reason == ContinuationReason.Return)) {

} else {
entryCtxt.PushReturnTo(1, locals, currentEvent, currentArg);
return;

}
argCloneVar_10 = null;
entryCtxt.PushReturnTo(0, argCloneVar_10, currentEvent, currentArg);

AnonFun8_1:
Main.BATTERY_CHARGE_LOCATION(myHandle, entryCtxt);

;
if ((entryCtxt.reason == ContinuationReason.Return)) {
nextLocation = PRT_VALUE.PrtCloneValue(entryCtxt.retVal);

} else {
entryCtxt.PushReturnTo(2, locals, currentEvent, currentArg);
return;

}
tmp_30 = PRT_VALUE.PrtMkDefaultValue(Main.type_12_PRT_TYPE);
PRT_VALUE.PrtPrimSetEvent(tmp_30, Main.GeneratePlanFor_SM_EVENT);
tmpVal_13 = PRT_VALUE.PrtTupleGet(currentRobotState, 0);
tmpTuple_7 = PRT_VALUE.PrtMkDefaultValue(Main.type_15_PRT_TYPE);
PRT_VALUE.PrtTupleSet(tmpTuple_7, 0, tmpVal_13);
PRT_VALUE.PrtTupleSet(tmpTuple_7, 1, nextLocation);
assert((motionPlanner.mach != null), "Target of send must be non-null");
tmpPayload_9 = PRT_VALUE.PrtCloneValue(tmpTuple_7);
Main.InvokeMachine_Prop_1(tmp_30.ev, tmpPayload_9);
Main.InvokeMachine_Prop_2(tmp_30.ev, tmpPayload_9);
Main.InvokeMachine_Prop_6(tmp_30.ev, tmpPayload_9);
Main.InvokeMachine_Prop_7(tmp_30.ev, tmpPayload_9);
Main.InvokeMachine_Prop_8(tmp_30.ev, tmpPayload_9);
Main.InvokeMachine_Prop_9(tmp_30.ev, tmpPayload_9);
Main.InvokeMachine_Prop_3(tmp_30.ev, tmpPayload_9);
Main.InvokeMachine_Prop_10a(tmp_30.ev, tmpPayload_9);
Main.InvokeMachine_Prop_10b(tmp_30.ev, tmpPayload_9);
Main.InvokeMachine_Prop_10c(tmp_30.ev, tmpPayload_9);
motionPlanner.mach.EnqueueEvent(tmp_30.ev, tmpPayload_9, myHandle);
entryCtxt.Send(3, locals, currentEvent, currentArg);
return;

AnonFun8_2:

;

;
entryCtxt.Return();
return;

;

}
void AnonFun9(Continuation entryCtxt) {
PRT_VALUE_ARRAY locals;
SM_EVENT currentEvent;
PRT_VALUE currentArg;
PRT_VALUE_ARRAY argCloneVar_11;
PRT_VALUE tmpVal_14;
PRT_VALUE tmpVal_15;
bool tmpVar_20;
PRT_VALUE tmpVar_21;
PRT_VALUE tmpVal_16;
PRT_VALUE tmpVar_22;
PRT_VALUE tmpVal_17;
PRT_VALUE tmpVal_18;
PRT_VALUE tmpVar_23;
PRT_VALUE tmpVal_19;
PRT_VALUE tmpVar_24;
PRT_VALUE tmpVal_20;
PRT_VALUE tmpVal_21;
PRT_VALUE tmpVar_25;
PRT_VALUE tmpVar_26;
PRT_VALUE tmp_31;
PRT_VALUE tmpSendPayload_16;
PRT_VALUE tmp_32;
PRT_VALUE tmpSendPayload_17;
PRT_VALUE tmpVal_22;
PRT_VALUE_ARRAY argCloneVar_12;
PRT_VALUE tmp_33;
PRT_VALUE tmpVal_23;
PRT_VALUE tmpVal_24;
PRT_VALUE tmpVar_27;
PRT_VALUE tmpVar_28;
PRT_VALUE tmp_34;
PRT_VALUE tmpSendPayload_18;
PRT_VALUE tmp_35;
PRT_VALUE tmpSendPayload_19;
PRT_VALUE tmpVal_25;
PRT_VALUE_ARRAY argCloneVar_13;
PRT_VALUE tmp_36;
PRT_VALUE tmpVal_26;
PRT_VALUE tmpVal_27;
PRT_VALUE tmpVar_29;
PRT_VALUE tmpVar_30;
PRT_VALUE tmpVal_28;
PRT_VALUE tmpVar_31;
PRT_VALUE tmpVar_32;
PRT_VALUE tmp_37;
PRT_VALUE tmpSendPayload_20;
PRT_VALUE tmp_38;
PRT_VALUE tmpSendPayload_21;
PRT_VALUE tmp_39;
PRT_VALUE tmp_40;
PRT_VALUE tmpPayload_10;
PRT_VALUE tmpVal_29;
PRT_VALUE tmp_41;
PRT_VALUE tmpSendPayload_22;
PRT_VALUE tmp_42;
PRT_VALUE tmpSendPayload_23;
PRT_VALUE tmp_43;
PRT_VALUE tmpVal_30;
PRT_VALUE tmp_44;
PRT_VALUE tmpSendPayload_24;
PRT_VALUE tmp_45;
PRT_VALUE tmpSendPayload_25;
PRT_VALUE_ARRAY argCloneVar_14;
PRT_VALUE tmp_46;
PRT_VALUE tmp_47;
PRT_VALUE tmpVal_31;
PRT_VALUE tmp_48;
PRT_VALUE tmpSendPayload_26;
PRT_VALUE tmp_49;
PRT_VALUE tmpSendPayload_27;
PRT_VALUE tmp_50;
PRT_VALUE tmp_51;
PRT_VALUE tmpVal_32;
PRT_VALUE tmp_52;
PRT_VALUE tmpSendPayload_28;
PRT_VALUE tmp_53;
PRT_VALUE tmpSendPayload_29;
PRT_VALUE tmp_54;
PRT_VALUE tmp_55;
PRT_VALUE tmp_56;
PRT_VALUE tmp_57;
PRT_VALUE tmpPayload_11;
StackFrame retTo_16;

dummy:
retTo_16 = entryCtxt.PopReturnTo();
locals = retTo_16.locals;
currentEvent = retTo_16.currentEvent;
currentArg = retTo_16.currentArg;
if ((retTo_16.pc == 0)) {
goto start;
}
if ((retTo_16.pc == 1)) {
goto AnonFun9_0;
}
if ((retTo_16.pc == 2)) {
goto AnonFun9_1;
}
if ((retTo_16.pc == 3)) {
goto AnonFun9_2;
}
if ((retTo_16.pc == 4)) {
goto AnonFun9_3;
}
assert(false, "Internal error");

start:
argCloneVar_11 = null;
entryCtxt.PushReturnTo(0, argCloneVar_11, currentEvent, currentArg);

AnonFun9_0:
UpdateCurrentRobotState(entryCtxt);

;
if ((entryCtxt.reason == ContinuationReason.Return)) {

} else {
entryCtxt.PushReturnTo(1, locals, currentEvent, currentArg);
return;

}
tmpVal_14 = PRT_VALUE.PrtTupleGet(currentRobotState, 0);
tmpVal_15 = PRT_VALUE.PrtTupleGet(currentArg, 0);
tmpVar_20 = PRT_VALUE.PrtIsEqualValue(tmpVal_14, tmpVal_15);
tmpVar_21 = PRT_VALUE.PrtMkDefaultValue(Main.type_5_PRT_TYPE);
PRT_VALUE.PrtPrimSetBool(tmpVar_21, tmpVar_20);
assert(tmpVar_21.bl, "(222, 4): Assert failed");
tmpVal_16 = PRT_VALUE.PrtTupleGet(currentArg, 1);
tmpVar_22 = PRT_VALUE.PrtCastValue(tmpVal_16, Main.type_6_PRT_TYPE);
currentSensorState = PRT_VALUE.PrtCloneValue(tmpVar_22);
tmpVal_17 = PRT_VALUE.PrtTupleGet(herdingState, 1);
if (tmpVal_17.bl) {

} else {
tmpVal_18 = PRT_VALUE.PrtTupleGet(herdingState, 0);

}
tmpVar_23 = PRT_VALUE.PrtMkDefaultValue(Main.type_5_PRT_TYPE);
PRT_VALUE.PrtPrimSetBool(tmpVar_23, (tmpVal_17.bl || tmpVal_18.bl));
if (tmpVar_23.bl) {

} else {
tmpVal_19 = PRT_VALUE.PrtTupleGet(herdingState, 2);

}
tmpVar_24 = PRT_VALUE.PrtMkDefaultValue(Main.type_5_PRT_TYPE);
PRT_VALUE.PrtPrimSetBool(tmpVar_24, (tmpVar_23.bl || tmpVal_19.bl));
if (!tmpVar_24.bl) {
goto AnonFun9_if_9_else;
}
tmpVal_20 = PRT_VALUE.PrtTupleGet(currentSensorState, 0);
if (tmpVal_20.bl) {
tmpVal_21 = PRT_VALUE.PrtTupleGet(herdingState, 1);
tmpVar_25 = PRT_VALUE.PrtMkDefaultValue(Main.type_5_PRT_TYPE);
PRT_VALUE.PrtPrimSetBool(tmpVar_25, !tmpVal_21.bl);

}
tmpVar_26 = PRT_VALUE.PrtMkDefaultValue(Main.type_5_PRT_TYPE);
PRT_VALUE.PrtPrimSetBool(tmpVar_26, (tmpVal_20.bl && tmpVar_25.bl));
if (!tmpVar_26.bl) {
goto AnonFun9_if_1_else;
}
tmp_31 = PRT_VALUE.PrtMkDefaultValue(Main.type_12_PRT_TYPE);
PRT_VALUE.PrtPrimSetEvent(tmp_31, Main.M_sDog_SM_EVENT);
assert((tmp_31.ev != null), "(229, 6): Enqueued event must be non-null");
tmpSendPayload_16 = PRT_VALUE.PrtMkDefaultValue(Main.type_0_PRT_TYPE);
Main.InvokeMachine_Prop_1(tmp_31.ev, tmpSendPayload_16);
Main.InvokeMachine_Prop_2(tmp_31.ev, tmpSendPayload_16);
Main.InvokeMachine_Prop_6(tmp_31.ev, tmpSendPayload_16);
Main.InvokeMachine_Prop_7(tmp_31.ev, tmpSendPayload_16);
Main.InvokeMachine_Prop_8(tmp_31.ev, tmpSendPayload_16);
Main.InvokeMachine_Prop_9(tmp_31.ev, tmpSendPayload_16);
Main.InvokeMachine_Prop_3(tmp_31.ev, tmpSendPayload_16);
Main.InvokeMachine_Prop_10a(tmp_31.ev, tmpSendPayload_16);
Main.InvokeMachine_Prop_10b(tmp_31.ev, tmpSendPayload_16);
Main.InvokeMachine_Prop_10c(tmp_31.ev, tmpSendPayload_16);
tmp_32 = PRT_VALUE.PrtMkDefaultValue(Main.type_12_PRT_TYPE);
PRT_VALUE.PrtPrimSetEvent(tmp_32, Main.M_hDog_SM_EVENT);
assert((tmp_32.ev != null), "(229, 22): Enqueued event must be non-null");
tmpSendPayload_17 = PRT_VALUE.PrtMkDefaultValue(Main.type_0_PRT_TYPE);
Main.InvokeMachine_Prop_1(tmp_32.ev, tmpSendPayload_17);
Main.InvokeMachine_Prop_2(tmp_32.ev, tmpSendPayload_17);
Main.InvokeMachine_Prop_6(tmp_32.ev, tmpSendPayload_17);
Main.InvokeMachine_Prop_7(tmp_32.ev, tmpSendPayload_17);
Main.InvokeMachine_Prop_8(tmp_32.ev, tmpSendPayload_17);
Main.InvokeMachine_Prop_9(tmp_32.ev, tmpSendPayload_17);
Main.InvokeMachine_Prop_3(tmp_32.ev, tmpSendPayload_17);
Main.InvokeMachine_Prop_10a(tmp_32.ev, tmpSendPayload_17);
Main.InvokeMachine_Prop_10b(tmp_32.ev, tmpSendPayload_17);
Main.InvokeMachine_Prop_10c(tmp_32.ev, tmpSendPayload_17);
tmpVal_22 = PRT_VALUE.PrtTupleGet(herdingState, 2);
if (!tmpVal_22.bl) {
goto AnonFun9_if_0_else;
}
argCloneVar_12 = null;
entryCtxt.PushReturnTo(0, argCloneVar_12, currentEvent, currentArg);

AnonFun9_1:
Main.DOG(myHandle, entryCtxt);

;
if ((entryCtxt.reason == ContinuationReason.Return)) {
herdingTogether = PRT_VALUE.PrtCloneValue(entryCtxt.retVal);

} else {
entryCtxt.PushReturnTo(2, locals, currentEvent, currentArg);
return;

}
goto AnonFun9_if_0_end;
AnonFun9_if_0_else:

;

AnonFun9_if_0_end:

;
tmp_33 = PRT_VALUE.PrtMkDefaultValue(Main.type_5_PRT_TYPE);
PRT_VALUE.PrtPrimSetBool(tmp_33, false);
PRT_VALUE.PrtTupleSet(currentSensorState, 0, tmp_33);
goto AnonFun9_if_1_end;
AnonFun9_if_1_else:

;

AnonFun9_if_1_end:

;
tmpVal_23 = PRT_VALUE.PrtTupleGet(currentSensorState, 2);
if (tmpVal_23.bl) {
tmpVal_24 = PRT_VALUE.PrtTupleGet(herdingState, 1);
tmpVar_27 = PRT_VALUE.PrtMkDefaultValue(Main.type_5_PRT_TYPE);
PRT_VALUE.PrtPrimSetBool(tmpVar_27, !tmpVal_24.bl);

}
tmpVar_28 = PRT_VALUE.PrtMkDefaultValue(Main.type_5_PRT_TYPE);
PRT_VALUE.PrtPrimSetBool(tmpVar_28, (tmpVal_23.bl && tmpVar_27.bl));
if (!tmpVar_28.bl) {
goto AnonFun9_if_3_else;
}
tmp_34 = PRT_VALUE.PrtMkDefaultValue(Main.type_12_PRT_TYPE);
PRT_VALUE.PrtPrimSetEvent(tmp_34, Main.M_sMice_SM_EVENT);
assert((tmp_34.ev != null), "(238, 6): Enqueued event must be non-null");
tmpSendPayload_18 = PRT_VALUE.PrtMkDefaultValue(Main.type_0_PRT_TYPE);
Main.InvokeMachine_Prop_1(tmp_34.ev, tmpSendPayload_18);
Main.InvokeMachine_Prop_2(tmp_34.ev, tmpSendPayload_18);
Main.InvokeMachine_Prop_6(tmp_34.ev, tmpSendPayload_18);
Main.InvokeMachine_Prop_7(tmp_34.ev, tmpSendPayload_18);
Main.InvokeMachine_Prop_8(tmp_34.ev, tmpSendPayload_18);
Main.InvokeMachine_Prop_9(tmp_34.ev, tmpSendPayload_18);
Main.InvokeMachine_Prop_3(tmp_34.ev, tmpSendPayload_18);
Main.InvokeMachine_Prop_10a(tmp_34.ev, tmpSendPayload_18);
Main.InvokeMachine_Prop_10b(tmp_34.ev, tmpSendPayload_18);
Main.InvokeMachine_Prop_10c(tmp_34.ev, tmpSendPayload_18);
tmp_35 = PRT_VALUE.PrtMkDefaultValue(Main.type_12_PRT_TYPE);
PRT_VALUE.PrtPrimSetEvent(tmp_35, Main.M_hMice_SM_EVENT);
assert((tmp_35.ev != null), "(238, 23): Enqueued event must be non-null");
tmpSendPayload_19 = PRT_VALUE.PrtMkDefaultValue(Main.type_0_PRT_TYPE);
Main.InvokeMachine_Prop_1(tmp_35.ev, tmpSendPayload_19);
Main.InvokeMachine_Prop_2(tmp_35.ev, tmpSendPayload_19);
Main.InvokeMachine_Prop_6(tmp_35.ev, tmpSendPayload_19);
Main.InvokeMachine_Prop_7(tmp_35.ev, tmpSendPayload_19);
Main.InvokeMachine_Prop_8(tmp_35.ev, tmpSendPayload_19);
Main.InvokeMachine_Prop_9(tmp_35.ev, tmpSendPayload_19);
Main.InvokeMachine_Prop_3(tmp_35.ev, tmpSendPayload_19);
Main.InvokeMachine_Prop_10a(tmp_35.ev, tmpSendPayload_19);
Main.InvokeMachine_Prop_10b(tmp_35.ev, tmpSendPayload_19);
Main.InvokeMachine_Prop_10c(tmp_35.ev, tmpSendPayload_19);
tmpVal_25 = PRT_VALUE.PrtTupleGet(herdingState, 0);
if (!tmpVal_25.bl) {
goto AnonFun9_if_2_else;
}
argCloneVar_13 = null;
entryCtxt.PushReturnTo(0, argCloneVar_13, currentEvent, currentArg);

AnonFun9_2:
Main.MICE(myHandle, entryCtxt);

;
if ((entryCtxt.reason == ContinuationReason.Return)) {
herdingTogether = PRT_VALUE.PrtCloneValue(entryCtxt.retVal);

} else {
entryCtxt.PushReturnTo(3, locals, currentEvent, currentArg);
return;

}
goto AnonFun9_if_2_end;
AnonFun9_if_2_else:

;

AnonFun9_if_2_end:

;
tmp_36 = PRT_VALUE.PrtMkDefaultValue(Main.type_5_PRT_TYPE);
PRT_VALUE.PrtPrimSetBool(tmp_36, false);
PRT_VALUE.PrtTupleSet(currentSensorState, 2, tmp_36);
goto AnonFun9_if_3_end;
AnonFun9_if_3_else:

;

AnonFun9_if_3_end:

;
tmpVal_26 = PRT_VALUE.PrtTupleGet(currentSensorState, 1);
if (tmpVal_26.bl) {
tmpVal_27 = PRT_VALUE.PrtTupleGet(herdingState, 0);
tmpVar_29 = PRT_VALUE.PrtMkDefaultValue(Main.type_5_PRT_TYPE);
PRT_VALUE.PrtPrimSetBool(tmpVar_29, !tmpVal_27.bl);

}
tmpVar_30 = PRT_VALUE.PrtMkDefaultValue(Main.type_5_PRT_TYPE);
PRT_VALUE.PrtPrimSetBool(tmpVar_30, (tmpVal_26.bl && tmpVar_29.bl));
if (tmpVar_30.bl) {
tmpVal_28 = PRT_VALUE.PrtTupleGet(herdingState, 2);
tmpVar_31 = PRT_VALUE.PrtMkDefaultValue(Main.type_5_PRT_TYPE);
PRT_VALUE.PrtPrimSetBool(tmpVar_31, !tmpVal_28.bl);

}
tmpVar_32 = PRT_VALUE.PrtMkDefaultValue(Main.type_5_PRT_TYPE);
PRT_VALUE.PrtPrimSetBool(tmpVar_32, (tmpVar_30.bl && tmpVar_31.bl));
if (!tmpVar_32.bl) {
goto AnonFun9_if_4_else;
}
tmp_37 = PRT_VALUE.PrtMkDefaultValue(Main.type_12_PRT_TYPE);
PRT_VALUE.PrtPrimSetEvent(tmp_37, Main.M_sCat_SM_EVENT);
assert((tmp_37.ev != null), "(247, 6): Enqueued event must be non-null");
tmpSendPayload_20 = PRT_VALUE.PrtMkDefaultValue(Main.type_0_PRT_TYPE);
Main.InvokeMachine_Prop_1(tmp_37.ev, tmpSendPayload_20);
Main.InvokeMachine_Prop_2(tmp_37.ev, tmpSendPayload_20);
Main.InvokeMachine_Prop_6(tmp_37.ev, tmpSendPayload_20);
Main.InvokeMachine_Prop_7(tmp_37.ev, tmpSendPayload_20);
Main.InvokeMachine_Prop_8(tmp_37.ev, tmpSendPayload_20);
Main.InvokeMachine_Prop_9(tmp_37.ev, tmpSendPayload_20);
Main.InvokeMachine_Prop_3(tmp_37.ev, tmpSendPayload_20);
Main.InvokeMachine_Prop_10a(tmp_37.ev, tmpSendPayload_20);
Main.InvokeMachine_Prop_10b(tmp_37.ev, tmpSendPayload_20);
Main.InvokeMachine_Prop_10c(tmp_37.ev, tmpSendPayload_20);
tmp_38 = PRT_VALUE.PrtMkDefaultValue(Main.type_12_PRT_TYPE);
PRT_VALUE.PrtPrimSetEvent(tmp_38, Main.M_hCat_SM_EVENT);
assert((tmp_38.ev != null), "(247, 22): Enqueued event must be non-null");
tmpSendPayload_21 = PRT_VALUE.PrtMkDefaultValue(Main.type_0_PRT_TYPE);
Main.InvokeMachine_Prop_1(tmp_38.ev, tmpSendPayload_21);
Main.InvokeMachine_Prop_2(tmp_38.ev, tmpSendPayload_21);
Main.InvokeMachine_Prop_6(tmp_38.ev, tmpSendPayload_21);
Main.InvokeMachine_Prop_7(tmp_38.ev, tmpSendPayload_21);
Main.InvokeMachine_Prop_8(tmp_38.ev, tmpSendPayload_21);
Main.InvokeMachine_Prop_9(tmp_38.ev, tmpSendPayload_21);
Main.InvokeMachine_Prop_3(tmp_38.ev, tmpSendPayload_21);
Main.InvokeMachine_Prop_10a(tmp_38.ev, tmpSendPayload_21);
Main.InvokeMachine_Prop_10b(tmp_38.ev, tmpSendPayload_21);
Main.InvokeMachine_Prop_10c(tmp_38.ev, tmpSendPayload_21);
tmp_39 = PRT_VALUE.PrtMkDefaultValue(Main.type_5_PRT_TYPE);
PRT_VALUE.PrtPrimSetBool(tmp_39, false);
PRT_VALUE.PrtTupleSet(currentSensorState, 1, tmp_39);
goto AnonFun9_if_4_end;
AnonFun9_if_4_else:

;

AnonFun9_if_4_end:

;
tmp_40 = PRT_VALUE.PrtMkDefaultValue(Main.type_12_PRT_TYPE);
PRT_VALUE.PrtPrimSetEvent(tmp_40, Main.continueCurrentHerding_SM_EVENT);
tmpPayload_10 = PRT_VALUE.PrtMkDefaultValue(Main.type_0_PRT_TYPE);
assert((tmp_40.ev != null), "(250, 5): Raised event must be non-null");
trace("<RaiseLog> Machine RobotTaskPlanner-{0} raised Event {1}\n", myHandle.instance, tmp_40.ev.name);
myHandle.currentEvent = tmp_40.ev;
myHandle.currentArg = tmpPayload_10;
entryCtxt.Raise();
return;
goto AnonFun9_if_9_end;
AnonFun9_if_9_else:
tmpVal_29 = PRT_VALUE.PrtTupleGet(currentSensorState, 0);
if (!tmpVal_29.bl) {
goto AnonFun9_if_8_else;
}
tmp_41 = PRT_VALUE.PrtMkDefaultValue(Main.type_12_PRT_TYPE);
PRT_VALUE.PrtPrimSetEvent(tmp_41, Main.M_sDog_SM_EVENT);
assert((tmp_41.ev != null), "(256, 6): Enqueued event must be non-null");
tmpSendPayload_22 = PRT_VALUE.PrtMkDefaultValue(Main.type_0_PRT_TYPE);
Main.InvokeMachine_Prop_1(tmp_41.ev, tmpSendPayload_22);
Main.InvokeMachine_Prop_2(tmp_41.ev, tmpSendPayload_22);
Main.InvokeMachine_Prop_6(tmp_41.ev, tmpSendPayload_22);
Main.InvokeMachine_Prop_7(tmp_41.ev, tmpSendPayload_22);
Main.InvokeMachine_Prop_8(tmp_41.ev, tmpSendPayload_22);
Main.InvokeMachine_Prop_9(tmp_41.ev, tmpSendPayload_22);
Main.InvokeMachine_Prop_3(tmp_41.ev, tmpSendPayload_22);
Main.InvokeMachine_Prop_10a(tmp_41.ev, tmpSendPayload_22);
Main.InvokeMachine_Prop_10b(tmp_41.ev, tmpSendPayload_22);
Main.InvokeMachine_Prop_10c(tmp_41.ev, tmpSendPayload_22);
tmp_42 = PRT_VALUE.PrtMkDefaultValue(Main.type_12_PRT_TYPE);
PRT_VALUE.PrtPrimSetEvent(tmp_42, Main.M_hDog_SM_EVENT);
assert((tmp_42.ev != null), "(256, 22): Enqueued event must be non-null");
tmpSendPayload_23 = PRT_VALUE.PrtMkDefaultValue(Main.type_0_PRT_TYPE);
Main.InvokeMachine_Prop_1(tmp_42.ev, tmpSendPayload_23);
Main.InvokeMachine_Prop_2(tmp_42.ev, tmpSendPayload_23);
Main.InvokeMachine_Prop_6(tmp_42.ev, tmpSendPayload_23);
Main.InvokeMachine_Prop_7(tmp_42.ev, tmpSendPayload_23);
Main.InvokeMachine_Prop_8(tmp_42.ev, tmpSendPayload_23);
Main.InvokeMachine_Prop_9(tmp_42.ev, tmpSendPayload_23);
Main.InvokeMachine_Prop_3(tmp_42.ev, tmpSendPayload_23);
Main.InvokeMachine_Prop_10a(tmp_42.ev, tmpSendPayload_23);
Main.InvokeMachine_Prop_10b(tmp_42.ev, tmpSendPayload_23);
Main.InvokeMachine_Prop_10c(tmp_42.ev, tmpSendPayload_23);
tmp_43 = PRT_VALUE.PrtMkDefaultValue(Main.type_5_PRT_TYPE);
PRT_VALUE.PrtPrimSetBool(tmp_43, true);
PRT_VALUE.PrtTupleSet(herdingState, 0, tmp_43);
tmpVal_30 = PRT_VALUE.PrtTupleGet(currentSensorState, 2);
if (!tmpVal_30.bl) {
goto AnonFun9_if_5_else;
}
tmp_44 = PRT_VALUE.PrtMkDefaultValue(Main.type_12_PRT_TYPE);
PRT_VALUE.PrtPrimSetEvent(tmp_44, Main.M_sMice_SM_EVENT);
assert((tmp_44.ev != null), "(260, 7): Enqueued event must be non-null");
tmpSendPayload_24 = PRT_VALUE.PrtMkDefaultValue(Main.type_0_PRT_TYPE);
Main.InvokeMachine_Prop_1(tmp_44.ev, tmpSendPayload_24);
Main.InvokeMachine_Prop_2(tmp_44.ev, tmpSendPayload_24);
Main.InvokeMachine_Prop_6(tmp_44.ev, tmpSendPayload_24);
Main.InvokeMachine_Prop_7(tmp_44.ev, tmpSendPayload_24);
Main.InvokeMachine_Prop_8(tmp_44.ev, tmpSendPayload_24);
Main.InvokeMachine_Prop_9(tmp_44.ev, tmpSendPayload_24);
Main.InvokeMachine_Prop_3(tmp_44.ev, tmpSendPayload_24);
Main.InvokeMachine_Prop_10a(tmp_44.ev, tmpSendPayload_24);
Main.InvokeMachine_Prop_10b(tmp_44.ev, tmpSendPayload_24);
Main.InvokeMachine_Prop_10c(tmp_44.ev, tmpSendPayload_24);
tmp_45 = PRT_VALUE.PrtMkDefaultValue(Main.type_12_PRT_TYPE);
PRT_VALUE.PrtPrimSetEvent(tmp_45, Main.M_hMice_SM_EVENT);
assert((tmp_45.ev != null), "(260, 24): Enqueued event must be non-null");
tmpSendPayload_25 = PRT_VALUE.PrtMkDefaultValue(Main.type_0_PRT_TYPE);
Main.InvokeMachine_Prop_1(tmp_45.ev, tmpSendPayload_25);
Main.InvokeMachine_Prop_2(tmp_45.ev, tmpSendPayload_25);
Main.InvokeMachine_Prop_6(tmp_45.ev, tmpSendPayload_25);
Main.InvokeMachine_Prop_7(tmp_45.ev, tmpSendPayload_25);
Main.InvokeMachine_Prop_8(tmp_45.ev, tmpSendPayload_25);
Main.InvokeMachine_Prop_9(tmp_45.ev, tmpSendPayload_25);
Main.InvokeMachine_Prop_3(tmp_45.ev, tmpSendPayload_25);
Main.InvokeMachine_Prop_10a(tmp_45.ev, tmpSendPayload_25);
Main.InvokeMachine_Prop_10b(tmp_45.ev, tmpSendPayload_25);
Main.InvokeMachine_Prop_10c(tmp_45.ev, tmpSendPayload_25);
argCloneVar_14 = null;
entryCtxt.PushReturnTo(0, argCloneVar_14, currentEvent, currentArg);

AnonFun9_3:
Main.MICE(myHandle, entryCtxt);

;
if ((entryCtxt.reason == ContinuationReason.Return)) {
herdingTogether = PRT_VALUE.PrtCloneValue(entryCtxt.retVal);

} else {
entryCtxt.PushReturnTo(4, locals, currentEvent, currentArg);
return;

}
goto AnonFun9_if_5_end;
AnonFun9_if_5_else:

;

AnonFun9_if_5_end:

;
tmp_46 = PRT_VALUE.PrtMkDefaultValue(Main.type_5_PRT_TYPE);
PRT_VALUE.PrtPrimSetBool(tmp_46, false);
PRT_VALUE.PrtTupleSet(currentSensorState, 2, tmp_46);
tmp_47 = PRT_VALUE.PrtMkDefaultValue(Main.type_5_PRT_TYPE);
PRT_VALUE.PrtPrimSetBool(tmp_47, false);
PRT_VALUE.PrtTupleSet(currentSensorState, 0, tmp_47);
goto AnonFun9_if_8_end;
AnonFun9_if_8_else:
tmpVal_31 = PRT_VALUE.PrtTupleGet(currentSensorState, 1);
if (!tmpVal_31.bl) {
goto AnonFun9_if_7_else;
}
tmp_48 = PRT_VALUE.PrtMkDefaultValue(Main.type_12_PRT_TYPE);
PRT_VALUE.PrtPrimSetEvent(tmp_48, Main.M_sCat_SM_EVENT);
assert((tmp_48.ev != null), "(268, 6): Enqueued event must be non-null");
tmpSendPayload_26 = PRT_VALUE.PrtMkDefaultValue(Main.type_0_PRT_TYPE);
Main.InvokeMachine_Prop_1(tmp_48.ev, tmpSendPayload_26);
Main.InvokeMachine_Prop_2(tmp_48.ev, tmpSendPayload_26);
Main.InvokeMachine_Prop_6(tmp_48.ev, tmpSendPayload_26);
Main.InvokeMachine_Prop_7(tmp_48.ev, tmpSendPayload_26);
Main.InvokeMachine_Prop_8(tmp_48.ev, tmpSendPayload_26);
Main.InvokeMachine_Prop_9(tmp_48.ev, tmpSendPayload_26);
Main.InvokeMachine_Prop_3(tmp_48.ev, tmpSendPayload_26);
Main.InvokeMachine_Prop_10a(tmp_48.ev, tmpSendPayload_26);
Main.InvokeMachine_Prop_10b(tmp_48.ev, tmpSendPayload_26);
Main.InvokeMachine_Prop_10c(tmp_48.ev, tmpSendPayload_26);
tmp_49 = PRT_VALUE.PrtMkDefaultValue(Main.type_12_PRT_TYPE);
PRT_VALUE.PrtPrimSetEvent(tmp_49, Main.M_hCat_SM_EVENT);
assert((tmp_49.ev != null), "(268, 22): Enqueued event must be non-null");
tmpSendPayload_27 = PRT_VALUE.PrtMkDefaultValue(Main.type_0_PRT_TYPE);
Main.InvokeMachine_Prop_1(tmp_49.ev, tmpSendPayload_27);
Main.InvokeMachine_Prop_2(tmp_49.ev, tmpSendPayload_27);
Main.InvokeMachine_Prop_6(tmp_49.ev, tmpSendPayload_27);
Main.InvokeMachine_Prop_7(tmp_49.ev, tmpSendPayload_27);
Main.InvokeMachine_Prop_8(tmp_49.ev, tmpSendPayload_27);
Main.InvokeMachine_Prop_9(tmp_49.ev, tmpSendPayload_27);
Main.InvokeMachine_Prop_3(tmp_49.ev, tmpSendPayload_27);
Main.InvokeMachine_Prop_10a(tmp_49.ev, tmpSendPayload_27);
Main.InvokeMachine_Prop_10b(tmp_49.ev, tmpSendPayload_27);
Main.InvokeMachine_Prop_10c(tmp_49.ev, tmpSendPayload_27);
tmp_50 = PRT_VALUE.PrtMkDefaultValue(Main.type_5_PRT_TYPE);
PRT_VALUE.PrtPrimSetBool(tmp_50, false);
PRT_VALUE.PrtTupleSet(currentSensorState, 1, tmp_50);
tmp_51 = PRT_VALUE.PrtMkDefaultValue(Main.type_5_PRT_TYPE);
PRT_VALUE.PrtPrimSetBool(tmp_51, true);
PRT_VALUE.PrtTupleSet(herdingState, 1, tmp_51);
goto AnonFun9_if_7_end;
AnonFun9_if_7_else:
tmpVal_32 = PRT_VALUE.PrtTupleGet(currentSensorState, 2);
if (!tmpVal_32.bl) {
goto AnonFun9_if_6_else;
}
tmp_52 = PRT_VALUE.PrtMkDefaultValue(Main.type_12_PRT_TYPE);
PRT_VALUE.PrtPrimSetEvent(tmp_52, Main.M_sMice_SM_EVENT);
assert((tmp_52.ev != null), "(274, 6): Enqueued event must be non-null");
tmpSendPayload_28 = PRT_VALUE.PrtMkDefaultValue(Main.type_0_PRT_TYPE);
Main.InvokeMachine_Prop_1(tmp_52.ev, tmpSendPayload_28);
Main.InvokeMachine_Prop_2(tmp_52.ev, tmpSendPayload_28);
Main.InvokeMachine_Prop_6(tmp_52.ev, tmpSendPayload_28);
Main.InvokeMachine_Prop_7(tmp_52.ev, tmpSendPayload_28);
Main.InvokeMachine_Prop_8(tmp_52.ev, tmpSendPayload_28);
Main.InvokeMachine_Prop_9(tmp_52.ev, tmpSendPayload_28);
Main.InvokeMachine_Prop_3(tmp_52.ev, tmpSendPayload_28);
Main.InvokeMachine_Prop_10a(tmp_52.ev, tmpSendPayload_28);
Main.InvokeMachine_Prop_10b(tmp_52.ev, tmpSendPayload_28);
Main.InvokeMachine_Prop_10c(tmp_52.ev, tmpSendPayload_28);
tmp_53 = PRT_VALUE.PrtMkDefaultValue(Main.type_12_PRT_TYPE);
PRT_VALUE.PrtPrimSetEvent(tmp_53, Main.M_hMice_SM_EVENT);
assert((tmp_53.ev != null), "(274, 23): Enqueued event must be non-null");
tmpSendPayload_29 = PRT_VALUE.PrtMkDefaultValue(Main.type_0_PRT_TYPE);
Main.InvokeMachine_Prop_1(tmp_53.ev, tmpSendPayload_29);
Main.InvokeMachine_Prop_2(tmp_53.ev, tmpSendPayload_29);
Main.InvokeMachine_Prop_6(tmp_53.ev, tmpSendPayload_29);
Main.InvokeMachine_Prop_7(tmp_53.ev, tmpSendPayload_29);
Main.InvokeMachine_Prop_8(tmp_53.ev, tmpSendPayload_29);
Main.InvokeMachine_Prop_9(tmp_53.ev, tmpSendPayload_29);
Main.InvokeMachine_Prop_3(tmp_53.ev, tmpSendPayload_29);
Main.InvokeMachine_Prop_10a(tmp_53.ev, tmpSendPayload_29);
Main.InvokeMachine_Prop_10b(tmp_53.ev, tmpSendPayload_29);
Main.InvokeMachine_Prop_10c(tmp_53.ev, tmpSendPayload_29);
tmp_54 = PRT_VALUE.PrtMkDefaultValue(Main.type_5_PRT_TYPE);
PRT_VALUE.PrtPrimSetBool(tmp_54, true);
PRT_VALUE.PrtTupleSet(herdingState, 2, tmp_54);
tmp_55 = PRT_VALUE.PrtMkDefaultValue(Main.type_5_PRT_TYPE);
PRT_VALUE.PrtPrimSetBool(tmp_55, false);
PRT_VALUE.PrtTupleSet(currentSensorState, 2, tmp_55);
goto AnonFun9_if_6_end;
AnonFun9_if_6_else:
tmp_56 = PRT_VALUE.PrtMkDefaultValue(Main.type_5_PRT_TYPE);
PRT_VALUE.PrtPrimSetBool(tmp_56, false);
assert(tmp_56.bl, "(281, 6): Assert failed");

;

AnonFun9_if_6_end:

;

;

AnonFun9_if_7_end:

;

;

AnonFun9_if_8_end:

;
tmp_57 = PRT_VALUE.PrtMkDefaultValue(Main.type_12_PRT_TYPE);
PRT_VALUE.PrtPrimSetEvent(tmp_57, Main.startNewHerding_SM_EVENT);
tmpPayload_11 = PRT_VALUE.PrtMkDefaultValue(Main.type_0_PRT_TYPE);
assert((tmp_57.ev != null), "(283, 5): Raised event must be non-null");
trace("<RaiseLog> Machine RobotTaskPlanner-{0} raised Event {1}\n", myHandle.instance, tmp_57.ev.name);
myHandle.currentEvent = tmp_57.ev;
myHandle.currentArg = tmpPayload_11;
entryCtxt.Raise();
return;

;

AnonFun9_if_9_end:

;

;
entryCtxt.Return();
return;

;

}
void AnonFun10(Continuation entryCtxt) {
PRT_VALUE_ARRAY locals;
SM_EVENT currentEvent;
PRT_VALUE currentArg;
PRT_VALUE_ARRAY argCloneVar_15;
PRT_VALUE tmpVal_33;
PRT_VALUE_ARRAY argCloneVar_16;
PRT_VALUE tmpVal_34;
PRT_VALUE_ARRAY argCloneVar_17;
PRT_VALUE tmpVal_35;
PRT_VALUE_ARRAY argCloneVar_18;
PRT_VALUE tmp_58;
PRT_VALUE tmp_59;
PRT_VALUE tmpVal_36;
PRT_VALUE tmpTuple_8;
PRT_VALUE tmpPayload_12;
StackFrame retTo_17;

dummy:
retTo_17 = entryCtxt.PopReturnTo();
locals = retTo_17.locals;
currentEvent = retTo_17.currentEvent;
currentArg = retTo_17.currentArg;
if ((retTo_17.pc == 0)) {
goto start;
}
if ((retTo_17.pc == 1)) {
goto AnonFun10_0;
}
if ((retTo_17.pc == 2)) {
goto AnonFun10_1;
}
if ((retTo_17.pc == 3)) {
goto AnonFun10_2;
}
if ((retTo_17.pc == 4)) {
goto AnonFun10_3;
}
if ((retTo_17.pc == 5)) {
goto AnonFun10_4;
}
assert(false, "Internal error");

start:
argCloneVar_15 = null;
entryCtxt.PushReturnTo(0, argCloneVar_15, currentEvent, currentArg);

AnonFun10_0:
UpdateCurrentRobotState(entryCtxt);

;
if ((entryCtxt.reason == ContinuationReason.Return)) {

} else {
entryCtxt.PushReturnTo(1, locals, currentEvent, currentArg);
return;

}
tmpVal_33 = PRT_VALUE.PrtTupleGet(herdingState, 0);
if (!tmpVal_33.bl) {
goto AnonFun10_if_2_else;
}
argCloneVar_16 = null;
entryCtxt.PushReturnTo(0, argCloneVar_16, currentEvent, currentArg);

AnonFun10_1:
Main.DOG_CAGE_LOC(myHandle, entryCtxt);

;
if ((entryCtxt.reason == ContinuationReason.Return)) {
nextLocation = PRT_VALUE.PrtCloneValue(entryCtxt.retVal);

} else {
entryCtxt.PushReturnTo(2, locals, currentEvent, currentArg);
return;

}
goto AnonFun10_if_2_end;
AnonFun10_if_2_else:
tmpVal_34 = PRT_VALUE.PrtTupleGet(herdingState, 1);
if (!tmpVal_34.bl) {
goto AnonFun10_if_1_else;
}
argCloneVar_17 = null;
entryCtxt.PushReturnTo(0, argCloneVar_17, currentEvent, currentArg);

AnonFun10_2:
Main.CAT_CAGE_LOC(myHandle, entryCtxt);

;
if ((entryCtxt.reason == ContinuationReason.Return)) {
nextLocation = PRT_VALUE.PrtCloneValue(entryCtxt.retVal);

} else {
entryCtxt.PushReturnTo(3, locals, currentEvent, currentArg);
return;

}
goto AnonFun10_if_1_end;
AnonFun10_if_1_else:
tmpVal_35 = PRT_VALUE.PrtTupleGet(herdingState, 2);
if (!tmpVal_35.bl) {
goto AnonFun10_if_0_else;
}
argCloneVar_18 = null;
entryCtxt.PushReturnTo(0, argCloneVar_18, currentEvent, currentArg);

AnonFun10_3:
Main.MICE_CAGE_LOC(myHandle, entryCtxt);

;
if ((entryCtxt.reason == ContinuationReason.Return)) {
nextLocation = PRT_VALUE.PrtCloneValue(entryCtxt.retVal);

} else {
entryCtxt.PushReturnTo(4, locals, currentEvent, currentArg);
return;

}
goto AnonFun10_if_0_end;
AnonFun10_if_0_else:
tmp_58 = PRT_VALUE.PrtMkDefaultValue(Main.type_5_PRT_TYPE);
PRT_VALUE.PrtPrimSetBool(tmp_58, false);
assert(tmp_58.bl, "(301, 5): Assert failed");

;

AnonFun10_if_0_end:

;

;

AnonFun10_if_1_end:

;

;

AnonFun10_if_2_end:

;
tmp_59 = PRT_VALUE.PrtMkDefaultValue(Main.type_12_PRT_TYPE);
PRT_VALUE.PrtPrimSetEvent(tmp_59, Main.GeneratePlanFor_SM_EVENT);
tmpVal_36 = PRT_VALUE.PrtTupleGet(currentRobotState, 0);
tmpTuple_8 = PRT_VALUE.PrtMkDefaultValue(Main.type_15_PRT_TYPE);
PRT_VALUE.PrtTupleSet(tmpTuple_8, 0, tmpVal_36);
PRT_VALUE.PrtTupleSet(tmpTuple_8, 1, nextLocation);
assert((motionPlanner.mach != null), "Target of send must be non-null");
tmpPayload_12 = PRT_VALUE.PrtCloneValue(tmpTuple_8);
Main.InvokeMachine_Prop_1(tmp_59.ev, tmpPayload_12);
Main.InvokeMachine_Prop_2(tmp_59.ev, tmpPayload_12);
Main.InvokeMachine_Prop_6(tmp_59.ev, tmpPayload_12);
Main.InvokeMachine_Prop_7(tmp_59.ev, tmpPayload_12);
Main.InvokeMachine_Prop_8(tmp_59.ev, tmpPayload_12);
Main.InvokeMachine_Prop_9(tmp_59.ev, tmpPayload_12);
Main.InvokeMachine_Prop_3(tmp_59.ev, tmpPayload_12);
Main.InvokeMachine_Prop_10a(tmp_59.ev, tmpPayload_12);
Main.InvokeMachine_Prop_10b(tmp_59.ev, tmpPayload_12);
Main.InvokeMachine_Prop_10c(tmp_59.ev, tmpPayload_12);
motionPlanner.mach.EnqueueEvent(tmp_59.ev, tmpPayload_12, myHandle);
entryCtxt.Send(5, locals, currentEvent, currentArg);
return;

AnonFun10_4:

;

;
entryCtxt.Return();
return;

;

}
void AnonFun11(Continuation entryCtxt) {
PRT_VALUE_ARRAY locals;
SM_EVENT currentEvent;
PRT_VALUE currentArg;
PRT_VALUE tmpVal_37;
PRT_VALUE tmpVal_38;
PRT_VALUE tmpVar_33;
PRT_VALUE tmpVal_39;
PRT_VALUE tmpVal_40;
PRT_VALUE tmpVar_34;
PRT_VALUE tmpVal_41;
PRT_VALUE tmpVal_42;
PRT_VALUE tmpVar_35;
PRT_VALUE tmp_60;
PRT_VALUE tmpVar_36;
bool tmpVar_37;
PRT_VALUE tmpVar_38;
PRT_VALUE_ARRAY argCloneVar_19;
PRT_VALUE ret_1;
bool tmpVar_39;
PRT_VALUE tmpVar_40;
PRT_VALUE_ARRAY argCloneVar_20;
PRT_VALUE_ARRAY argCloneVar_21;
PRT_VALUE ret_2;
bool tmpVar_41;
PRT_VALUE tmpVar_42;
PRT_VALUE_ARRAY argCloneVar_22;
PRT_VALUE_ARRAY argCloneVar_23;
PRT_VALUE ret_3;
bool tmpVar_43;
PRT_VALUE tmpVar_44;
PRT_VALUE_ARRAY argCloneVar_24;
PRT_VALUE tmp_61;
PRT_VALUE tmpVar_45;
PRT_VALUE tmp_62;
PRT_VALUE tmpPayload_13;
PRT_VALUE tmp_63;
PRT_VALUE tmpPayload_14;
StackFrame retTo_18;

dummy:
retTo_18 = entryCtxt.PopReturnTo();
locals = retTo_18.locals;
currentEvent = retTo_18.currentEvent;
currentArg = retTo_18.currentArg;
if ((retTo_18.pc == 0)) {
goto start;
}
if ((retTo_18.pc == 1)) {
goto AnonFun11_0;
}
if ((retTo_18.pc == 2)) {
goto AnonFun11_1;
}
if ((retTo_18.pc == 3)) {
goto AnonFun11_2;
}
if ((retTo_18.pc == 4)) {
goto AnonFun11_3;
}
if ((retTo_18.pc == 5)) {
goto AnonFun11_4;
}
if ((retTo_18.pc == 6)) {
goto AnonFun11_5;
}
assert(false, "Internal error");

start:
tmpVal_37 = PRT_VALUE.PrtTupleGet(herdingState, 1);
if (!tmpVal_37.bl) {
goto AnonFun11_if_2_else;
}
tmpVal_38 = PRT_VALUE.PrtTupleGet(herdingState, 1);
tmpVar_33 = PRT_VALUE.PrtMkDefaultValue(Main.type_5_PRT_TYPE);
PRT_VALUE.PrtPrimSetBool(tmpVar_33, !tmpVal_38.bl);
PRT_VALUE.PrtTupleSet(herdingState, 1, tmpVar_33);
goto AnonFun11_if_2_end;
AnonFun11_if_2_else:
tmpVal_39 = PRT_VALUE.PrtTupleGet(herdingState, 0);
if (!tmpVal_39.bl) {
goto AnonFun11_if_1_else;
}
tmpVal_40 = PRT_VALUE.PrtTupleGet(herdingState, 0);
tmpVar_34 = PRT_VALUE.PrtMkDefaultValue(Main.type_5_PRT_TYPE);
PRT_VALUE.PrtPrimSetBool(tmpVar_34, !tmpVal_40.bl);
PRT_VALUE.PrtTupleSet(herdingState, 0, tmpVar_34);
goto AnonFun11_if_1_end;
AnonFun11_if_1_else:
tmpVal_41 = PRT_VALUE.PrtTupleGet(herdingState, 2);
if (!tmpVal_41.bl) {
goto AnonFun11_if_0_else;
}
tmpVal_42 = PRT_VALUE.PrtTupleGet(herdingState, 2);
tmpVar_35 = PRT_VALUE.PrtMkDefaultValue(Main.type_5_PRT_TYPE);
PRT_VALUE.PrtPrimSetBool(tmpVar_35, !tmpVal_42.bl);
PRT_VALUE.PrtTupleSet(herdingState, 2, tmpVar_35);
goto AnonFun11_if_0_end;
AnonFun11_if_0_else:

;

AnonFun11_if_0_end:

;

;

AnonFun11_if_1_end:

;

;

AnonFun11_if_2_end:

;
tmp_60 = PRT_VALUE.PrtMkDefaultValue(Main.type_1_PRT_TYPE);
PRT_VALUE.PrtPrimSetInt(tmp_60, 1);
tmpVar_36 = PRT_VALUE.PrtMkDefaultValue(Main.type_1_PRT_TYPE);
PRT_VALUE.PrtPrimSetInt(tmpVar_36, -tmp_60.nt);
tmpVar_37 = PRT_VALUE.PrtIsEqualValue(herdingTogether, tmpVar_36);
tmpVar_38 = PRT_VALUE.PrtMkDefaultValue(Main.type_5_PRT_TYPE);
PRT_VALUE.PrtPrimSetBool(tmpVar_38, !tmpVar_37);
if (!tmpVar_38.bl) {
goto AnonFun11_if_6_else;
}
argCloneVar_19 = null;
entryCtxt.PushReturnTo(0, argCloneVar_19, currentEvent, currentArg);

AnonFun11_0:
Main.MICE(myHandle, entryCtxt);

;
if ((entryCtxt.reason == ContinuationReason.Return)) {
ret_1 = entryCtxt.retVal;

} else {
entryCtxt.PushReturnTo(1, locals, currentEvent, currentArg);
return;

}
tmpVar_39 = PRT_VALUE.PrtIsEqualValue(herdingTogether, ret_1);
tmpVar_40 = PRT_VALUE.PrtMkDefaultValue(Main.type_5_PRT_TYPE);
PRT_VALUE.PrtPrimSetBool(tmpVar_40, tmpVar_39);
if (!tmpVar_40.bl) {
goto AnonFun11_if_3_else;
}
argCloneVar_20 = null;
entryCtxt.PushReturnTo(0, argCloneVar_20, currentEvent, currentArg);

AnonFun11_1:
Main.MICE_CAGE_LOC(myHandle, entryCtxt);

;
if ((entryCtxt.reason == ContinuationReason.Return)) {
nextLocation = PRT_VALUE.PrtCloneValue(entryCtxt.retVal);

} else {
entryCtxt.PushReturnTo(2, locals, currentEvent, currentArg);
return;

}
goto AnonFun11_if_3_end;
AnonFun11_if_3_else:

;

AnonFun11_if_3_end:

;
argCloneVar_21 = null;
entryCtxt.PushReturnTo(0, argCloneVar_21, currentEvent, currentArg);

AnonFun11_2:
Main.DOG(myHandle, entryCtxt);

;
if ((entryCtxt.reason == ContinuationReason.Return)) {
ret_2 = entryCtxt.retVal;

} else {
entryCtxt.PushReturnTo(3, locals, currentEvent, currentArg);
return;

}
tmpVar_41 = PRT_VALUE.PrtIsEqualValue(herdingTogether, ret_2);
tmpVar_42 = PRT_VALUE.PrtMkDefaultValue(Main.type_5_PRT_TYPE);
PRT_VALUE.PrtPrimSetBool(tmpVar_42, tmpVar_41);
if (!tmpVar_42.bl) {
goto AnonFun11_if_4_else;
}
argCloneVar_22 = null;
entryCtxt.PushReturnTo(0, argCloneVar_22, currentEvent, currentArg);

AnonFun11_3:
Main.DOG_CAGE_LOC(myHandle, entryCtxt);

;
if ((entryCtxt.reason == ContinuationReason.Return)) {
nextLocation = PRT_VALUE.PrtCloneValue(entryCtxt.retVal);

} else {
entryCtxt.PushReturnTo(4, locals, currentEvent, currentArg);
return;

}
goto AnonFun11_if_4_end;
AnonFun11_if_4_else:

;

AnonFun11_if_4_end:

;
argCloneVar_23 = null;
entryCtxt.PushReturnTo(0, argCloneVar_23, currentEvent, currentArg);

AnonFun11_4:
Main.CAT(myHandle, entryCtxt);

;
if ((entryCtxt.reason == ContinuationReason.Return)) {
ret_3 = entryCtxt.retVal;

} else {
entryCtxt.PushReturnTo(5, locals, currentEvent, currentArg);
return;

}
tmpVar_43 = PRT_VALUE.PrtIsEqualValue(herdingTogether, ret_3);
tmpVar_44 = PRT_VALUE.PrtMkDefaultValue(Main.type_5_PRT_TYPE);
PRT_VALUE.PrtPrimSetBool(tmpVar_44, tmpVar_43);
if (!tmpVar_44.bl) {
goto AnonFun11_if_5_else;
}
argCloneVar_24 = null;
entryCtxt.PushReturnTo(0, argCloneVar_24, currentEvent, currentArg);

AnonFun11_5:
Main.DOG_CAGE_LOC(myHandle, entryCtxt);

;
if ((entryCtxt.reason == ContinuationReason.Return)) {
nextLocation = PRT_VALUE.PrtCloneValue(entryCtxt.retVal);

} else {
entryCtxt.PushReturnTo(6, locals, currentEvent, currentArg);
return;

}
goto AnonFun11_if_5_end;
AnonFun11_if_5_else:

;

AnonFun11_if_5_end:

;
tmp_61 = PRT_VALUE.PrtMkDefaultValue(Main.type_1_PRT_TYPE);
PRT_VALUE.PrtPrimSetInt(tmp_61, 1);
tmpVar_45 = PRT_VALUE.PrtMkDefaultValue(Main.type_1_PRT_TYPE);
PRT_VALUE.PrtPrimSetInt(tmpVar_45, -tmp_61.nt);
herdingTogether = PRT_VALUE.PrtCloneValue(tmpVar_45);
tmp_62 = PRT_VALUE.PrtMkDefaultValue(Main.type_12_PRT_TYPE);
PRT_VALUE.PrtPrimSetEvent(tmp_62, Main.ReDo_SM_EVENT);
tmpPayload_13 = PRT_VALUE.PrtMkDefaultValue(Main.type_0_PRT_TYPE);
assert((tmp_62.ev != null), "(327, 5): Raised event must be non-null");
trace("<RaiseLog> Machine RobotTaskPlanner-{0} raised Event {1}\n", myHandle.instance, tmp_62.ev.name);
myHandle.currentEvent = tmp_62.ev;
myHandle.currentArg = tmpPayload_13;
entryCtxt.Raise();
return;
goto AnonFun11_if_6_end;
AnonFun11_if_6_else:
tmp_63 = PRT_VALUE.PrtMkDefaultValue(Main.type_12_PRT_TYPE);
PRT_VALUE.PrtPrimSetEvent(tmp_63, Main.doScanning_SM_EVENT);
tmpPayload_14 = PRT_VALUE.PrtMkDefaultValue(Main.type_0_PRT_TYPE);
assert((tmp_63.ev != null), "(330, 5): Raised event must be non-null");
trace("<RaiseLog> Machine RobotTaskPlanner-{0} raised Event {1}\n", myHandle.instance, tmp_63.ev.name);
myHandle.currentEvent = tmp_63.ev;
myHandle.currentArg = tmpPayload_14;
entryCtxt.Raise();
return;

;

AnonFun11_if_6_end:

;

;
entryCtxt.Return();
return;

;

}
};

class MACHINE_MotionPlanner{
PRT_VALUE RobotTP;
PRT_VALUE Obstacles;
PRT_VALUE AllMotionPlans;
SM_HANDLE myHandle;
void MotionPlanner_Init_CalculateDeferredAndActionSet() {

dummy:
myHandle.stack.deferredSet = new SM_EVENT_SET;
myHandle.stack.actionSet = new SM_EVENT_SET;
myHandle.stack.AddStackDeferredSet(myHandle.stack.deferredSet);
myHandle.stack.deferredSet = (myHandle.stack.deferredSet - Main.local_SM_EVENT);
myHandle.stack.AddStackActionSet(myHandle.stack.actionSet);
myHandle.stack.actionSet = (myHandle.stack.actionSet - Main.local_SM_EVENT);
myHandle.stack.es = new SM_EVENT_ARRAY[0];
myHandle.stack.as = new ActionOrFun_ARRAY[0];

;

}
void MotionPlanner_WaitForCommands_CalculateDeferredAndActionSet() {

dummy:
myHandle.stack.deferredSet = new SM_EVENT_SET;
myHandle.stack.actionSet = new SM_EVENT_SET;
myHandle.stack.AddStackDeferredSet(myHandle.stack.deferredSet);
myHandle.stack.deferredSet = (myHandle.stack.deferredSet - Main.GeneratePlanFor_SM_EVENT);
myHandle.stack.AddStackActionSet(myHandle.stack.actionSet);
myHandle.stack.actionSet = (myHandle.stack.actionSet + Main.GeneratePlanFor_SM_EVENT);
myHandle.stack.es = new SM_EVENT_ARRAY[1];
myHandle.stack.as = new ActionOrFun_ARRAY[1];
myHandle.stack.es[0] = Main.GeneratePlanFor_SM_EVENT;
myHandle.stack.as[0] = ActionOrFun._MotionPlanner_ComputeMotionPlanAndSend;

;

}
void Start() {

dummy:
Run(Main.MotionPlanner_Init_SM_STATE);
if ((myHandle.currentEvent == Main.halt_SM_EVENT)) {
myHandle.stack = null;
myHandle.buffer = null;
myHandle.currentArg = null;
SM_HANDLE.halted = (SM_HANDLE.halted + myHandle);
SM_HANDLE.enabled = (SM_HANDLE.enabled - myHandle);
return;

}
trace("<StateLog> Unhandled event exception by machine MotionPlanner-{0}\n", myHandle.instance);
assert(false, "Unhandled event exception by machine MotionPlanner");

;

}
void Run(SM_STATE state) {
bool doPop;
bool hasNullTransitionOrAction;

init:
myHandle.Push();
myHandle.stack.state = state;
doPop = RunHelper(true);
while (!doPop) {
hasNullTransitionOrAction = myHandle.stack.HasNullTransitionOrAction();
myHandle.DequeueEvent(hasNullTransitionOrAction);
doPop = RunHelper(false);

}
myHandle.Pop();

;

}
void TraceEnterState(SM_STATE state) {

init:
if ((state == Main.MotionPlanner_Init_SM_STATE)) {
trace("<StateLog> Machine MotionPlanner-{0} entering State Init\n", myHandle.instance);
return;

}
if ((state == Main.MotionPlanner_WaitForCommands_SM_STATE)) {
trace("<StateLog> Machine MotionPlanner-{0} entering State WaitForCommands\n", myHandle.instance);
return;

}
assert(false, "Internal error");

;

}
void TraceExitState(SM_STATE state) {

init:
if ((state == Main.MotionPlanner_Init_SM_STATE)) {
trace("<StateLog> Machine MotionPlanner-{0} exiting State Init\n", myHandle.instance);
return;

}
if ((state == Main.MotionPlanner_WaitForCommands_SM_STATE)) {
trace("<StateLog> Machine MotionPlanner-{0} exiting State WaitForCommands\n", myHandle.instance);
return;

}
assert(false, "Internal error");

;

}
void CalculateDeferredAndActionSet(SM_STATE state) {

init:
if ((state == Main.MotionPlanner_Init_SM_STATE)) {
MotionPlanner_Init_CalculateDeferredAndActionSet();
return;

}
if ((state == Main.MotionPlanner_WaitForCommands_SM_STATE)) {
MotionPlanner_WaitForCommands_CalculateDeferredAndActionSet();
return;

}
assert(false, "Internal error");

;

}
bool RunHelper(bool start) {
SM_STATE state;
SM_TRANSITION transition;
ActionOrFun actionFun;

init:
state = myHandle.stack.state;
if (start) {
goto enter;
} else {
goto handle;
}

;


enter:
state = myHandle.stack.state;
TraceEnterState(state);
CalculateDeferredAndActionSet(state);
actionFun = state.entryFun;

;


execute:
ReentrancyHelper(actionFun);
if ((myHandle.cont.reason == ContinuationReason.Raise)) {
goto handle;
}
myHandle.currentEvent = null;
myHandle.currentArg = PRT_VALUE.PrtMkDefaultValue(Main.type_0_PRT_TYPE);
if ((myHandle.cont.reason != ContinuationReason.Pop)) {
return false;

}
TraceExitState(state);
ReentrancyHelper(state.exitFun);
return true;

;


handle:
if ((myHandle.currentEvent in myHandle.stack.actionSet)) {
actionFun = myHandle.stack.Find(myHandle.currentEvent);
goto execute;
}
transition = state.FindPushTransition(myHandle.currentEvent);
if ((transition != null)) {
Run(transition.to);
if ((myHandle.currentEvent == null)) {
return false;

} else {
goto handle;
}

}
TraceExitState(state);
ReentrancyHelper(state.exitFun);
transition = state.FindTransition(myHandle.currentEvent);
if ((transition == null)) {
return true;

}
ReentrancyHelper(transition.fun);
myHandle.stack.state = transition.to;
state = myHandle.stack.state;
goto enter;
;

}
bool ProcessContinuation() {
bool doPop;

init:
if ((myHandle.cont.reason == ContinuationReason.Return)) {
return true;

}
if ((myHandle.cont.reason == ContinuationReason.Pop)) {
return true;

}
if ((myHandle.cont.reason == ContinuationReason.Raise)) {
return true;

}
if ((myHandle.cont.reason == ContinuationReason.Receive)) {
myHandle.DequeueEvent(false);
return false;

}
if ((myHandle.cont.reason == ContinuationReason.Nondet)) {
myHandle.cont.nondet = choose(bool);
return false;

}
if ((myHandle.cont.reason == ContinuationReason.NewMachine)) {
yield;
return false;

}
if ((myHandle.cont.reason == ContinuationReason.Send)) {
yield;
return false;

}

;

}
void ReentrancyHelper(ActionOrFun actionFun) {
PRT_VALUE_ARRAY locals;
bool doPop;

init:
doPop = false;
myHandle.cont.Reset();
if ((actionFun == ActionOrFun._ResetObstacle)) {
trace("<FunctionLog> Machine MotionPlanner-{0} executing Function ResetObstacle\n", myHandle.instance);
locals = null;
myHandle.cont.PushReturnTo(0, locals, myHandle.currentEvent, myHandle.currentArg);
goto execute_ResetObstacle;
}
if ((actionFun == ActionOrFun._Seal)) {
trace("<FunctionLog> Machine MotionPlanner-{0} executing Function Seal\n", myHandle.instance);
locals = null;
myHandle.cont.PushReturnTo(0, locals, myHandle.currentEvent, myHandle.currentArg);
goto execute_Seal;
}
if ((actionFun == ActionOrFun._Unseal)) {
trace("<FunctionLog> Machine MotionPlanner-{0} executing Function Unseal\n", myHandle.instance);
locals = null;
myHandle.cont.PushReturnTo(0, locals, myHandle.currentEvent, myHandle.currentArg);
goto execute_Unseal;
}
if ((actionFun == ActionOrFun._InitializeMotionPlanning)) {
trace("<FunctionLog> Machine MotionPlanner-{0} executing Function InitializeMotionPlanning\n", myHandle.instance);
locals = new PRT_VALUE_ARRAY[4];
locals[3] = PRT_VALUE.PrtMkDefaultValue(Main.type_1_PRT_TYPE);
locals[2] = PRT_VALUE.PrtMkDefaultValue(Main.type_2_PRT_TYPE);
locals[1] = PRT_VALUE.PrtMkDefaultValue(Main.type_2_PRT_TYPE);
locals[0] = PRT_VALUE.PrtMkDefaultValue(Main.type_4_PRT_TYPE);
myHandle.cont.PushReturnTo(0, locals, myHandle.currentEvent, myHandle.currentArg);
goto execute_InitializeMotionPlanning;
}
if ((actionFun == ActionOrFun._CAT_CAGE_LOC)) {
trace("<FunctionLog> Machine MotionPlanner-{0} executing Function CAT_CAGE_LOC\n", myHandle.instance);
locals = null;
myHandle.cont.PushReturnTo(0, locals, myHandle.currentEvent, myHandle.currentArg);
goto execute_CAT_CAGE_LOC;
}
if ((actionFun == ActionOrFun._DOG_CAGE_LOC)) {
trace("<FunctionLog> Machine MotionPlanner-{0} executing Function DOG_CAGE_LOC\n", myHandle.instance);
locals = null;
myHandle.cont.PushReturnTo(0, locals, myHandle.currentEvent, myHandle.currentArg);
goto execute_DOG_CAGE_LOC;
}
if ((actionFun == ActionOrFun._MICE_CAGE_LOC)) {
trace("<FunctionLog> Machine MotionPlanner-{0} executing Function MICE_CAGE_LOC\n", myHandle.instance);
locals = null;
myHandle.cont.PushReturnTo(0, locals, myHandle.currentEvent, myHandle.currentArg);
goto execute_MICE_CAGE_LOC;
}
if ((actionFun == ActionOrFun._BATTERY_THRESHOLD)) {
trace("<FunctionLog> Machine MotionPlanner-{0} executing Function BATTERY_THRESHOLD\n", myHandle.instance);
locals = null;
myHandle.cont.PushReturnTo(0, locals, myHandle.currentEvent, myHandle.currentArg);
goto execute_BATTERY_THRESHOLD;
}
if ((actionFun == ActionOrFun._DOG)) {
trace("<FunctionLog> Machine MotionPlanner-{0} executing Function DOG\n", myHandle.instance);
locals = null;
myHandle.cont.PushReturnTo(0, locals, myHandle.currentEvent, myHandle.currentArg);
goto execute_DOG;
}
if ((actionFun == ActionOrFun._CAT)) {
trace("<FunctionLog> Machine MotionPlanner-{0} executing Function CAT\n", myHandle.instance);
locals = null;
myHandle.cont.PushReturnTo(0, locals, myHandle.currentEvent, myHandle.currentArg);
goto execute_CAT;
}
if ((actionFun == ActionOrFun._MICE)) {
trace("<FunctionLog> Machine MotionPlanner-{0} executing Function MICE\n", myHandle.instance);
locals = null;
myHandle.cont.PushReturnTo(0, locals, myHandle.currentEvent, myHandle.currentArg);
goto execute_MICE;
}
if ((actionFun == ActionOrFun._BATTERY_CHARGE_LOCATION)) {
trace("<FunctionLog> Machine MotionPlanner-{0} executing Function BATTERY_CHARGE_LOCATION\n", myHandle.instance);
locals = null;
myHandle.cont.PushReturnTo(0, locals, myHandle.currentEvent, myHandle.currentArg);
goto execute_BATTERY_CHARGE_LOCATION;
}
if ((actionFun == ActionOrFun._ROBOT_START_STATE)) {
trace("<FunctionLog> Machine MotionPlanner-{0} executing Function ROBOT_START_STATE\n", myHandle.instance);
locals = null;
myHandle.cont.PushReturnTo(0, locals, myHandle.currentEvent, myHandle.currentArg);
goto execute_ROBOT_START_STATE;
}
if ((actionFun == ActionOrFun._SIZE_OF_GRID)) {
trace("<FunctionLog> Machine MotionPlanner-{0} executing Function SIZE_OF_GRID\n", myHandle.instance);
locals = null;
myHandle.cont.PushReturnTo(0, locals, myHandle.currentEvent, myHandle.currentArg);
goto execute_SIZE_OF_GRID;
}
if ((actionFun == ActionOrFun._ROBOT_SCAN_LOCATIONS)) {
trace("<FunctionLog> Machine MotionPlanner-{0} executing Function ROBOT_SCAN_LOCATIONS\n", myHandle.instance);
locals = new PRT_VALUE_ARRAY[3];
locals[2] = PRT_VALUE.PrtMkDefaultValue(Main.type_2_PRT_TYPE);
locals[1] = PRT_VALUE.PrtMkDefaultValue(Main.type_2_PRT_TYPE);
locals[0] = PRT_VALUE.PrtMkDefaultValue(Main.type_1_PRT_TYPE);
myHandle.cont.PushReturnTo(0, locals, myHandle.currentEvent, myHandle.currentArg);
goto execute_ROBOT_SCAN_LOCATIONS;
}
if ((actionFun == ActionOrFun._GetStaticGoals)) {
trace("<FunctionLog> Machine MotionPlanner-{0} executing Function GetStaticGoals\n", myHandle.instance);
locals = new PRT_VALUE_ARRAY[1];
locals[0] = PRT_VALUE.PrtMkDefaultValue(Main.type_7_PRT_TYPE);
myHandle.cont.PushReturnTo(0, locals, myHandle.currentEvent, myHandle.currentArg);
goto execute_GetStaticGoals;
}
if ((actionFun == ActionOrFun._GetStaticObstacles)) {
trace("<FunctionLog> Machine MotionPlanner-{0} executing Function GetStaticObstacles\n", myHandle.instance);
locals = new PRT_VALUE_ARRAY[1];
locals[0] = PRT_VALUE.PrtMkDefaultValue(Main.type_2_PRT_TYPE);
myHandle.cont.PushReturnTo(0, locals, myHandle.currentEvent, myHandle.currentArg);
goto execute_GetStaticObstacles;
}
if ((actionFun == ActionOrFun._MotionPlanner_ignore)) {
trace("<FunctionLog> Machine MotionPlanner-{0} executing Function ignore\n", myHandle.instance);
locals = null;
myHandle.cont.PushReturnTo(0, locals, myHandle.currentEvent, myHandle.currentArg);
goto execute_ignore;
}
if ((actionFun == ActionOrFun._MotionPlanner_KillMotionPlanner)) {
trace("<FunctionLog> Machine MotionPlanner-{0} executing Function KillMotionPlanner\n", myHandle.instance);
locals = null;
myHandle.cont.PushReturnTo(0, locals, myHandle.currentEvent, myHandle.currentArg);
goto execute_KillMotionPlanner;
}
if ((actionFun == ActionOrFun._MotionPlanner_ComputeMotionPlanAndSend)) {
trace("<FunctionLog> Machine MotionPlanner-{0} executing Function ComputeMotionPlanAndSend\n", myHandle.instance);
locals = new PRT_VALUE_ARRAY[3];
locals[2] = PRT_VALUE.PrtMkDefaultValue(Main.type_2_PRT_TYPE);
locals[1] = PRT_VALUE.PrtMkDefaultValue(Main.type_1_PRT_TYPE);
locals[0] = PRT_VALUE.PrtMkDefaultValue(Main.type_1_PRT_TYPE);
myHandle.cont.PushReturnTo(0, locals, myHandle.currentEvent, myHandle.currentArg);
goto execute_ComputeMotionPlanAndSend;
}
if ((actionFun == ActionOrFun._MotionPlanner_AnonFun0)) {
locals = null;
myHandle.cont.PushReturnTo(0, locals, myHandle.currentEvent, myHandle.currentArg);
goto execute_AnonFun0;
}
if ((actionFun == ActionOrFun._MotionPlanner_AnonFun1)) {
locals = null;
myHandle.cont.PushReturnTo(0, locals, myHandle.currentEvent, myHandle.currentArg);
goto execute_AnonFun1;
}
assert(false, "Internal error");

;


execute_ResetObstacle:
while (!doPop) {
Main.ResetObstacle(myHandle, myHandle.cont);
doPop = ProcessContinuation();

}
return;

;


execute_Seal:
while (!doPop) {
Main.Seal(myHandle, myHandle.cont);
doPop = ProcessContinuation();

}
return;

;


execute_Unseal:
while (!doPop) {
Main.Unseal(myHandle, myHandle.cont);
doPop = ProcessContinuation();

}
return;

;


execute_InitializeMotionPlanning:
while (!doPop) {
Main.InitializeMotionPlanning(myHandle, myHandle.cont);
doPop = ProcessContinuation();

}
return;

;


execute_CAT_CAGE_LOC:
while (!doPop) {
Main.CAT_CAGE_LOC(myHandle, myHandle.cont);
doPop = ProcessContinuation();

}
return;

;


execute_DOG_CAGE_LOC:
while (!doPop) {
Main.DOG_CAGE_LOC(myHandle, myHandle.cont);
doPop = ProcessContinuation();

}
return;

;


execute_MICE_CAGE_LOC:
while (!doPop) {
Main.MICE_CAGE_LOC(myHandle, myHandle.cont);
doPop = ProcessContinuation();

}
return;

;


execute_BATTERY_THRESHOLD:
while (!doPop) {
Main.BATTERY_THRESHOLD(myHandle, myHandle.cont);
doPop = ProcessContinuation();

}
return;

;


execute_DOG:
while (!doPop) {
Main.DOG(myHandle, myHandle.cont);
doPop = ProcessContinuation();

}
return;

;


execute_CAT:
while (!doPop) {
Main.CAT(myHandle, myHandle.cont);
doPop = ProcessContinuation();

}
return;

;


execute_MICE:
while (!doPop) {
Main.MICE(myHandle, myHandle.cont);
doPop = ProcessContinuation();

}
return;

;


execute_BATTERY_CHARGE_LOCATION:
while (!doPop) {
Main.BATTERY_CHARGE_LOCATION(myHandle, myHandle.cont);
doPop = ProcessContinuation();

}
return;

;


execute_ROBOT_START_STATE:
while (!doPop) {
Main.ROBOT_START_STATE(myHandle, myHandle.cont);
doPop = ProcessContinuation();

}
return;

;


execute_SIZE_OF_GRID:
while (!doPop) {
Main.SIZE_OF_GRID(myHandle, myHandle.cont);
doPop = ProcessContinuation();

}
return;

;


execute_ROBOT_SCAN_LOCATIONS:
while (!doPop) {
Main.ROBOT_SCAN_LOCATIONS(myHandle, myHandle.cont);
doPop = ProcessContinuation();

}
return;

;


execute_GetStaticGoals:
while (!doPop) {
Main.GetStaticGoals(myHandle, myHandle.cont);
doPop = ProcessContinuation();

}
return;

;


execute_GetStaticObstacles:
while (!doPop) {
Main.GetStaticObstacles(myHandle, myHandle.cont);
doPop = ProcessContinuation();

}
return;

;


execute_ignore:
while (!doPop) {
ignore(myHandle.cont);
doPop = ProcessContinuation();

}
return;

;


execute_KillMotionPlanner:
while (!doPop) {
KillMotionPlanner(myHandle.cont);
doPop = ProcessContinuation();

}
return;

;


execute_ComputeMotionPlanAndSend:
while (!doPop) {
ComputeMotionPlanAndSend(myHandle.cont);
doPop = ProcessContinuation();

}
return;

;


execute_AnonFun0:
while (!doPop) {
AnonFun0(myHandle.cont);
doPop = ProcessContinuation();

}
return;

;


execute_AnonFun1:
while (!doPop) {
AnonFun1(myHandle.cont);
doPop = ProcessContinuation();

}
return;

;

}
void ignore(Continuation entryCtxt) {
PRT_VALUE_ARRAY locals;
SM_EVENT currentEvent;
PRT_VALUE currentArg;
StackFrame retTo_19;

dummy:
retTo_19 = entryCtxt.PopReturnTo();
locals = retTo_19.locals;
currentEvent = retTo_19.currentEvent;
currentArg = retTo_19.currentArg;
if ((retTo_19.pc == 0)) {
goto start;
}
assert(false, "Internal error");

start:

;
entryCtxt.Return();
return;

;

}
void GetMotionPlan(Continuation entryCtxt) {
PRT_VALUE_ARRAY locals;
SM_EVENT currentEvent;
PRT_VALUE currentArg;
PRT_VALUE tmpTuple_9;
bool tmpVar_46;
PRT_VALUE tmpVar_47;
PRT_VALUE tmpTuple_10;
PRT_VALUE tmpVar_48;
PRT_VALUE_ARRAY argCloneVar_25;
StackFrame retTo_20;

dummy:
retTo_20 = entryCtxt.PopReturnTo();
locals = retTo_20.locals;
currentEvent = retTo_20.currentEvent;
currentArg = retTo_20.currentArg;
if ((retTo_20.pc == 0)) {
goto start;
}
if ((retTo_20.pc == 1)) {
goto GetMotionPlan_0;
}
assert(false, "Internal error");

start:
tmpTuple_9 = PRT_VALUE.PrtMkDefaultValue(Main.type_3_PRT_TYPE);
PRT_VALUE.PrtTupleSet(tmpTuple_9, 0, locals[2]);
PRT_VALUE.PrtTupleSet(tmpTuple_9, 1, locals[1]);
tmpVar_46 = PRT_VALUE.PrtMapExists(AllMotionPlans, tmpTuple_9);
tmpVar_47 = PRT_VALUE.PrtMkDefaultValue(Main.type_5_PRT_TYPE);
PRT_VALUE.PrtPrimSetBool(tmpVar_47, tmpVar_46);
if (!tmpVar_47.bl) {
goto GetMotionPlan_if_0_else;
}
tmpTuple_10 = PRT_VALUE.PrtMkDefaultValue(Main.type_3_PRT_TYPE);
PRT_VALUE.PrtTupleSet(tmpTuple_10, 0, locals[2]);
PRT_VALUE.PrtTupleSet(tmpTuple_10, 1, locals[1]);
tmpVar_48 = PRT_VALUE.PrtMapGet(AllMotionPlans, tmpTuple_10);
entryCtxt.ReturnVal(tmpVar_48);
return;
goto GetMotionPlan_if_0_end;
GetMotionPlan_if_0_else:
argCloneVar_25 = new PRT_VALUE_ARRAY[3];
argCloneVar_25[2] = PRT_VALUE.PrtCloneValue(locals[2]);
argCloneVar_25[1] = PRT_VALUE.PrtCloneValue(locals[1]);
argCloneVar_25[0] = PRT_VALUE.PrtCloneValue(Obstacles);
entryCtxt.PushReturnTo(0, argCloneVar_25, currentEvent, currentArg);

GetMotionPlan_0:
Main.InvokeMotionPlanner(myHandle, entryCtxt);

;
if ((entryCtxt.reason == ContinuationReason.Return)) {

} else {
entryCtxt.PushReturnTo(1, locals, currentEvent, currentArg);
return;

}

;

GetMotionPlan_if_0_end:

;

;
entryCtxt.Return();
return;

;

}
void KillMotionPlanner(Continuation entryCtxt) {
PRT_VALUE_ARRAY locals;
SM_EVENT currentEvent;
PRT_VALUE currentArg;
StackFrame retTo_21;

dummy:
retTo_21 = entryCtxt.PopReturnTo();
locals = retTo_21.locals;
currentEvent = retTo_21.currentEvent;
currentArg = retTo_21.currentArg;
if ((retTo_21.pc == 0)) {
goto start;
}
assert(false, "Internal error");

start:

;
entryCtxt.Return();
return;

;

}
void ComputeMotionPlanAndSend(Continuation entryCtxt) {
PRT_VALUE_ARRAY locals;
SM_EVENT currentEvent;
PRT_VALUE currentArg;
PRT_VALUE tmpVal_43;
PRT_VALUE tmpVal_44;
PRT_VALUE_ARRAY argCloneVar_26;
int tmpVar_49;
PRT_VALUE retVal_2;
PRT_VALUE tmp_64;
bool tmpVar_50;
PRT_VALUE tmpVar_51;
PRT_VALUE tmp_65;
PRT_VALUE tmp_66;
PRT_VALUE tmpPayload_15;
PRT_VALUE tmp_67;
PRT_VALUE tmpTuple_11;
PRT_VALUE tmpPayload_16;
StackFrame retTo_22;

dummy:
retTo_22 = entryCtxt.PopReturnTo();
locals = retTo_22.locals;
currentEvent = retTo_22.currentEvent;
currentArg = retTo_22.currentArg;
if ((retTo_22.pc == 0)) {
goto start;
}
if ((retTo_22.pc == 1)) {
goto ComputeMotionPlanAndSend_0;
}
if ((retTo_22.pc == 2)) {
goto ComputeMotionPlanAndSend_1;
}
if ((retTo_22.pc == 3)) {
goto ComputeMotionPlanAndSend_2;
}
assert(false, "Internal error");

start:
tmpVal_43 = PRT_VALUE.PrtTupleGet(currentArg, 1);
locals[1] = PRT_VALUE.PrtCloneValue(tmpVal_43);
tmpVal_44 = PRT_VALUE.PrtTupleGet(currentArg, 0);
locals[0] = PRT_VALUE.PrtCloneValue(tmpVal_44);
argCloneVar_26 = new PRT_VALUE_ARRAY[3];
argCloneVar_26[2] = PRT_VALUE.PrtCloneValue(locals[0]);
argCloneVar_26[1] = PRT_VALUE.PrtCloneValue(locals[1]);
argCloneVar_26[0] = PRT_VALUE.PrtCloneValue(Obstacles);
entryCtxt.PushReturnTo(0, argCloneVar_26, currentEvent, currentArg);

ComputeMotionPlanAndSend_0:
GetMotionPlan(entryCtxt);

;
if ((entryCtxt.reason == ContinuationReason.Return)) {
locals[2] = PRT_VALUE.PrtCloneValue(entryCtxt.retVal);

} else {
entryCtxt.PushReturnTo(1, locals, currentEvent, currentArg);
return;

}
tmpVar_49 = PRT_VALUE.PrtSeqSizeOf(locals[2]);
retVal_2 = PRT_VALUE.PrtMkDefaultValue(Main.type_1_PRT_TYPE);
PRT_VALUE.PrtPrimSetInt(retVal_2, tmpVar_49);
tmp_64 = PRT_VALUE.PrtMkDefaultValue(Main.type_1_PRT_TYPE);
PRT_VALUE.PrtPrimSetInt(tmp_64, 0);
tmpVar_50 = PRT_VALUE.PrtIsEqualValue(retVal_2, tmp_64);
tmpVar_51 = PRT_VALUE.PrtMkDefaultValue(Main.type_5_PRT_TYPE);
PRT_VALUE.PrtPrimSetBool(tmpVar_51, tmpVar_50);
if (!tmpVar_51.bl) {
goto ComputeMotionPlanAndSend_if_0_else;
}
tmp_65 = PRT_VALUE.PrtMkDefaultValue(Main.type_5_PRT_TYPE);
PRT_VALUE.PrtPrimSetBool(tmp_65, false);
assert(tmp_65.bl, "(73, 4): Assert failed");
tmp_66 = PRT_VALUE.PrtMkDefaultValue(Main.type_12_PRT_TYPE);
PRT_VALUE.PrtPrimSetEvent(tmp_66, Main.FailureToComputePlan_SM_EVENT);
assert((RobotTP.mach != null), "Target of send must be non-null");
tmpPayload_15 = PRT_VALUE.PrtMkDefaultValue(Main.type_0_PRT_TYPE);
Main.InvokeMachine_Prop_1(tmp_66.ev, tmpPayload_15);
Main.InvokeMachine_Prop_2(tmp_66.ev, tmpPayload_15);
Main.InvokeMachine_Prop_6(tmp_66.ev, tmpPayload_15);
Main.InvokeMachine_Prop_7(tmp_66.ev, tmpPayload_15);
Main.InvokeMachine_Prop_8(tmp_66.ev, tmpPayload_15);
Main.InvokeMachine_Prop_9(tmp_66.ev, tmpPayload_15);
Main.InvokeMachine_Prop_3(tmp_66.ev, tmpPayload_15);
Main.InvokeMachine_Prop_10a(tmp_66.ev, tmpPayload_15);
Main.InvokeMachine_Prop_10b(tmp_66.ev, tmpPayload_15);
Main.InvokeMachine_Prop_10c(tmp_66.ev, tmpPayload_15);
RobotTP.mach.EnqueueEvent(tmp_66.ev, tmpPayload_15, myHandle);
entryCtxt.Send(2, locals, currentEvent, currentArg);
return;

ComputeMotionPlanAndSend_1:

;
goto ComputeMotionPlanAndSend_if_0_end;
ComputeMotionPlanAndSend_if_0_else:
tmp_67 = PRT_VALUE.PrtMkDefaultValue(Main.type_12_PRT_TYPE);
PRT_VALUE.PrtPrimSetEvent(tmp_67, Main.MotionPlanFor_SM_EVENT);
tmpTuple_11 = PRT_VALUE.PrtMkDefaultValue(Main.type_17_PRT_TYPE);
PRT_VALUE.PrtTupleSet(tmpTuple_11, 0, locals[0]);
PRT_VALUE.PrtTupleSet(tmpTuple_11, 1, locals[1]);
PRT_VALUE.PrtTupleSet(tmpTuple_11, 2, locals[2]);
assert((RobotTP.mach != null), "Target of send must be non-null");
tmpPayload_16 = PRT_VALUE.PrtCloneValue(tmpTuple_11);
Main.InvokeMachine_Prop_1(tmp_67.ev, tmpPayload_16);
Main.InvokeMachine_Prop_2(tmp_67.ev, tmpPayload_16);
Main.InvokeMachine_Prop_6(tmp_67.ev, tmpPayload_16);
Main.InvokeMachine_Prop_7(tmp_67.ev, tmpPayload_16);
Main.InvokeMachine_Prop_8(tmp_67.ev, tmpPayload_16);
Main.InvokeMachine_Prop_9(tmp_67.ev, tmpPayload_16);
Main.InvokeMachine_Prop_3(tmp_67.ev, tmpPayload_16);
Main.InvokeMachine_Prop_10a(tmp_67.ev, tmpPayload_16);
Main.InvokeMachine_Prop_10b(tmp_67.ev, tmpPayload_16);
Main.InvokeMachine_Prop_10c(tmp_67.ev, tmpPayload_16);
RobotTP.mach.EnqueueEvent(tmp_67.ev, tmpPayload_16, myHandle);
entryCtxt.Send(3, locals, currentEvent, currentArg);
return;

ComputeMotionPlanAndSend_2:

;

;

ComputeMotionPlanAndSend_if_0_end:

;

;
entryCtxt.Return();
return;

;

}
void AnonFun0(Continuation entryCtxt) {
PRT_VALUE_ARRAY locals;
SM_EVENT currentEvent;
PRT_VALUE currentArg;
StackFrame retTo_23;

dummy:
retTo_23 = entryCtxt.PopReturnTo();
locals = retTo_23.locals;
currentEvent = retTo_23.currentEvent;
currentArg = retTo_23.currentArg;
if ((retTo_23.pc == 0)) {
goto start;
}
assert(false, "Internal error");

start:

;
entryCtxt.Return();
return;

;

}
void AnonFun1(Continuation entryCtxt) {
PRT_VALUE_ARRAY locals;
SM_EVENT currentEvent;
PRT_VALUE currentArg;
PRT_VALUE tmpVar_52;
PRT_VALUE_ARRAY argCloneVar_27;
PRT_VALUE_ARRAY argCloneVar_28;
PRT_VALUE tmp_68;
PRT_VALUE tmpPayload_17;
StackFrame retTo_24;

dummy:
retTo_24 = entryCtxt.PopReturnTo();
locals = retTo_24.locals;
currentEvent = retTo_24.currentEvent;
currentArg = retTo_24.currentArg;
if ((retTo_24.pc == 0)) {
goto start;
}
if ((retTo_24.pc == 1)) {
goto AnonFun1_6;
}
if ((retTo_24.pc == 2)) {
goto AnonFun1_7;
}
assert(false, "Internal error");

start:
tmpVar_52 = PRT_VALUE.PrtCastValue(currentArg, Main.type_8_PRT_TYPE);
RobotTP = PRT_VALUE.PrtCloneValue(tmpVar_52);
argCloneVar_27 = new PRT_VALUE_ARRAY[1];
argCloneVar_27[0] = PRT_VALUE.PrtMkDefaultValue(Main.type_2_PRT_TYPE);
entryCtxt.PushReturnTo(0, argCloneVar_27, currentEvent, currentArg);

AnonFun1_6:
Main.GetStaticObstacles(myHandle, entryCtxt);

;
if ((entryCtxt.reason == ContinuationReason.Return)) {
Obstacles = PRT_VALUE.PrtCloneValue(entryCtxt.retVal);

} else {
entryCtxt.PushReturnTo(1, locals, currentEvent, currentArg);
return;

}
argCloneVar_28 = new PRT_VALUE_ARRAY[4];
argCloneVar_28[3] = PRT_VALUE.PrtMkDefaultValue(Main.type_1_PRT_TYPE);
argCloneVar_28[2] = PRT_VALUE.PrtMkDefaultValue(Main.type_2_PRT_TYPE);
argCloneVar_28[1] = PRT_VALUE.PrtMkDefaultValue(Main.type_2_PRT_TYPE);
argCloneVar_28[0] = PRT_VALUE.PrtMkDefaultValue(Main.type_4_PRT_TYPE);
entryCtxt.PushReturnTo(0, argCloneVar_28, currentEvent, currentArg);

AnonFun1_7:
Main.InitializeMotionPlanning(myHandle, entryCtxt);

;
if ((entryCtxt.reason == ContinuationReason.Return)) {
AllMotionPlans = PRT_VALUE.PrtCloneValue(entryCtxt.retVal);

} else {
entryCtxt.PushReturnTo(2, locals, currentEvent, currentArg);
return;

}
tmp_68 = PRT_VALUE.PrtMkDefaultValue(Main.type_12_PRT_TYPE);
PRT_VALUE.PrtPrimSetEvent(tmp_68, Main.local_SM_EVENT);
tmpPayload_17 = PRT_VALUE.PrtMkDefaultValue(Main.type_0_PRT_TYPE);
assert((tmp_68.ev != null), "(38, 4): Raised event must be non-null");
trace("<RaiseLog> Machine MotionPlanner-{0} raised Event {1}\n", myHandle.instance, tmp_68.ev.name);
myHandle.currentEvent = tmp_68.ev;
myHandle.currentArg = tmpPayload_17;
entryCtxt.Raise();
return;

;
entryCtxt.Return();
return;

;

}
};

class MACHINE_MotionPlanExecutor{
PRT_VALUE RState;
PRT_VALUE RobotTP;
PRT_VALUE currentLocation;
PRT_VALUE currentPlan;
SM_HANDLE myHandle;
void MotionPlanExecutor_Init_CalculateDeferredAndActionSet() {

dummy:
myHandle.stack.deferredSet = new SM_EVENT_SET;
myHandle.stack.actionSet = new SM_EVENT_SET;
myHandle.stack.AddStackDeferredSet(myHandle.stack.deferredSet);
myHandle.stack.deferredSet = (myHandle.stack.deferredSet - Main.local_SM_EVENT);
myHandle.stack.AddStackActionSet(myHandle.stack.actionSet);
myHandle.stack.actionSet = (myHandle.stack.actionSet - Main.local_SM_EVENT);
myHandle.stack.es = new SM_EVENT_ARRAY[0];
myHandle.stack.as = new ActionOrFun_ARRAY[0];

;

}
void MotionPlanExecutor_WaitForCommands_CalculateDeferredAndActionSet() {

dummy:
myHandle.stack.deferredSet = new SM_EVENT_SET;
myHandle.stack.actionSet = new SM_EVENT_SET;
myHandle.stack.AddStackDeferredSet(myHandle.stack.deferredSet);
myHandle.stack.deferredSet = (myHandle.stack.deferredSet - Main.CancelPlan_SM_EVENT);
myHandle.stack.deferredSet = (myHandle.stack.deferredSet - Main.ExecutePlan_SM_EVENT);
myHandle.stack.AddStackActionSet(myHandle.stack.actionSet);
myHandle.stack.actionSet = (myHandle.stack.actionSet + Main.CancelPlan_SM_EVENT);
myHandle.stack.actionSet = (myHandle.stack.actionSet - Main.ExecutePlan_SM_EVENT);
myHandle.stack.es = new SM_EVENT_ARRAY[1];
myHandle.stack.as = new ActionOrFun_ARRAY[1];
myHandle.stack.es[0] = Main.CancelPlan_SM_EVENT;
myHandle.stack.as[0] = ActionOrFun._MotionPlanExecutor_ignore;

;

}
void MotionPlanExecutor_StartExecutingPlan_CalculateDeferredAndActionSet() {

dummy:
myHandle.stack.deferredSet = new SM_EVENT_SET;
myHandle.stack.actionSet = new SM_EVENT_SET;
myHandle.stack.AddStackDeferredSet(myHandle.stack.deferredSet);
myHandle.stack.deferredSet = (myHandle.stack.deferredSet - Main.local_SM_EVENT);
myHandle.stack.deferredSet = (myHandle.stack.deferredSet - Main.done_SM_EVENT);
myHandle.stack.deferredSet = (myHandle.stack.deferredSet - Main.CancelPlan_SM_EVENT);
myHandle.stack.AddStackActionSet(myHandle.stack.actionSet);
myHandle.stack.actionSet = (myHandle.stack.actionSet - Main.local_SM_EVENT);
myHandle.stack.actionSet = (myHandle.stack.actionSet - Main.done_SM_EVENT);
myHandle.stack.actionSet = (myHandle.stack.actionSet - Main.CancelPlan_SM_EVENT);
myHandle.stack.es = new SM_EVENT_ARRAY[0];
myHandle.stack.as = new ActionOrFun_ARRAY[0];

;

}
void Start() {

dummy:
Run(Main.MotionPlanExecutor_Init_SM_STATE);
if ((myHandle.currentEvent == Main.halt_SM_EVENT)) {
myHandle.stack = null;
myHandle.buffer = null;
myHandle.currentArg = null;
SM_HANDLE.halted = (SM_HANDLE.halted + myHandle);
SM_HANDLE.enabled = (SM_HANDLE.enabled - myHandle);
return;

}
trace("<StateLog> Unhandled event exception by machine MotionPlanExecutor-{0}\n", myHandle.instance);
assert(false, "Unhandled event exception by machine MotionPlanExecutor");

;

}
void Run(SM_STATE state) {
bool doPop;
bool hasNullTransitionOrAction;

init:
myHandle.Push();
myHandle.stack.state = state;
doPop = RunHelper(true);
while (!doPop) {
hasNullTransitionOrAction = myHandle.stack.HasNullTransitionOrAction();
myHandle.DequeueEvent(hasNullTransitionOrAction);
doPop = RunHelper(false);

}
myHandle.Pop();

;

}
void TraceEnterState(SM_STATE state) {

init:
if ((state == Main.MotionPlanExecutor_Init_SM_STATE)) {
trace("<StateLog> Machine MotionPlanExecutor-{0} entering State Init\n", myHandle.instance);
return;

}
if ((state == Main.MotionPlanExecutor_WaitForCommands_SM_STATE)) {
trace("<StateLog> Machine MotionPlanExecutor-{0} entering State WaitForCommands\n", myHandle.instance);
return;

}
if ((state == Main.MotionPlanExecutor_StartExecutingPlan_SM_STATE)) {
trace("<StateLog> Machine MotionPlanExecutor-{0} entering State StartExecutingPlan\n", myHandle.instance);
return;

}
assert(false, "Internal error");

;

}
void TraceExitState(SM_STATE state) {

init:
if ((state == Main.MotionPlanExecutor_Init_SM_STATE)) {
trace("<StateLog> Machine MotionPlanExecutor-{0} exiting State Init\n", myHandle.instance);
return;

}
if ((state == Main.MotionPlanExecutor_WaitForCommands_SM_STATE)) {
trace("<StateLog> Machine MotionPlanExecutor-{0} exiting State WaitForCommands\n", myHandle.instance);
return;

}
if ((state == Main.MotionPlanExecutor_StartExecutingPlan_SM_STATE)) {
trace("<StateLog> Machine MotionPlanExecutor-{0} exiting State StartExecutingPlan\n", myHandle.instance);
return;

}
assert(false, "Internal error");

;

}
void CalculateDeferredAndActionSet(SM_STATE state) {

init:
if ((state == Main.MotionPlanExecutor_Init_SM_STATE)) {
MotionPlanExecutor_Init_CalculateDeferredAndActionSet();
return;

}
if ((state == Main.MotionPlanExecutor_WaitForCommands_SM_STATE)) {
MotionPlanExecutor_WaitForCommands_CalculateDeferredAndActionSet();
return;

}
if ((state == Main.MotionPlanExecutor_StartExecutingPlan_SM_STATE)) {
MotionPlanExecutor_StartExecutingPlan_CalculateDeferredAndActionSet();
return;

}
assert(false, "Internal error");

;

}
bool RunHelper(bool start) {
SM_STATE state;
SM_TRANSITION transition;
ActionOrFun actionFun;

init:
state = myHandle.stack.state;
if (start) {
goto enter;
} else {
goto handle;
}

;


enter:
state = myHandle.stack.state;
TraceEnterState(state);
CalculateDeferredAndActionSet(state);
actionFun = state.entryFun;

;


execute:
ReentrancyHelper(actionFun);
if ((myHandle.cont.reason == ContinuationReason.Raise)) {
goto handle;
}
myHandle.currentEvent = null;
myHandle.currentArg = PRT_VALUE.PrtMkDefaultValue(Main.type_0_PRT_TYPE);
if ((myHandle.cont.reason != ContinuationReason.Pop)) {
return false;

}
TraceExitState(state);
ReentrancyHelper(state.exitFun);
return true;

;


handle:
if ((myHandle.currentEvent in myHandle.stack.actionSet)) {
actionFun = myHandle.stack.Find(myHandle.currentEvent);
goto execute;
}
transition = state.FindPushTransition(myHandle.currentEvent);
if ((transition != null)) {
Run(transition.to);
if ((myHandle.currentEvent == null)) {
return false;

} else {
goto handle;
}

}
TraceExitState(state);
ReentrancyHelper(state.exitFun);
transition = state.FindTransition(myHandle.currentEvent);
if ((transition == null)) {
return true;

}
ReentrancyHelper(transition.fun);
myHandle.stack.state = transition.to;
state = myHandle.stack.state;
goto enter;
;

}
bool ProcessContinuation() {
bool doPop;

init:
if ((myHandle.cont.reason == ContinuationReason.Return)) {
return true;

}
if ((myHandle.cont.reason == ContinuationReason.Pop)) {
return true;

}
if ((myHandle.cont.reason == ContinuationReason.Raise)) {
return true;

}
if ((myHandle.cont.reason == ContinuationReason.Receive)) {
myHandle.DequeueEvent(false);
return false;

}
if ((myHandle.cont.reason == ContinuationReason.Nondet)) {
myHandle.cont.nondet = choose(bool);
return false;

}
if ((myHandle.cont.reason == ContinuationReason.NewMachine)) {
yield;
return false;

}
if ((myHandle.cont.reason == ContinuationReason.Send)) {
yield;
return false;

}

;

}
void ReentrancyHelper(ActionOrFun actionFun) {
PRT_VALUE_ARRAY locals;
bool doPop;

init:
doPop = false;
myHandle.cont.Reset();
if ((actionFun == ActionOrFun._ResetObstacle)) {
trace("<FunctionLog> Machine MotionPlanExecutor-{0} executing Function ResetObstacle\n", myHandle.instance);
locals = null;
myHandle.cont.PushReturnTo(0, locals, myHandle.currentEvent, myHandle.currentArg);
goto execute_ResetObstacle;
}
if ((actionFun == ActionOrFun._Seal)) {
trace("<FunctionLog> Machine MotionPlanExecutor-{0} executing Function Seal\n", myHandle.instance);
locals = null;
myHandle.cont.PushReturnTo(0, locals, myHandle.currentEvent, myHandle.currentArg);
goto execute_Seal;
}
if ((actionFun == ActionOrFun._Unseal)) {
trace("<FunctionLog> Machine MotionPlanExecutor-{0} executing Function Unseal\n", myHandle.instance);
locals = null;
myHandle.cont.PushReturnTo(0, locals, myHandle.currentEvent, myHandle.currentArg);
goto execute_Unseal;
}
if ((actionFun == ActionOrFun._InitializeMotionPlanning)) {
trace("<FunctionLog> Machine MotionPlanExecutor-{0} executing Function InitializeMotionPlanning\n", myHandle.instance);
locals = new PRT_VALUE_ARRAY[4];
locals[3] = PRT_VALUE.PrtMkDefaultValue(Main.type_1_PRT_TYPE);
locals[2] = PRT_VALUE.PrtMkDefaultValue(Main.type_2_PRT_TYPE);
locals[1] = PRT_VALUE.PrtMkDefaultValue(Main.type_2_PRT_TYPE);
locals[0] = PRT_VALUE.PrtMkDefaultValue(Main.type_4_PRT_TYPE);
myHandle.cont.PushReturnTo(0, locals, myHandle.currentEvent, myHandle.currentArg);
goto execute_InitializeMotionPlanning;
}
if ((actionFun == ActionOrFun._CAT_CAGE_LOC)) {
trace("<FunctionLog> Machine MotionPlanExecutor-{0} executing Function CAT_CAGE_LOC\n", myHandle.instance);
locals = null;
myHandle.cont.PushReturnTo(0, locals, myHandle.currentEvent, myHandle.currentArg);
goto execute_CAT_CAGE_LOC;
}
if ((actionFun == ActionOrFun._DOG_CAGE_LOC)) {
trace("<FunctionLog> Machine MotionPlanExecutor-{0} executing Function DOG_CAGE_LOC\n", myHandle.instance);
locals = null;
myHandle.cont.PushReturnTo(0, locals, myHandle.currentEvent, myHandle.currentArg);
goto execute_DOG_CAGE_LOC;
}
if ((actionFun == ActionOrFun._MICE_CAGE_LOC)) {
trace("<FunctionLog> Machine MotionPlanExecutor-{0} executing Function MICE_CAGE_LOC\n", myHandle.instance);
locals = null;
myHandle.cont.PushReturnTo(0, locals, myHandle.currentEvent, myHandle.currentArg);
goto execute_MICE_CAGE_LOC;
}
if ((actionFun == ActionOrFun._BATTERY_THRESHOLD)) {
trace("<FunctionLog> Machine MotionPlanExecutor-{0} executing Function BATTERY_THRESHOLD\n", myHandle.instance);
locals = null;
myHandle.cont.PushReturnTo(0, locals, myHandle.currentEvent, myHandle.currentArg);
goto execute_BATTERY_THRESHOLD;
}
if ((actionFun == ActionOrFun._DOG)) {
trace("<FunctionLog> Machine MotionPlanExecutor-{0} executing Function DOG\n", myHandle.instance);
locals = null;
myHandle.cont.PushReturnTo(0, locals, myHandle.currentEvent, myHandle.currentArg);
goto execute_DOG;
}
if ((actionFun == ActionOrFun._CAT)) {
trace("<FunctionLog> Machine MotionPlanExecutor-{0} executing Function CAT\n", myHandle.instance);
locals = null;
myHandle.cont.PushReturnTo(0, locals, myHandle.currentEvent, myHandle.currentArg);
goto execute_CAT;
}
if ((actionFun == ActionOrFun._MICE)) {
trace("<FunctionLog> Machine MotionPlanExecutor-{0} executing Function MICE\n", myHandle.instance);
locals = null;
myHandle.cont.PushReturnTo(0, locals, myHandle.currentEvent, myHandle.currentArg);
goto execute_MICE;
}
if ((actionFun == ActionOrFun._BATTERY_CHARGE_LOCATION)) {
trace("<FunctionLog> Machine MotionPlanExecutor-{0} executing Function BATTERY_CHARGE_LOCATION\n", myHandle.instance);
locals = null;
myHandle.cont.PushReturnTo(0, locals, myHandle.currentEvent, myHandle.currentArg);
goto execute_BATTERY_CHARGE_LOCATION;
}
if ((actionFun == ActionOrFun._ROBOT_START_STATE)) {
trace("<FunctionLog> Machine MotionPlanExecutor-{0} executing Function ROBOT_START_STATE\n", myHandle.instance);
locals = null;
myHandle.cont.PushReturnTo(0, locals, myHandle.currentEvent, myHandle.currentArg);
goto execute_ROBOT_START_STATE;
}
if ((actionFun == ActionOrFun._SIZE_OF_GRID)) {
trace("<FunctionLog> Machine MotionPlanExecutor-{0} executing Function SIZE_OF_GRID\n", myHandle.instance);
locals = null;
myHandle.cont.PushReturnTo(0, locals, myHandle.currentEvent, myHandle.currentArg);
goto execute_SIZE_OF_GRID;
}
if ((actionFun == ActionOrFun._ROBOT_SCAN_LOCATIONS)) {
trace("<FunctionLog> Machine MotionPlanExecutor-{0} executing Function ROBOT_SCAN_LOCATIONS\n", myHandle.instance);
locals = new PRT_VALUE_ARRAY[3];
locals[2] = PRT_VALUE.PrtMkDefaultValue(Main.type_2_PRT_TYPE);
locals[1] = PRT_VALUE.PrtMkDefaultValue(Main.type_2_PRT_TYPE);
locals[0] = PRT_VALUE.PrtMkDefaultValue(Main.type_1_PRT_TYPE);
myHandle.cont.PushReturnTo(0, locals, myHandle.currentEvent, myHandle.currentArg);
goto execute_ROBOT_SCAN_LOCATIONS;
}
if ((actionFun == ActionOrFun._GetStaticGoals)) {
trace("<FunctionLog> Machine MotionPlanExecutor-{0} executing Function GetStaticGoals\n", myHandle.instance);
locals = new PRT_VALUE_ARRAY[1];
locals[0] = PRT_VALUE.PrtMkDefaultValue(Main.type_7_PRT_TYPE);
myHandle.cont.PushReturnTo(0, locals, myHandle.currentEvent, myHandle.currentArg);
goto execute_GetStaticGoals;
}
if ((actionFun == ActionOrFun._GetStaticObstacles)) {
trace("<FunctionLog> Machine MotionPlanExecutor-{0} executing Function GetStaticObstacles\n", myHandle.instance);
locals = new PRT_VALUE_ARRAY[1];
locals[0] = PRT_VALUE.PrtMkDefaultValue(Main.type_2_PRT_TYPE);
myHandle.cont.PushReturnTo(0, locals, myHandle.currentEvent, myHandle.currentArg);
goto execute_GetStaticObstacles;
}
if ((actionFun == ActionOrFun._MotionPlanExecutor_ignore)) {
trace("<FunctionLog> Machine MotionPlanExecutor-{0} executing Function ignore\n", myHandle.instance);
locals = null;
myHandle.cont.PushReturnTo(0, locals, myHandle.currentEvent, myHandle.currentArg);
goto execute_ignore;
}
if ((actionFun == ActionOrFun._MotionPlanExecutor_AnonFun0)) {
locals = null;
myHandle.cont.PushReturnTo(0, locals, myHandle.currentEvent, myHandle.currentArg);
goto execute_AnonFun0;
}
if ((actionFun == ActionOrFun._MotionPlanExecutor_AnonFun1)) {
locals = null;
myHandle.cont.PushReturnTo(0, locals, myHandle.currentEvent, myHandle.currentArg);
goto execute_AnonFun1;
}
if ((actionFun == ActionOrFun._MotionPlanExecutor_AnonFun2)) {
locals = null;
myHandle.cont.PushReturnTo(0, locals, myHandle.currentEvent, myHandle.currentArg);
goto execute_AnonFun2;
}
if ((actionFun == ActionOrFun._MotionPlanExecutor_AnonFun3)) {
locals = null;
myHandle.cont.PushReturnTo(0, locals, myHandle.currentEvent, myHandle.currentArg);
goto execute_AnonFun3;
}
if ((actionFun == ActionOrFun._MotionPlanExecutor_AnonFun4)) {
locals = null;
myHandle.cont.PushReturnTo(0, locals, myHandle.currentEvent, myHandle.currentArg);
goto execute_AnonFun4;
}
if ((actionFun == ActionOrFun._MotionPlanExecutor_AnonFun5)) {
locals = null;
myHandle.cont.PushReturnTo(0, locals, myHandle.currentEvent, myHandle.currentArg);
goto execute_AnonFun5;
}
assert(false, "Internal error");

;


execute_ResetObstacle:
while (!doPop) {
Main.ResetObstacle(myHandle, myHandle.cont);
doPop = ProcessContinuation();

}
return;

;


execute_Seal:
while (!doPop) {
Main.Seal(myHandle, myHandle.cont);
doPop = ProcessContinuation();

}
return;

;


execute_Unseal:
while (!doPop) {
Main.Unseal(myHandle, myHandle.cont);
doPop = ProcessContinuation();

}
return;

;


execute_InitializeMotionPlanning:
while (!doPop) {
Main.InitializeMotionPlanning(myHandle, myHandle.cont);
doPop = ProcessContinuation();

}
return;

;


execute_CAT_CAGE_LOC:
while (!doPop) {
Main.CAT_CAGE_LOC(myHandle, myHandle.cont);
doPop = ProcessContinuation();

}
return;

;


execute_DOG_CAGE_LOC:
while (!doPop) {
Main.DOG_CAGE_LOC(myHandle, myHandle.cont);
doPop = ProcessContinuation();

}
return;

;


execute_MICE_CAGE_LOC:
while (!doPop) {
Main.MICE_CAGE_LOC(myHandle, myHandle.cont);
doPop = ProcessContinuation();

}
return;

;


execute_BATTERY_THRESHOLD:
while (!doPop) {
Main.BATTERY_THRESHOLD(myHandle, myHandle.cont);
doPop = ProcessContinuation();

}
return;

;


execute_DOG:
while (!doPop) {
Main.DOG(myHandle, myHandle.cont);
doPop = ProcessContinuation();

}
return;

;


execute_CAT:
while (!doPop) {
Main.CAT(myHandle, myHandle.cont);
doPop = ProcessContinuation();

}
return;

;


execute_MICE:
while (!doPop) {
Main.MICE(myHandle, myHandle.cont);
doPop = ProcessContinuation();

}
return;

;


execute_BATTERY_CHARGE_LOCATION:
while (!doPop) {
Main.BATTERY_CHARGE_LOCATION(myHandle, myHandle.cont);
doPop = ProcessContinuation();

}
return;

;


execute_ROBOT_START_STATE:
while (!doPop) {
Main.ROBOT_START_STATE(myHandle, myHandle.cont);
doPop = ProcessContinuation();

}
return;

;


execute_SIZE_OF_GRID:
while (!doPop) {
Main.SIZE_OF_GRID(myHandle, myHandle.cont);
doPop = ProcessContinuation();

}
return;

;


execute_ROBOT_SCAN_LOCATIONS:
while (!doPop) {
Main.ROBOT_SCAN_LOCATIONS(myHandle, myHandle.cont);
doPop = ProcessContinuation();

}
return;

;


execute_GetStaticGoals:
while (!doPop) {
Main.GetStaticGoals(myHandle, myHandle.cont);
doPop = ProcessContinuation();

}
return;

;


execute_GetStaticObstacles:
while (!doPop) {
Main.GetStaticObstacles(myHandle, myHandle.cont);
doPop = ProcessContinuation();

}
return;

;


execute_ignore:
while (!doPop) {
ignore(myHandle.cont);
doPop = ProcessContinuation();

}
return;

;


execute_AnonFun0:
while (!doPop) {
AnonFun0(myHandle.cont);
doPop = ProcessContinuation();

}
return;

;


execute_AnonFun1:
while (!doPop) {
AnonFun1(myHandle.cont);
doPop = ProcessContinuation();

}
return;

;


execute_AnonFun2:
while (!doPop) {
AnonFun2(myHandle.cont);
doPop = ProcessContinuation();

}
return;

;


execute_AnonFun3:
while (!doPop) {
AnonFun3(myHandle.cont);
doPop = ProcessContinuation();

}
return;

;


execute_AnonFun4:
while (!doPop) {
AnonFun4(myHandle.cont);
doPop = ProcessContinuation();

}
return;

;


execute_AnonFun5:
while (!doPop) {
AnonFun5(myHandle.cont);
doPop = ProcessContinuation();

}
return;

;

}
void ignore(Continuation entryCtxt) {
PRT_VALUE_ARRAY locals;
SM_EVENT currentEvent;
PRT_VALUE currentArg;
StackFrame retTo_25;

dummy:
retTo_25 = entryCtxt.PopReturnTo();
locals = retTo_25.locals;
currentEvent = retTo_25.currentEvent;
currentArg = retTo_25.currentArg;
if ((retTo_25.pc == 0)) {
goto start;
}
assert(false, "Internal error");

start:

;
entryCtxt.Return();
return;

;

}
void GotoLocation(Continuation entryCtxt) {
PRT_VALUE_ARRAY locals;
SM_EVENT currentEvent;
PRT_VALUE currentArg;
PRT_VALUE tmp_69;
PRT_VALUE tmp_70;
PRT_VALUE tmpTuple_12;
PRT_VALUE tmpPayload_18;
PRT_VALUE_ARRAY argCloneVar_29;
StackFrame retTo_26;

dummy:
retTo_26 = entryCtxt.PopReturnTo();
locals = retTo_26.locals;
currentEvent = retTo_26.currentEvent;
currentArg = retTo_26.currentArg;
if ((retTo_26.pc == 0)) {
goto start;
}
if ((retTo_26.pc == 1)) {
goto GotoLocation_0;
}
if ((retTo_26.pc == 2)) {
goto GotoLocation_1;
}
assert(false, "Internal error");

start:
currentLocation = PRT_VALUE.PrtCloneValue(locals[0]);
tmp_69 = PRT_VALUE.PrtMkDefaultValue(Main.type_12_PRT_TYPE);
PRT_VALUE.PrtPrimSetEvent(tmp_69, Main.UpdateRobotState_SM_EVENT);
tmp_70 = PRT_VALUE.PrtMkDefaultValue(Main.type_1_PRT_TYPE);
PRT_VALUE.PrtPrimSetInt(tmp_70, 0);
tmpTuple_12 = PRT_VALUE.PrtMkDefaultValue(Main.type_9_PRT_TYPE);
PRT_VALUE.PrtTupleSet(tmpTuple_12, 0, locals[0]);
PRT_VALUE.PrtTupleSet(tmpTuple_12, 1, tmp_70);
assert((RState.mach != null), "Target of send must be non-null");
tmpPayload_18 = PRT_VALUE.PrtCloneValue(tmpTuple_12);
Main.InvokeMachine_Prop_1(tmp_69.ev, tmpPayload_18);
Main.InvokeMachine_Prop_2(tmp_69.ev, tmpPayload_18);
Main.InvokeMachine_Prop_6(tmp_69.ev, tmpPayload_18);
Main.InvokeMachine_Prop_7(tmp_69.ev, tmpPayload_18);
Main.InvokeMachine_Prop_8(tmp_69.ev, tmpPayload_18);
Main.InvokeMachine_Prop_9(tmp_69.ev, tmpPayload_18);
Main.InvokeMachine_Prop_3(tmp_69.ev, tmpPayload_18);
Main.InvokeMachine_Prop_10a(tmp_69.ev, tmpPayload_18);
Main.InvokeMachine_Prop_10b(tmp_69.ev, tmpPayload_18);
Main.InvokeMachine_Prop_10c(tmp_69.ev, tmpPayload_18);
RState.mach.EnqueueEvent(tmp_69.ev, tmpPayload_18, myHandle);
entryCtxt.Send(1, locals, currentEvent, currentArg);
return;

GotoLocation_0:

;
argCloneVar_29 = new PRT_VALUE_ARRAY[1];
argCloneVar_29[0] = PRT_VALUE.PrtCloneValue(currentLocation);
PRT_VALUE.Print(argCloneVar_29[0]);
trace("\n");
entryCtxt.PushReturnTo(0, argCloneVar_29, currentEvent, currentArg);

GotoLocation_1:
Main.PRINT(myHandle, entryCtxt);

;
if ((entryCtxt.reason == ContinuationReason.Return)) {

} else {
entryCtxt.PushReturnTo(2, locals, currentEvent, currentArg);
return;

}

;
entryCtxt.Return();
return;

;

}
void AnonFun0(Continuation entryCtxt) {
PRT_VALUE_ARRAY locals;
SM_EVENT currentEvent;
PRT_VALUE currentArg;
StackFrame retTo_27;

dummy:
retTo_27 = entryCtxt.PopReturnTo();
locals = retTo_27.locals;
currentEvent = retTo_27.currentEvent;
currentArg = retTo_27.currentArg;
if ((retTo_27.pc == 0)) {
goto start;
}
assert(false, "Internal error");

start:

;
entryCtxt.Return();
return;

;

}
void AnonFun1(Continuation entryCtxt) {
PRT_VALUE_ARRAY locals;
SM_EVENT currentEvent;
PRT_VALUE currentArg;
PRT_VALUE tmpVar_53;
PRT_VALUE tmpVal_45;
PRT_VALUE tmpVar_54;
PRT_VALUE tmpVal_46;
PRT_VALUE tmpVar_55;
PRT_VALUE tmpVal_47;
PRT_VALUE tmp_71;
PRT_VALUE tmpPayload_19;
StackFrame retTo_28;

dummy:
retTo_28 = entryCtxt.PopReturnTo();
locals = retTo_28.locals;
currentEvent = retTo_28.currentEvent;
currentArg = retTo_28.currentArg;
if ((retTo_28.pc == 0)) {
goto start;
}
assert(false, "Internal error");

start:
tmpVar_53 = PRT_VALUE.PrtCastValue(currentArg, Main.type_14_PRT_TYPE);
tmpVal_45 = PRT_VALUE.PrtTupleGet(tmpVar_53, 1);
RState = PRT_VALUE.PrtCloneValue(tmpVal_45);
tmpVar_54 = PRT_VALUE.PrtCastValue(currentArg, Main.type_14_PRT_TYPE);
tmpVal_46 = PRT_VALUE.PrtTupleGet(tmpVar_54, 0);
RobotTP = PRT_VALUE.PrtCloneValue(tmpVal_46);
tmpVar_55 = PRT_VALUE.PrtCastValue(currentArg, Main.type_14_PRT_TYPE);
tmpVal_47 = PRT_VALUE.PrtTupleGet(tmpVar_55, 2);
currentLocation = PRT_VALUE.PrtCloneValue(tmpVal_47);
tmp_71 = PRT_VALUE.PrtMkDefaultValue(Main.type_12_PRT_TYPE);
PRT_VALUE.PrtPrimSetEvent(tmp_71, Main.local_SM_EVENT);
tmpPayload_19 = PRT_VALUE.PrtMkDefaultValue(Main.type_0_PRT_TYPE);
assert((tmp_71.ev != null), "(61, 4): Raised event must be non-null");
trace("<RaiseLog> Machine MotionPlanExecutor-{0} raised Event {1}\n", myHandle.instance, tmp_71.ev.name);
myHandle.currentEvent = tmp_71.ev;
myHandle.currentArg = tmpPayload_19;
entryCtxt.Raise();
return;

;
entryCtxt.Return();
return;

;

}
void AnonFun2(Continuation entryCtxt) {
PRT_VALUE_ARRAY locals;
SM_EVENT currentEvent;
PRT_VALUE currentArg;
PRT_VALUE tmpVal_48;
PRT_VALUE tmp_72;
PRT_VALUE tmpVar_56;
bool tmpVar_57;
PRT_VALUE tmpVar_58;
PRT_VALUE tmp_73;
StackFrame retTo_29;

dummy:
retTo_29 = entryCtxt.PopReturnTo();
locals = retTo_29.locals;
currentEvent = retTo_29.currentEvent;
currentArg = retTo_29.currentArg;
if ((retTo_29.pc == 0)) {
goto start;
}
assert(false, "Internal error");

start:
tmpVal_48 = PRT_VALUE.PrtTupleGet(currentArg, 0);
currentPlan = PRT_VALUE.PrtCloneValue(tmpVal_48);
tmp_72 = PRT_VALUE.PrtMkDefaultValue(Main.type_1_PRT_TYPE);
PRT_VALUE.PrtPrimSetInt(tmp_72, 0);
tmpVar_56 = PRT_VALUE.PrtSeqGet(currentPlan, tmp_72);
tmpVar_57 = PRT_VALUE.PrtIsEqualValue(currentLocation, tmpVar_56);
tmpVar_58 = PRT_VALUE.PrtMkDefaultValue(Main.type_5_PRT_TYPE);
PRT_VALUE.PrtPrimSetBool(tmpVar_58, tmpVar_57);
assert(tmpVar_58.bl, "(70, 4): Assert failed");
tmp_73 = PRT_VALUE.PrtMkDefaultValue(Main.type_1_PRT_TYPE);
PRT_VALUE.PrtPrimSetInt(tmp_73, 0);
PRT_VALUE.PrtSeqRemove(currentPlan, tmp_73);

;
entryCtxt.Return();
return;

;

}
void AnonFun3(Continuation entryCtxt) {
PRT_VALUE_ARRAY locals;
SM_EVENT currentEvent;
PRT_VALUE currentArg;
int tmpVar_59;
PRT_VALUE retVal_3;
PRT_VALUE tmp_74;
bool tmpVar_60;
PRT_VALUE tmpVar_61;
PRT_VALUE tmp_75;
PRT_VALUE tmpPayload_20;
PRT_VALUE tmp_76;
PRT_VALUE tmpVar_62;
PRT_VALUE_ARRAY argCloneVar_30;
PRT_VALUE tmp_77;
PRT_VALUE tmpVar_63;
bool tmpVar_64;
PRT_VALUE tmpVar_65;
PRT_VALUE tmp_78;
PRT_VALUE tmpPayload_21;
StackFrame retTo_30;

dummy:
retTo_30 = entryCtxt.PopReturnTo();
locals = retTo_30.locals;
currentEvent = retTo_30.currentEvent;
currentArg = retTo_30.currentArg;
if ((retTo_30.pc == 0)) {
goto start;
}
if ((retTo_30.pc == 1)) {
goto AnonFun3_3;
}
assert(false, "Internal error");

start:
tmpVar_59 = PRT_VALUE.PrtSeqSizeOf(currentPlan);
retVal_3 = PRT_VALUE.PrtMkDefaultValue(Main.type_1_PRT_TYPE);
PRT_VALUE.PrtPrimSetInt(retVal_3, tmpVar_59);
tmp_74 = PRT_VALUE.PrtMkDefaultValue(Main.type_1_PRT_TYPE);
PRT_VALUE.PrtPrimSetInt(tmp_74, 0);
tmpVar_60 = PRT_VALUE.PrtIsEqualValue(retVal_3, tmp_74);
tmpVar_61 = PRT_VALUE.PrtMkDefaultValue(Main.type_5_PRT_TYPE);
PRT_VALUE.PrtPrimSetBool(tmpVar_61, tmpVar_60);
if (!tmpVar_61.bl) {
goto AnonFun3_if_0_else;
}
tmp_75 = PRT_VALUE.PrtMkDefaultValue(Main.type_12_PRT_TYPE);
PRT_VALUE.PrtPrimSetEvent(tmp_75, Main.done_SM_EVENT);
tmpPayload_20 = PRT_VALUE.PrtMkDefaultValue(Main.type_0_PRT_TYPE);
assert((tmp_75.ev != null), "(81, 5): Raised event must be non-null");
trace("<RaiseLog> Machine MotionPlanExecutor-{0} raised Event {1}\n", myHandle.instance, tmp_75.ev.name);
myHandle.currentEvent = tmp_75.ev;
myHandle.currentArg = tmpPayload_20;
entryCtxt.Raise();
return;
goto AnonFun3_if_0_end;
AnonFun3_if_0_else:
tmp_76 = PRT_VALUE.PrtMkDefaultValue(Main.type_1_PRT_TYPE);
PRT_VALUE.PrtPrimSetInt(tmp_76, 0);
tmpVar_62 = PRT_VALUE.PrtSeqGet(currentPlan, tmp_76);
argCloneVar_30 = new PRT_VALUE_ARRAY[1];
argCloneVar_30[0] = PRT_VALUE.PrtCloneValue(tmpVar_62);
entryCtxt.PushReturnTo(0, argCloneVar_30, currentEvent, currentArg);

AnonFun3_3:
GotoLocation(entryCtxt);

;
if ((entryCtxt.reason == ContinuationReason.Return)) {

} else {
entryCtxt.PushReturnTo(1, locals, currentEvent, currentArg);
return;

}
tmp_77 = PRT_VALUE.PrtMkDefaultValue(Main.type_1_PRT_TYPE);
PRT_VALUE.PrtPrimSetInt(tmp_77, 0);
tmpVar_63 = PRT_VALUE.PrtSeqGet(currentPlan, tmp_77);
tmpVar_64 = PRT_VALUE.PrtIsEqualValue(currentLocation, tmpVar_63);
tmpVar_65 = PRT_VALUE.PrtMkDefaultValue(Main.type_5_PRT_TYPE);
PRT_VALUE.PrtPrimSetBool(tmpVar_65, tmpVar_64);
assert(tmpVar_65.bl, "(86, 5): Assert failed");
tmp_78 = PRT_VALUE.PrtMkDefaultValue(Main.type_12_PRT_TYPE);
PRT_VALUE.PrtPrimSetEvent(tmp_78, Main.local_SM_EVENT);
tmpPayload_21 = PRT_VALUE.PrtMkDefaultValue(Main.type_0_PRT_TYPE);
assert((tmp_78.ev != null), "(87, 5): Raised event must be non-null");
trace("<RaiseLog> Machine MotionPlanExecutor-{0} raised Event {1}\n", myHandle.instance, tmp_78.ev.name);
myHandle.currentEvent = tmp_78.ev;
myHandle.currentArg = tmpPayload_21;
entryCtxt.Raise();
return;

;

AnonFun3_if_0_end:

;

;
entryCtxt.Return();
return;

;

}
void AnonFun4(Continuation entryCtxt) {
PRT_VALUE_ARRAY locals;
SM_EVENT currentEvent;
PRT_VALUE currentArg;
PRT_VALUE tmp_79;
StackFrame retTo_31;

dummy:
retTo_31 = entryCtxt.PopReturnTo();
locals = retTo_31.locals;
currentEvent = retTo_31.currentEvent;
currentArg = retTo_31.currentArg;
if ((retTo_31.pc == 0)) {
goto start;
}
assert(false, "Internal error");

start:
tmp_79 = PRT_VALUE.PrtMkDefaultValue(Main.type_1_PRT_TYPE);
PRT_VALUE.PrtPrimSetInt(tmp_79, 0);
PRT_VALUE.PrtSeqRemove(currentPlan, tmp_79);

;
entryCtxt.Return();
return;

;

}
void AnonFun5(Continuation entryCtxt) {
PRT_VALUE_ARRAY locals;
SM_EVENT currentEvent;
PRT_VALUE currentArg;
PRT_VALUE tmp_80;
PRT_VALUE tmpPayload_22;
StackFrame retTo_32;

dummy:
retTo_32 = entryCtxt.PopReturnTo();
locals = retTo_32.locals;
currentEvent = retTo_32.currentEvent;
currentArg = retTo_32.currentArg;
if ((retTo_32.pc == 0)) {
goto start;
}
if ((retTo_32.pc == 1)) {
goto AnonFun5_5;
}
assert(false, "Internal error");

start:
tmp_80 = PRT_VALUE.PrtMkDefaultValue(Main.type_12_PRT_TYPE);
PRT_VALUE.PrtPrimSetEvent(tmp_80, Main.ReachedDestination_SM_EVENT);
assert((RobotTP.mach != null), "Target of send must be non-null");
tmpPayload_22 = PRT_VALUE.PrtCloneValue(currentLocation);
Main.InvokeMachine_Prop_1(tmp_80.ev, tmpPayload_22);
Main.InvokeMachine_Prop_2(tmp_80.ev, tmpPayload_22);
Main.InvokeMachine_Prop_6(tmp_80.ev, tmpPayload_22);
Main.InvokeMachine_Prop_7(tmp_80.ev, tmpPayload_22);
Main.InvokeMachine_Prop_8(tmp_80.ev, tmpPayload_22);
Main.InvokeMachine_Prop_9(tmp_80.ev, tmpPayload_22);
Main.InvokeMachine_Prop_3(tmp_80.ev, tmpPayload_22);
Main.InvokeMachine_Prop_10a(tmp_80.ev, tmpPayload_22);
Main.InvokeMachine_Prop_10b(tmp_80.ev, tmpPayload_22);
Main.InvokeMachine_Prop_10c(tmp_80.ev, tmpPayload_22);
RobotTP.mach.EnqueueEvent(tmp_80.ev, tmpPayload_22, myHandle);
entryCtxt.Send(1, locals, currentEvent, currentArg);
return;

AnonFun5_5:

;

;
entryCtxt.Return();
return;

;

}
};

class MACHINE_Environment{
PRT_VALUE GoalsMap;
SM_HANDLE myHandle;
void Environment_Init_CalculateDeferredAndActionSet() {

dummy:
myHandle.stack.deferredSet = new SM_EVENT_SET;
myHandle.stack.actionSet = new SM_EVENT_SET;
myHandle.stack.AddStackDeferredSet(myHandle.stack.deferredSet);
myHandle.stack.deferredSet = (myHandle.stack.deferredSet - Main.local_SM_EVENT);
myHandle.stack.AddStackActionSet(myHandle.stack.actionSet);
myHandle.stack.actionSet = (myHandle.stack.actionSet - Main.local_SM_EVENT);
myHandle.stack.es = new SM_EVENT_ARRAY[0];
myHandle.stack.as = new ActionOrFun_ARRAY[0];

;

}
void Environment_StartSimulation_CalculateDeferredAndActionSet() {

dummy:
myHandle.stack.deferredSet = new SM_EVENT_SET;
myHandle.stack.actionSet = new SM_EVENT_SET;
myHandle.stack.AddStackDeferredSet(myHandle.stack.deferredSet);
myHandle.stack.deferredSet = (myHandle.stack.deferredSet - Main.GetEnv_SM_EVENT);
myHandle.stack.deferredSet = (myHandle.stack.deferredSet - Main.SetEnv_SM_EVENT);
myHandle.stack.AddStackActionSet(myHandle.stack.actionSet);
myHandle.stack.actionSet = (myHandle.stack.actionSet + Main.GetEnv_SM_EVENT);
myHandle.stack.actionSet = (myHandle.stack.actionSet + Main.SetEnv_SM_EVENT);
myHandle.stack.es = new SM_EVENT_ARRAY[2];
myHandle.stack.as = new ActionOrFun_ARRAY[2];
myHandle.stack.es[0] = Main.GetEnv_SM_EVENT;
myHandle.stack.as[0] = ActionOrFun._Environment_AnonFun2;
myHandle.stack.es[1] = Main.SetEnv_SM_EVENT;
myHandle.stack.as[1] = ActionOrFun._Environment_AnonFun3;

;

}
void Start() {

dummy:
Run(Main.Environment_Init_SM_STATE);
if ((myHandle.currentEvent == Main.halt_SM_EVENT)) {
myHandle.stack = null;
myHandle.buffer = null;
myHandle.currentArg = null;
SM_HANDLE.halted = (SM_HANDLE.halted + myHandle);
SM_HANDLE.enabled = (SM_HANDLE.enabled - myHandle);
return;

}
trace("<StateLog> Unhandled event exception by machine Environment-{0}\n", myHandle.instance);
assert(false, "Unhandled event exception by machine Environment");

;

}
void Run(SM_STATE state) {
bool doPop;
bool hasNullTransitionOrAction;

init:
myHandle.Push();
myHandle.stack.state = state;
doPop = RunHelper(true);
while (!doPop) {
hasNullTransitionOrAction = myHandle.stack.HasNullTransitionOrAction();
myHandle.DequeueEvent(hasNullTransitionOrAction);
doPop = RunHelper(false);

}
myHandle.Pop();

;

}
void TraceEnterState(SM_STATE state) {

init:
if ((state == Main.Environment_Init_SM_STATE)) {
trace("<StateLog> Machine Environment-{0} entering State Init\n", myHandle.instance);
return;

}
if ((state == Main.Environment_StartSimulation_SM_STATE)) {
trace("<StateLog> Machine Environment-{0} entering State StartSimulation\n", myHandle.instance);
return;

}
assert(false, "Internal error");

;

}
void TraceExitState(SM_STATE state) {

init:
if ((state == Main.Environment_Init_SM_STATE)) {
trace("<StateLog> Machine Environment-{0} exiting State Init\n", myHandle.instance);
return;

}
if ((state == Main.Environment_StartSimulation_SM_STATE)) {
trace("<StateLog> Machine Environment-{0} exiting State StartSimulation\n", myHandle.instance);
return;

}
assert(false, "Internal error");

;

}
void CalculateDeferredAndActionSet(SM_STATE state) {

init:
if ((state == Main.Environment_Init_SM_STATE)) {
Environment_Init_CalculateDeferredAndActionSet();
return;

}
if ((state == Main.Environment_StartSimulation_SM_STATE)) {
Environment_StartSimulation_CalculateDeferredAndActionSet();
return;

}
assert(false, "Internal error");

;

}
bool RunHelper(bool start) {
SM_STATE state;
SM_TRANSITION transition;
ActionOrFun actionFun;

init:
state = myHandle.stack.state;
if (start) {
goto enter;
} else {
goto handle;
}

;


enter:
state = myHandle.stack.state;
TraceEnterState(state);
CalculateDeferredAndActionSet(state);
actionFun = state.entryFun;

;


execute:
ReentrancyHelper(actionFun);
if ((myHandle.cont.reason == ContinuationReason.Raise)) {
goto handle;
}
myHandle.currentEvent = null;
myHandle.currentArg = PRT_VALUE.PrtMkDefaultValue(Main.type_0_PRT_TYPE);
if ((myHandle.cont.reason != ContinuationReason.Pop)) {
return false;

}
TraceExitState(state);
ReentrancyHelper(state.exitFun);
return true;

;


handle:
if ((myHandle.currentEvent in myHandle.stack.actionSet)) {
actionFun = myHandle.stack.Find(myHandle.currentEvent);
goto execute;
}
transition = state.FindPushTransition(myHandle.currentEvent);
if ((transition != null)) {
Run(transition.to);
if ((myHandle.currentEvent == null)) {
return false;

} else {
goto handle;
}

}
TraceExitState(state);
ReentrancyHelper(state.exitFun);
transition = state.FindTransition(myHandle.currentEvent);
if ((transition == null)) {
return true;

}
ReentrancyHelper(transition.fun);
myHandle.stack.state = transition.to;
state = myHandle.stack.state;
goto enter;
;

}
bool ProcessContinuation() {
bool doPop;

init:
if ((myHandle.cont.reason == ContinuationReason.Return)) {
return true;

}
if ((myHandle.cont.reason == ContinuationReason.Pop)) {
return true;

}
if ((myHandle.cont.reason == ContinuationReason.Raise)) {
return true;

}
if ((myHandle.cont.reason == ContinuationReason.Receive)) {
myHandle.DequeueEvent(false);
return false;

}
if ((myHandle.cont.reason == ContinuationReason.Nondet)) {
myHandle.cont.nondet = choose(bool);
return false;

}
if ((myHandle.cont.reason == ContinuationReason.NewMachine)) {
yield;
return false;

}
if ((myHandle.cont.reason == ContinuationReason.Send)) {
yield;
return false;

}

;

}
void ReentrancyHelper(ActionOrFun actionFun) {
PRT_VALUE_ARRAY locals;
bool doPop;

init:
doPop = false;
myHandle.cont.Reset();
if ((actionFun == ActionOrFun._ResetObstacle)) {
trace("<FunctionLog> Machine Environment-{0} executing Function ResetObstacle\n", myHandle.instance);
locals = null;
myHandle.cont.PushReturnTo(0, locals, myHandle.currentEvent, myHandle.currentArg);
goto execute_ResetObstacle;
}
if ((actionFun == ActionOrFun._Seal)) {
trace("<FunctionLog> Machine Environment-{0} executing Function Seal\n", myHandle.instance);
locals = null;
myHandle.cont.PushReturnTo(0, locals, myHandle.currentEvent, myHandle.currentArg);
goto execute_Seal;
}
if ((actionFun == ActionOrFun._Unseal)) {
trace("<FunctionLog> Machine Environment-{0} executing Function Unseal\n", myHandle.instance);
locals = null;
myHandle.cont.PushReturnTo(0, locals, myHandle.currentEvent, myHandle.currentArg);
goto execute_Unseal;
}
if ((actionFun == ActionOrFun._InitializeMotionPlanning)) {
trace("<FunctionLog> Machine Environment-{0} executing Function InitializeMotionPlanning\n", myHandle.instance);
locals = new PRT_VALUE_ARRAY[4];
locals[3] = PRT_VALUE.PrtMkDefaultValue(Main.type_1_PRT_TYPE);
locals[2] = PRT_VALUE.PrtMkDefaultValue(Main.type_2_PRT_TYPE);
locals[1] = PRT_VALUE.PrtMkDefaultValue(Main.type_2_PRT_TYPE);
locals[0] = PRT_VALUE.PrtMkDefaultValue(Main.type_4_PRT_TYPE);
myHandle.cont.PushReturnTo(0, locals, myHandle.currentEvent, myHandle.currentArg);
goto execute_InitializeMotionPlanning;
}
if ((actionFun == ActionOrFun._CAT_CAGE_LOC)) {
trace("<FunctionLog> Machine Environment-{0} executing Function CAT_CAGE_LOC\n", myHandle.instance);
locals = null;
myHandle.cont.PushReturnTo(0, locals, myHandle.currentEvent, myHandle.currentArg);
goto execute_CAT_CAGE_LOC;
}
if ((actionFun == ActionOrFun._DOG_CAGE_LOC)) {
trace("<FunctionLog> Machine Environment-{0} executing Function DOG_CAGE_LOC\n", myHandle.instance);
locals = null;
myHandle.cont.PushReturnTo(0, locals, myHandle.currentEvent, myHandle.currentArg);
goto execute_DOG_CAGE_LOC;
}
if ((actionFun == ActionOrFun._MICE_CAGE_LOC)) {
trace("<FunctionLog> Machine Environment-{0} executing Function MICE_CAGE_LOC\n", myHandle.instance);
locals = null;
myHandle.cont.PushReturnTo(0, locals, myHandle.currentEvent, myHandle.currentArg);
goto execute_MICE_CAGE_LOC;
}
if ((actionFun == ActionOrFun._BATTERY_THRESHOLD)) {
trace("<FunctionLog> Machine Environment-{0} executing Function BATTERY_THRESHOLD\n", myHandle.instance);
locals = null;
myHandle.cont.PushReturnTo(0, locals, myHandle.currentEvent, myHandle.currentArg);
goto execute_BATTERY_THRESHOLD;
}
if ((actionFun == ActionOrFun._DOG)) {
trace("<FunctionLog> Machine Environment-{0} executing Function DOG\n", myHandle.instance);
locals = null;
myHandle.cont.PushReturnTo(0, locals, myHandle.currentEvent, myHandle.currentArg);
goto execute_DOG;
}
if ((actionFun == ActionOrFun._CAT)) {
trace("<FunctionLog> Machine Environment-{0} executing Function CAT\n", myHandle.instance);
locals = null;
myHandle.cont.PushReturnTo(0, locals, myHandle.currentEvent, myHandle.currentArg);
goto execute_CAT;
}
if ((actionFun == ActionOrFun._MICE)) {
trace("<FunctionLog> Machine Environment-{0} executing Function MICE\n", myHandle.instance);
locals = null;
myHandle.cont.PushReturnTo(0, locals, myHandle.currentEvent, myHandle.currentArg);
goto execute_MICE;
}
if ((actionFun == ActionOrFun._BATTERY_CHARGE_LOCATION)) {
trace("<FunctionLog> Machine Environment-{0} executing Function BATTERY_CHARGE_LOCATION\n", myHandle.instance);
locals = null;
myHandle.cont.PushReturnTo(0, locals, myHandle.currentEvent, myHandle.currentArg);
goto execute_BATTERY_CHARGE_LOCATION;
}
if ((actionFun == ActionOrFun._ROBOT_START_STATE)) {
trace("<FunctionLog> Machine Environment-{0} executing Function ROBOT_START_STATE\n", myHandle.instance);
locals = null;
myHandle.cont.PushReturnTo(0, locals, myHandle.currentEvent, myHandle.currentArg);
goto execute_ROBOT_START_STATE;
}
if ((actionFun == ActionOrFun._SIZE_OF_GRID)) {
trace("<FunctionLog> Machine Environment-{0} executing Function SIZE_OF_GRID\n", myHandle.instance);
locals = null;
myHandle.cont.PushReturnTo(0, locals, myHandle.currentEvent, myHandle.currentArg);
goto execute_SIZE_OF_GRID;
}
if ((actionFun == ActionOrFun._ROBOT_SCAN_LOCATIONS)) {
trace("<FunctionLog> Machine Environment-{0} executing Function ROBOT_SCAN_LOCATIONS\n", myHandle.instance);
locals = new PRT_VALUE_ARRAY[3];
locals[2] = PRT_VALUE.PrtMkDefaultValue(Main.type_2_PRT_TYPE);
locals[1] = PRT_VALUE.PrtMkDefaultValue(Main.type_2_PRT_TYPE);
locals[0] = PRT_VALUE.PrtMkDefaultValue(Main.type_1_PRT_TYPE);
myHandle.cont.PushReturnTo(0, locals, myHandle.currentEvent, myHandle.currentArg);
goto execute_ROBOT_SCAN_LOCATIONS;
}
if ((actionFun == ActionOrFun._GetStaticGoals)) {
trace("<FunctionLog> Machine Environment-{0} executing Function GetStaticGoals\n", myHandle.instance);
locals = new PRT_VALUE_ARRAY[1];
locals[0] = PRT_VALUE.PrtMkDefaultValue(Main.type_7_PRT_TYPE);
myHandle.cont.PushReturnTo(0, locals, myHandle.currentEvent, myHandle.currentArg);
goto execute_GetStaticGoals;
}
if ((actionFun == ActionOrFun._GetStaticObstacles)) {
trace("<FunctionLog> Machine Environment-{0} executing Function GetStaticObstacles\n", myHandle.instance);
locals = new PRT_VALUE_ARRAY[1];
locals[0] = PRT_VALUE.PrtMkDefaultValue(Main.type_2_PRT_TYPE);
myHandle.cont.PushReturnTo(0, locals, myHandle.currentEvent, myHandle.currentArg);
goto execute_GetStaticObstacles;
}
if ((actionFun == ActionOrFun._Environment_ignore)) {
trace("<FunctionLog> Machine Environment-{0} executing Function ignore\n", myHandle.instance);
locals = null;
myHandle.cont.PushReturnTo(0, locals, myHandle.currentEvent, myHandle.currentArg);
goto execute_ignore;
}
if ((actionFun == ActionOrFun._Environment_AnonFun0)) {
locals = null;
myHandle.cont.PushReturnTo(0, locals, myHandle.currentEvent, myHandle.currentArg);
goto execute_AnonFun0;
}
if ((actionFun == ActionOrFun._Environment_AnonFun1)) {
locals = null;
myHandle.cont.PushReturnTo(0, locals, myHandle.currentEvent, myHandle.currentArg);
goto execute_AnonFun1;
}
if ((actionFun == ActionOrFun._Environment_AnonFun2)) {
locals = null;
myHandle.cont.PushReturnTo(0, locals, myHandle.currentEvent, myHandle.currentArg);
goto execute_AnonFun2;
}
if ((actionFun == ActionOrFun._Environment_AnonFun3)) {
locals = null;
myHandle.cont.PushReturnTo(0, locals, myHandle.currentEvent, myHandle.currentArg);
goto execute_AnonFun3;
}
assert(false, "Internal error");

;


execute_ResetObstacle:
while (!doPop) {
Main.ResetObstacle(myHandle, myHandle.cont);
doPop = ProcessContinuation();

}
return;

;


execute_Seal:
while (!doPop) {
Main.Seal(myHandle, myHandle.cont);
doPop = ProcessContinuation();

}
return;

;


execute_Unseal:
while (!doPop) {
Main.Unseal(myHandle, myHandle.cont);
doPop = ProcessContinuation();

}
return;

;


execute_InitializeMotionPlanning:
while (!doPop) {
Main.InitializeMotionPlanning(myHandle, myHandle.cont);
doPop = ProcessContinuation();

}
return;

;


execute_CAT_CAGE_LOC:
while (!doPop) {
Main.CAT_CAGE_LOC(myHandle, myHandle.cont);
doPop = ProcessContinuation();

}
return;

;


execute_DOG_CAGE_LOC:
while (!doPop) {
Main.DOG_CAGE_LOC(myHandle, myHandle.cont);
doPop = ProcessContinuation();

}
return;

;


execute_MICE_CAGE_LOC:
while (!doPop) {
Main.MICE_CAGE_LOC(myHandle, myHandle.cont);
doPop = ProcessContinuation();

}
return;

;


execute_BATTERY_THRESHOLD:
while (!doPop) {
Main.BATTERY_THRESHOLD(myHandle, myHandle.cont);
doPop = ProcessContinuation();

}
return;

;


execute_DOG:
while (!doPop) {
Main.DOG(myHandle, myHandle.cont);
doPop = ProcessContinuation();

}
return;

;


execute_CAT:
while (!doPop) {
Main.CAT(myHandle, myHandle.cont);
doPop = ProcessContinuation();

}
return;

;


execute_MICE:
while (!doPop) {
Main.MICE(myHandle, myHandle.cont);
doPop = ProcessContinuation();

}
return;

;


execute_BATTERY_CHARGE_LOCATION:
while (!doPop) {
Main.BATTERY_CHARGE_LOCATION(myHandle, myHandle.cont);
doPop = ProcessContinuation();

}
return;

;


execute_ROBOT_START_STATE:
while (!doPop) {
Main.ROBOT_START_STATE(myHandle, myHandle.cont);
doPop = ProcessContinuation();

}
return;

;


execute_SIZE_OF_GRID:
while (!doPop) {
Main.SIZE_OF_GRID(myHandle, myHandle.cont);
doPop = ProcessContinuation();

}
return;

;


execute_ROBOT_SCAN_LOCATIONS:
while (!doPop) {
Main.ROBOT_SCAN_LOCATIONS(myHandle, myHandle.cont);
doPop = ProcessContinuation();

}
return;

;


execute_GetStaticGoals:
while (!doPop) {
Main.GetStaticGoals(myHandle, myHandle.cont);
doPop = ProcessContinuation();

}
return;

;


execute_GetStaticObstacles:
while (!doPop) {
Main.GetStaticObstacles(myHandle, myHandle.cont);
doPop = ProcessContinuation();

}
return;

;


execute_ignore:
while (!doPop) {
ignore(myHandle.cont);
doPop = ProcessContinuation();

}
return;

;


execute_AnonFun0:
while (!doPop) {
AnonFun0(myHandle.cont);
doPop = ProcessContinuation();

}
return;

;


execute_AnonFun1:
while (!doPop) {
AnonFun1(myHandle.cont);
doPop = ProcessContinuation();

}
return;

;


execute_AnonFun2:
while (!doPop) {
AnonFun2(myHandle.cont);
doPop = ProcessContinuation();

}
return;

;


execute_AnonFun3:
while (!doPop) {
AnonFun3(myHandle.cont);
doPop = ProcessContinuation();

}
return;

;

}
void ignore(Continuation entryCtxt) {
PRT_VALUE_ARRAY locals;
SM_EVENT currentEvent;
PRT_VALUE currentArg;
StackFrame retTo_33;

dummy:
retTo_33 = entryCtxt.PopReturnTo();
locals = retTo_33.locals;
currentEvent = retTo_33.currentEvent;
currentArg = retTo_33.currentArg;
if ((retTo_33.pc == 0)) {
goto start;
}
assert(false, "Internal error");

start:

;
entryCtxt.Return();
return;

;

}
void AnonFun0(Continuation entryCtxt) {
PRT_VALUE_ARRAY locals;
SM_EVENT currentEvent;
PRT_VALUE currentArg;
StackFrame retTo_34;

dummy:
retTo_34 = entryCtxt.PopReturnTo();
locals = retTo_34.locals;
currentEvent = retTo_34.currentEvent;
currentArg = retTo_34.currentArg;
if ((retTo_34.pc == 0)) {
goto start;
}
assert(false, "Internal error");

start:

;
entryCtxt.Return();
return;

;

}
void AnonFun1(Continuation entryCtxt) {
PRT_VALUE_ARRAY locals;
SM_EVENT currentEvent;
PRT_VALUE currentArg;
PRT_VALUE_ARRAY argCloneVar_31;
PRT_VALUE tmp_81;
PRT_VALUE tmpPayload_23;
StackFrame retTo_35;

dummy:
retTo_35 = entryCtxt.PopReturnTo();
locals = retTo_35.locals;
currentEvent = retTo_35.currentEvent;
currentArg = retTo_35.currentArg;
if ((retTo_35.pc == 0)) {
goto start;
}
if ((retTo_35.pc == 1)) {
goto AnonFun1_8;
}
assert(false, "Internal error");

start:
argCloneVar_31 = new PRT_VALUE_ARRAY[1];
argCloneVar_31[0] = PRT_VALUE.PrtMkDefaultValue(Main.type_7_PRT_TYPE);
entryCtxt.PushReturnTo(0, argCloneVar_31, currentEvent, currentArg);

AnonFun1_8:
Main.GetStaticGoals(myHandle, entryCtxt);

;
if ((entryCtxt.reason == ContinuationReason.Return)) {
GoalsMap = PRT_VALUE.PrtCloneValue(entryCtxt.retVal);

} else {
entryCtxt.PushReturnTo(1, locals, currentEvent, currentArg);
return;

}
tmp_81 = PRT_VALUE.PrtMkDefaultValue(Main.type_12_PRT_TYPE);
PRT_VALUE.PrtPrimSetEvent(tmp_81, Main.local_SM_EVENT);
tmpPayload_23 = PRT_VALUE.PrtMkDefaultValue(Main.type_0_PRT_TYPE);
assert((tmp_81.ev != null), "(7, 4): Raised event must be non-null");
trace("<RaiseLog> Machine Environment-{0} raised Event {1}\n", myHandle.instance, tmp_81.ev.name);
myHandle.currentEvent = tmp_81.ev;
myHandle.currentArg = tmpPayload_23;
entryCtxt.Raise();
return;

;
entryCtxt.Return();
return;

;

}
void AnonFun2(Continuation entryCtxt) {
PRT_VALUE_ARRAY locals;
SM_EVENT currentEvent;
PRT_VALUE currentArg;
PRT_VALUE tmpVal_49;
bool tmpVar_66;
PRT_VALUE tmpVar_67;
PRT_VALUE tmpVal_50;
PRT_VALUE tmp_82;
PRT_VALUE tmpVal_51;
PRT_VALUE tmpVal_52;
PRT_VALUE tmpVar_68;
PRT_VALUE tmpTuple_13;
PRT_VALUE tmpPayload_24;
PRT_VALUE tmpVal_53;
PRT_VALUE tmp_83;
PRT_VALUE tmpVal_54;
PRT_VALUE tmp_84;
PRT_VALUE tmpTuple_14;
PRT_VALUE tmpPayload_25;
StackFrame retTo_36;

dummy:
retTo_36 = entryCtxt.PopReturnTo();
locals = retTo_36.locals;
currentEvent = retTo_36.currentEvent;
currentArg = retTo_36.currentArg;
if ((retTo_36.pc == 0)) {
goto start;
}
if ((retTo_36.pc == 1)) {
goto AnonFun2_3;
}
if ((retTo_36.pc == 2)) {
goto AnonFun2_4;
}
assert(false, "Internal error");

start:
tmpVal_49 = PRT_VALUE.PrtTupleGet(currentArg, 1);
tmpVar_66 = PRT_VALUE.PrtMapExists(GoalsMap, tmpVal_49);
tmpVar_67 = PRT_VALUE.PrtMkDefaultValue(Main.type_5_PRT_TYPE);
PRT_VALUE.PrtPrimSetBool(tmpVar_67, tmpVar_66);
if (!tmpVar_67.bl) {
goto AnonFun2_if_0_else;
}
tmpVal_50 = PRT_VALUE.PrtTupleGet(currentArg, 0);
tmp_82 = PRT_VALUE.PrtMkDefaultValue(Main.type_12_PRT_TYPE);
PRT_VALUE.PrtPrimSetEvent(tmp_82, Main.EnvState_SM_EVENT);
tmpVal_51 = PRT_VALUE.PrtTupleGet(currentArg, 1);
tmpVal_52 = PRT_VALUE.PrtTupleGet(currentArg, 1);
tmpVar_68 = PRT_VALUE.PrtMapGet(GoalsMap, tmpVal_52);
tmpTuple_13 = PRT_VALUE.PrtMkDefaultValue(Main.type_19_PRT_TYPE);
PRT_VALUE.PrtTupleSet(tmpTuple_13, 0, tmpVal_51);
PRT_VALUE.PrtTupleSet(tmpTuple_13, 1, tmpVar_68);
assert((tmpVal_50.mach != null), "Target of send must be non-null");
tmpPayload_24 = PRT_VALUE.PrtCloneValue(tmpTuple_13);
Main.InvokeMachine_Prop_1(tmp_82.ev, tmpPayload_24);
Main.InvokeMachine_Prop_2(tmp_82.ev, tmpPayload_24);
Main.InvokeMachine_Prop_6(tmp_82.ev, tmpPayload_24);
Main.InvokeMachine_Prop_7(tmp_82.ev, tmpPayload_24);
Main.InvokeMachine_Prop_8(tmp_82.ev, tmpPayload_24);
Main.InvokeMachine_Prop_9(tmp_82.ev, tmpPayload_24);
Main.InvokeMachine_Prop_3(tmp_82.ev, tmpPayload_24);
Main.InvokeMachine_Prop_10a(tmp_82.ev, tmpPayload_24);
Main.InvokeMachine_Prop_10b(tmp_82.ev, tmpPayload_24);
Main.InvokeMachine_Prop_10c(tmp_82.ev, tmpPayload_24);
tmpVal_50.mach.EnqueueEvent(tmp_82.ev, tmpPayload_24, myHandle);
entryCtxt.Send(1, locals, currentEvent, currentArg);
return;

AnonFun2_3:

;
goto AnonFun2_if_0_end;
AnonFun2_if_0_else:
tmpVal_53 = PRT_VALUE.PrtTupleGet(currentArg, 0);
tmp_83 = PRT_VALUE.PrtMkDefaultValue(Main.type_12_PRT_TYPE);
PRT_VALUE.PrtPrimSetEvent(tmp_83, Main.EnvState_SM_EVENT);
tmpVal_54 = PRT_VALUE.PrtTupleGet(currentArg, 1);
tmp_84 = PRT_VALUE.PrtMkDefaultValue(Main.type_0_PRT_TYPE);
tmpTuple_14 = PRT_VALUE.PrtMkDefaultValue(Main.type_20_PRT_TYPE);
PRT_VALUE.PrtTupleSet(tmpTuple_14, 0, tmpVal_54);
PRT_VALUE.PrtTupleSet(tmpTuple_14, 1, tmp_84);
assert((tmpVal_53.mach != null), "Target of send must be non-null");
tmpPayload_25 = PRT_VALUE.PrtCloneValue(tmpTuple_14);
Main.InvokeMachine_Prop_1(tmp_83.ev, tmpPayload_25);
Main.InvokeMachine_Prop_2(tmp_83.ev, tmpPayload_25);
Main.InvokeMachine_Prop_6(tmp_83.ev, tmpPayload_25);
Main.InvokeMachine_Prop_7(tmp_83.ev, tmpPayload_25);
Main.InvokeMachine_Prop_8(tmp_83.ev, tmpPayload_25);
Main.InvokeMachine_Prop_9(tmp_83.ev, tmpPayload_25);
Main.InvokeMachine_Prop_3(tmp_83.ev, tmpPayload_25);
Main.InvokeMachine_Prop_10a(tmp_83.ev, tmpPayload_25);
Main.InvokeMachine_Prop_10b(tmp_83.ev, tmpPayload_25);
Main.InvokeMachine_Prop_10c(tmp_83.ev, tmpPayload_25);
tmpVal_53.mach.EnqueueEvent(tmp_83.ev, tmpPayload_25, myHandle);
entryCtxt.Send(2, locals, currentEvent, currentArg);
return;

AnonFun2_4:

;

;

AnonFun2_if_0_end:

;

;
entryCtxt.Return();
return;

;

}
void AnonFun3(Continuation entryCtxt) {
PRT_VALUE_ARRAY locals;
SM_EVENT currentEvent;
PRT_VALUE currentArg;
PRT_VALUE tmpVal_55;
PRT_VALUE tmpVal_56;
StackFrame retTo_37;

dummy:
retTo_37 = entryCtxt.PopReturnTo();
locals = retTo_37.locals;
currentEvent = retTo_37.currentEvent;
currentArg = retTo_37.currentArg;
if ((retTo_37.pc == 0)) {
goto start;
}
assert(false, "Internal error");

start:
tmpVal_55 = PRT_VALUE.PrtTupleGet(currentArg, 0);
tmpVal_56 = PRT_VALUE.PrtTupleGet(currentArg, 1);
PRT_VALUE.PrtMapSet(GoalsMap, tmpVal_55, tmpVal_56);

;
entryCtxt.Return();
return;

;

}
};

class MACHINE_RobotStateManager{
PRT_VALUE currentLocation;
PRT_VALUE batteryLevel;
PRT_VALUE EnvMachine;
PRT_VALUE sensingMachine;
SM_HANDLE myHandle;
void RobotStateManager_Init_CalculateDeferredAndActionSet() {

dummy:
myHandle.stack.deferredSet = new SM_EVENT_SET;
myHandle.stack.actionSet = new SM_EVENT_SET;
myHandle.stack.AddStackDeferredSet(myHandle.stack.deferredSet);
myHandle.stack.deferredSet = (myHandle.stack.deferredSet - Main.initial_setup_SM_EVENT);
myHandle.stack.AddStackActionSet(myHandle.stack.actionSet);
myHandle.stack.actionSet = (myHandle.stack.actionSet - Main.initial_setup_SM_EVENT);
myHandle.stack.es = new SM_EVENT_ARRAY[0];
myHandle.stack.as = new ActionOrFun_ARRAY[0];

;

}
void RobotStateManager_WaitForCommands_CalculateDeferredAndActionSet() {

dummy:
myHandle.stack.deferredSet = new SM_EVENT_SET;
myHandle.stack.actionSet = new SM_EVENT_SET;
myHandle.stack.AddStackDeferredSet(myHandle.stack.deferredSet);
myHandle.stack.deferredSet = (myHandle.stack.deferredSet - Main.UpdateRobotState_SM_EVENT);
myHandle.stack.deferredSet = (myHandle.stack.deferredSet - Main.GetRobotState_SM_EVENT);
myHandle.stack.AddStackActionSet(myHandle.stack.actionSet);
myHandle.stack.actionSet = (myHandle.stack.actionSet + Main.UpdateRobotState_SM_EVENT);
myHandle.stack.actionSet = (myHandle.stack.actionSet - Main.GetRobotState_SM_EVENT);
myHandle.stack.es = new SM_EVENT_ARRAY[1];
myHandle.stack.as = new ActionOrFun_ARRAY[1];
myHandle.stack.es[0] = Main.UpdateRobotState_SM_EVENT;
myHandle.stack.as[0] = ActionOrFun._RobotStateManager_AnonFun3;

;

}
void RobotStateManager_GetStateFromEnvMachine_CalculateDeferredAndActionSet() {

dummy:
myHandle.stack.deferredSet = new SM_EVENT_SET;
myHandle.stack.actionSet = new SM_EVENT_SET;
myHandle.stack.AddStackDeferredSet(myHandle.stack.deferredSet);
myHandle.stack.deferredSet = (myHandle.stack.deferredSet + Main.UpdateRobotState_SM_EVENT);
myHandle.stack.deferredSet = (myHandle.stack.deferredSet + Main.GetRobotState_SM_EVENT);
myHandle.stack.deferredSet = (myHandle.stack.deferredSet - Main.EnvState_SM_EVENT);
myHandle.stack.AddStackActionSet(myHandle.stack.actionSet);
myHandle.stack.actionSet = (myHandle.stack.actionSet - Main.UpdateRobotState_SM_EVENT);
myHandle.stack.actionSet = (myHandle.stack.actionSet - Main.GetRobotState_SM_EVENT);
myHandle.stack.actionSet = (myHandle.stack.actionSet + Main.EnvState_SM_EVENT);
myHandle.stack.es = new SM_EVENT_ARRAY[1];
myHandle.stack.as = new ActionOrFun_ARRAY[1];
myHandle.stack.es[0] = Main.EnvState_SM_EVENT;
myHandle.stack.as[0] = ActionOrFun._RobotStateManager_AnonFun5;

;

}
void Start() {

dummy:
Run(Main.RobotStateManager_Init_SM_STATE);
if ((myHandle.currentEvent == Main.halt_SM_EVENT)) {
myHandle.stack = null;
myHandle.buffer = null;
myHandle.currentArg = null;
SM_HANDLE.halted = (SM_HANDLE.halted + myHandle);
SM_HANDLE.enabled = (SM_HANDLE.enabled - myHandle);
return;

}
trace("<StateLog> Unhandled event exception by machine RobotStateManager-{0}\n", myHandle.instance);
assert(false, "Unhandled event exception by machine RobotStateManager");

;

}
void Run(SM_STATE state) {
bool doPop;
bool hasNullTransitionOrAction;

init:
myHandle.Push();
myHandle.stack.state = state;
doPop = RunHelper(true);
while (!doPop) {
hasNullTransitionOrAction = myHandle.stack.HasNullTransitionOrAction();
myHandle.DequeueEvent(hasNullTransitionOrAction);
doPop = RunHelper(false);

}
myHandle.Pop();

;

}
void TraceEnterState(SM_STATE state) {

init:
if ((state == Main.RobotStateManager_Init_SM_STATE)) {
trace("<StateLog> Machine RobotStateManager-{0} entering State Init\n", myHandle.instance);
return;

}
if ((state == Main.RobotStateManager_WaitForCommands_SM_STATE)) {
trace("<StateLog> Machine RobotStateManager-{0} entering State WaitForCommands\n", myHandle.instance);
return;

}
if ((state == Main.RobotStateManager_GetStateFromEnvMachine_SM_STATE)) {
trace("<StateLog> Machine RobotStateManager-{0} entering State GetStateFromEnvMachine\n", myHandle.instance);
return;

}
assert(false, "Internal error");

;

}
void TraceExitState(SM_STATE state) {

init:
if ((state == Main.RobotStateManager_Init_SM_STATE)) {
trace("<StateLog> Machine RobotStateManager-{0} exiting State Init\n", myHandle.instance);
return;

}
if ((state == Main.RobotStateManager_WaitForCommands_SM_STATE)) {
trace("<StateLog> Machine RobotStateManager-{0} exiting State WaitForCommands\n", myHandle.instance);
return;

}
if ((state == Main.RobotStateManager_GetStateFromEnvMachine_SM_STATE)) {
trace("<StateLog> Machine RobotStateManager-{0} exiting State GetStateFromEnvMachine\n", myHandle.instance);
return;

}
assert(false, "Internal error");

;

}
void CalculateDeferredAndActionSet(SM_STATE state) {

init:
if ((state == Main.RobotStateManager_Init_SM_STATE)) {
RobotStateManager_Init_CalculateDeferredAndActionSet();
return;

}
if ((state == Main.RobotStateManager_WaitForCommands_SM_STATE)) {
RobotStateManager_WaitForCommands_CalculateDeferredAndActionSet();
return;

}
if ((state == Main.RobotStateManager_GetStateFromEnvMachine_SM_STATE)) {
RobotStateManager_GetStateFromEnvMachine_CalculateDeferredAndActionSet();
return;

}
assert(false, "Internal error");

;

}
bool RunHelper(bool start) {
SM_STATE state;
SM_TRANSITION transition;
ActionOrFun actionFun;

init:
state = myHandle.stack.state;
if (start) {
goto enter;
} else {
goto handle;
}

;


enter:
state = myHandle.stack.state;
TraceEnterState(state);
CalculateDeferredAndActionSet(state);
actionFun = state.entryFun;

;


execute:
ReentrancyHelper(actionFun);
if ((myHandle.cont.reason == ContinuationReason.Raise)) {
goto handle;
}
myHandle.currentEvent = null;
myHandle.currentArg = PRT_VALUE.PrtMkDefaultValue(Main.type_0_PRT_TYPE);
if ((myHandle.cont.reason != ContinuationReason.Pop)) {
return false;

}
TraceExitState(state);
ReentrancyHelper(state.exitFun);
return true;

;


handle:
if ((myHandle.currentEvent in myHandle.stack.actionSet)) {
actionFun = myHandle.stack.Find(myHandle.currentEvent);
goto execute;
}
transition = state.FindPushTransition(myHandle.currentEvent);
if ((transition != null)) {
Run(transition.to);
if ((myHandle.currentEvent == null)) {
return false;

} else {
goto handle;
}

}
TraceExitState(state);
ReentrancyHelper(state.exitFun);
transition = state.FindTransition(myHandle.currentEvent);
if ((transition == null)) {
return true;

}
ReentrancyHelper(transition.fun);
myHandle.stack.state = transition.to;
state = myHandle.stack.state;
goto enter;
;

}
bool ProcessContinuation() {
bool doPop;

init:
if ((myHandle.cont.reason == ContinuationReason.Return)) {
return true;

}
if ((myHandle.cont.reason == ContinuationReason.Pop)) {
return true;

}
if ((myHandle.cont.reason == ContinuationReason.Raise)) {
return true;

}
if ((myHandle.cont.reason == ContinuationReason.Receive)) {
myHandle.DequeueEvent(false);
return false;

}
if ((myHandle.cont.reason == ContinuationReason.Nondet)) {
myHandle.cont.nondet = choose(bool);
return false;

}
if ((myHandle.cont.reason == ContinuationReason.NewMachine)) {
yield;
return false;

}
if ((myHandle.cont.reason == ContinuationReason.Send)) {
yield;
return false;

}

;

}
void ReentrancyHelper(ActionOrFun actionFun) {
PRT_VALUE_ARRAY locals;
bool doPop;

init:
doPop = false;
myHandle.cont.Reset();
if ((actionFun == ActionOrFun._ResetObstacle)) {
trace("<FunctionLog> Machine RobotStateManager-{0} executing Function ResetObstacle\n", myHandle.instance);
locals = null;
myHandle.cont.PushReturnTo(0, locals, myHandle.currentEvent, myHandle.currentArg);
goto execute_ResetObstacle;
}
if ((actionFun == ActionOrFun._Seal)) {
trace("<FunctionLog> Machine RobotStateManager-{0} executing Function Seal\n", myHandle.instance);
locals = null;
myHandle.cont.PushReturnTo(0, locals, myHandle.currentEvent, myHandle.currentArg);
goto execute_Seal;
}
if ((actionFun == ActionOrFun._Unseal)) {
trace("<FunctionLog> Machine RobotStateManager-{0} executing Function Unseal\n", myHandle.instance);
locals = null;
myHandle.cont.PushReturnTo(0, locals, myHandle.currentEvent, myHandle.currentArg);
goto execute_Unseal;
}
if ((actionFun == ActionOrFun._InitializeMotionPlanning)) {
trace("<FunctionLog> Machine RobotStateManager-{0} executing Function InitializeMotionPlanning\n", myHandle.instance);
locals = new PRT_VALUE_ARRAY[4];
locals[3] = PRT_VALUE.PrtMkDefaultValue(Main.type_1_PRT_TYPE);
locals[2] = PRT_VALUE.PrtMkDefaultValue(Main.type_2_PRT_TYPE);
locals[1] = PRT_VALUE.PrtMkDefaultValue(Main.type_2_PRT_TYPE);
locals[0] = PRT_VALUE.PrtMkDefaultValue(Main.type_4_PRT_TYPE);
myHandle.cont.PushReturnTo(0, locals, myHandle.currentEvent, myHandle.currentArg);
goto execute_InitializeMotionPlanning;
}
if ((actionFun == ActionOrFun._CAT_CAGE_LOC)) {
trace("<FunctionLog> Machine RobotStateManager-{0} executing Function CAT_CAGE_LOC\n", myHandle.instance);
locals = null;
myHandle.cont.PushReturnTo(0, locals, myHandle.currentEvent, myHandle.currentArg);
goto execute_CAT_CAGE_LOC;
}
if ((actionFun == ActionOrFun._DOG_CAGE_LOC)) {
trace("<FunctionLog> Machine RobotStateManager-{0} executing Function DOG_CAGE_LOC\n", myHandle.instance);
locals = null;
myHandle.cont.PushReturnTo(0, locals, myHandle.currentEvent, myHandle.currentArg);
goto execute_DOG_CAGE_LOC;
}
if ((actionFun == ActionOrFun._MICE_CAGE_LOC)) {
trace("<FunctionLog> Machine RobotStateManager-{0} executing Function MICE_CAGE_LOC\n", myHandle.instance);
locals = null;
myHandle.cont.PushReturnTo(0, locals, myHandle.currentEvent, myHandle.currentArg);
goto execute_MICE_CAGE_LOC;
}
if ((actionFun == ActionOrFun._BATTERY_THRESHOLD)) {
trace("<FunctionLog> Machine RobotStateManager-{0} executing Function BATTERY_THRESHOLD\n", myHandle.instance);
locals = null;
myHandle.cont.PushReturnTo(0, locals, myHandle.currentEvent, myHandle.currentArg);
goto execute_BATTERY_THRESHOLD;
}
if ((actionFun == ActionOrFun._DOG)) {
trace("<FunctionLog> Machine RobotStateManager-{0} executing Function DOG\n", myHandle.instance);
locals = null;
myHandle.cont.PushReturnTo(0, locals, myHandle.currentEvent, myHandle.currentArg);
goto execute_DOG;
}
if ((actionFun == ActionOrFun._CAT)) {
trace("<FunctionLog> Machine RobotStateManager-{0} executing Function CAT\n", myHandle.instance);
locals = null;
myHandle.cont.PushReturnTo(0, locals, myHandle.currentEvent, myHandle.currentArg);
goto execute_CAT;
}
if ((actionFun == ActionOrFun._MICE)) {
trace("<FunctionLog> Machine RobotStateManager-{0} executing Function MICE\n", myHandle.instance);
locals = null;
myHandle.cont.PushReturnTo(0, locals, myHandle.currentEvent, myHandle.currentArg);
goto execute_MICE;
}
if ((actionFun == ActionOrFun._BATTERY_CHARGE_LOCATION)) {
trace("<FunctionLog> Machine RobotStateManager-{0} executing Function BATTERY_CHARGE_LOCATION\n", myHandle.instance);
locals = null;
myHandle.cont.PushReturnTo(0, locals, myHandle.currentEvent, myHandle.currentArg);
goto execute_BATTERY_CHARGE_LOCATION;
}
if ((actionFun == ActionOrFun._ROBOT_START_STATE)) {
trace("<FunctionLog> Machine RobotStateManager-{0} executing Function ROBOT_START_STATE\n", myHandle.instance);
locals = null;
myHandle.cont.PushReturnTo(0, locals, myHandle.currentEvent, myHandle.currentArg);
goto execute_ROBOT_START_STATE;
}
if ((actionFun == ActionOrFun._SIZE_OF_GRID)) {
trace("<FunctionLog> Machine RobotStateManager-{0} executing Function SIZE_OF_GRID\n", myHandle.instance);
locals = null;
myHandle.cont.PushReturnTo(0, locals, myHandle.currentEvent, myHandle.currentArg);
goto execute_SIZE_OF_GRID;
}
if ((actionFun == ActionOrFun._ROBOT_SCAN_LOCATIONS)) {
trace("<FunctionLog> Machine RobotStateManager-{0} executing Function ROBOT_SCAN_LOCATIONS\n", myHandle.instance);
locals = new PRT_VALUE_ARRAY[3];
locals[2] = PRT_VALUE.PrtMkDefaultValue(Main.type_2_PRT_TYPE);
locals[1] = PRT_VALUE.PrtMkDefaultValue(Main.type_2_PRT_TYPE);
locals[0] = PRT_VALUE.PrtMkDefaultValue(Main.type_1_PRT_TYPE);
myHandle.cont.PushReturnTo(0, locals, myHandle.currentEvent, myHandle.currentArg);
goto execute_ROBOT_SCAN_LOCATIONS;
}
if ((actionFun == ActionOrFun._GetStaticGoals)) {
trace("<FunctionLog> Machine RobotStateManager-{0} executing Function GetStaticGoals\n", myHandle.instance);
locals = new PRT_VALUE_ARRAY[1];
locals[0] = PRT_VALUE.PrtMkDefaultValue(Main.type_7_PRT_TYPE);
myHandle.cont.PushReturnTo(0, locals, myHandle.currentEvent, myHandle.currentArg);
goto execute_GetStaticGoals;
}
if ((actionFun == ActionOrFun._GetStaticObstacles)) {
trace("<FunctionLog> Machine RobotStateManager-{0} executing Function GetStaticObstacles\n", myHandle.instance);
locals = new PRT_VALUE_ARRAY[1];
locals[0] = PRT_VALUE.PrtMkDefaultValue(Main.type_2_PRT_TYPE);
myHandle.cont.PushReturnTo(0, locals, myHandle.currentEvent, myHandle.currentArg);
goto execute_GetStaticObstacles;
}
if ((actionFun == ActionOrFun._RobotStateManager_ignore)) {
trace("<FunctionLog> Machine RobotStateManager-{0} executing Function ignore\n", myHandle.instance);
locals = null;
myHandle.cont.PushReturnTo(0, locals, myHandle.currentEvent, myHandle.currentArg);
goto execute_ignore;
}
if ((actionFun == ActionOrFun._RobotStateManager_AnonFun0)) {
locals = null;
myHandle.cont.PushReturnTo(0, locals, myHandle.currentEvent, myHandle.currentArg);
goto execute_AnonFun0;
}
if ((actionFun == ActionOrFun._RobotStateManager_AnonFun1)) {
locals = null;
myHandle.cont.PushReturnTo(0, locals, myHandle.currentEvent, myHandle.currentArg);
goto execute_AnonFun1;
}
if ((actionFun == ActionOrFun._RobotStateManager_AnonFun2)) {
locals = null;
myHandle.cont.PushReturnTo(0, locals, myHandle.currentEvent, myHandle.currentArg);
goto execute_AnonFun2;
}
if ((actionFun == ActionOrFun._RobotStateManager_AnonFun3)) {
locals = null;
myHandle.cont.PushReturnTo(0, locals, myHandle.currentEvent, myHandle.currentArg);
goto execute_AnonFun3;
}
if ((actionFun == ActionOrFun._RobotStateManager_AnonFun4)) {
locals = null;
myHandle.cont.PushReturnTo(0, locals, myHandle.currentEvent, myHandle.currentArg);
goto execute_AnonFun4;
}
if ((actionFun == ActionOrFun._RobotStateManager_AnonFun5)) {
locals = null;
myHandle.cont.PushReturnTo(0, locals, myHandle.currentEvent, myHandle.currentArg);
goto execute_AnonFun5;
}
assert(false, "Internal error");

;


execute_ResetObstacle:
while (!doPop) {
Main.ResetObstacle(myHandle, myHandle.cont);
doPop = ProcessContinuation();

}
return;

;


execute_Seal:
while (!doPop) {
Main.Seal(myHandle, myHandle.cont);
doPop = ProcessContinuation();

}
return;

;


execute_Unseal:
while (!doPop) {
Main.Unseal(myHandle, myHandle.cont);
doPop = ProcessContinuation();

}
return;

;


execute_InitializeMotionPlanning:
while (!doPop) {
Main.InitializeMotionPlanning(myHandle, myHandle.cont);
doPop = ProcessContinuation();

}
return;

;


execute_CAT_CAGE_LOC:
while (!doPop) {
Main.CAT_CAGE_LOC(myHandle, myHandle.cont);
doPop = ProcessContinuation();

}
return;

;


execute_DOG_CAGE_LOC:
while (!doPop) {
Main.DOG_CAGE_LOC(myHandle, myHandle.cont);
doPop = ProcessContinuation();

}
return;

;


execute_MICE_CAGE_LOC:
while (!doPop) {
Main.MICE_CAGE_LOC(myHandle, myHandle.cont);
doPop = ProcessContinuation();

}
return;

;


execute_BATTERY_THRESHOLD:
while (!doPop) {
Main.BATTERY_THRESHOLD(myHandle, myHandle.cont);
doPop = ProcessContinuation();

}
return;

;


execute_DOG:
while (!doPop) {
Main.DOG(myHandle, myHandle.cont);
doPop = ProcessContinuation();

}
return;

;


execute_CAT:
while (!doPop) {
Main.CAT(myHandle, myHandle.cont);
doPop = ProcessContinuation();

}
return;

;


execute_MICE:
while (!doPop) {
Main.MICE(myHandle, myHandle.cont);
doPop = ProcessContinuation();

}
return;

;


execute_BATTERY_CHARGE_LOCATION:
while (!doPop) {
Main.BATTERY_CHARGE_LOCATION(myHandle, myHandle.cont);
doPop = ProcessContinuation();

}
return;

;


execute_ROBOT_START_STATE:
while (!doPop) {
Main.ROBOT_START_STATE(myHandle, myHandle.cont);
doPop = ProcessContinuation();

}
return;

;


execute_SIZE_OF_GRID:
while (!doPop) {
Main.SIZE_OF_GRID(myHandle, myHandle.cont);
doPop = ProcessContinuation();

}
return;

;


execute_ROBOT_SCAN_LOCATIONS:
while (!doPop) {
Main.ROBOT_SCAN_LOCATIONS(myHandle, myHandle.cont);
doPop = ProcessContinuation();

}
return;

;


execute_GetStaticGoals:
while (!doPop) {
Main.GetStaticGoals(myHandle, myHandle.cont);
doPop = ProcessContinuation();

}
return;

;


execute_GetStaticObstacles:
while (!doPop) {
Main.GetStaticObstacles(myHandle, myHandle.cont);
doPop = ProcessContinuation();

}
return;

;


execute_ignore:
while (!doPop) {
ignore(myHandle.cont);
doPop = ProcessContinuation();

}
return;

;


execute_AnonFun0:
while (!doPop) {
AnonFun0(myHandle.cont);
doPop = ProcessContinuation();

}
return;

;


execute_AnonFun1:
while (!doPop) {
AnonFun1(myHandle.cont);
doPop = ProcessContinuation();

}
return;

;


execute_AnonFun2:
while (!doPop) {
AnonFun2(myHandle.cont);
doPop = ProcessContinuation();

}
return;

;


execute_AnonFun3:
while (!doPop) {
AnonFun3(myHandle.cont);
doPop = ProcessContinuation();

}
return;

;


execute_AnonFun4:
while (!doPop) {
AnonFun4(myHandle.cont);
doPop = ProcessContinuation();

}
return;

;


execute_AnonFun5:
while (!doPop) {
AnonFun5(myHandle.cont);
doPop = ProcessContinuation();

}
return;

;

}
void ignore(Continuation entryCtxt) {
PRT_VALUE_ARRAY locals;
SM_EVENT currentEvent;
PRT_VALUE currentArg;
StackFrame retTo_38;

dummy:
retTo_38 = entryCtxt.PopReturnTo();
locals = retTo_38.locals;
currentEvent = retTo_38.currentEvent;
currentArg = retTo_38.currentArg;
if ((retTo_38.pc == 0)) {
goto start;
}
assert(false, "Internal error");

start:

;
entryCtxt.Return();
return;

;

}
void AnonFun0(Continuation entryCtxt) {
PRT_VALUE_ARRAY locals;
SM_EVENT currentEvent;
PRT_VALUE currentArg;
StackFrame retTo_39;

dummy:
retTo_39 = entryCtxt.PopReturnTo();
locals = retTo_39.locals;
currentEvent = retTo_39.currentEvent;
currentArg = retTo_39.currentArg;
if ((retTo_39.pc == 0)) {
goto start;
}
assert(false, "Internal error");

start:

;
entryCtxt.Return();
return;

;

}
void AnonFun1(Continuation entryCtxt) {
PRT_VALUE_ARRAY locals;
SM_EVENT currentEvent;
PRT_VALUE currentArg;
PRT_VALUE tmpVar_69;
PRT_VALUE tmpVal_57;
PRT_VALUE tmpVal_58;
PRT_VALUE tmpVar_70;
PRT_VALUE tmpVal_59;
PRT_VALUE tmpVal_60;
PRT_VALUE tmpVar_71;
PRT_VALUE tmpVal_61;
PRT_VALUE tmp_85;
PRT_VALUE tmpVar_72;
StackFrame retTo_40;

dummy:
retTo_40 = entryCtxt.PopReturnTo();
locals = retTo_40.locals;
currentEvent = retTo_40.currentEvent;
currentArg = retTo_40.currentArg;
if ((retTo_40.pc == 0)) {
goto start;
}
assert(false, "Internal error");

start:
tmpVar_69 = PRT_VALUE.PrtCastValue(currentArg, Main.type_10_PRT_TYPE);
tmpVal_57 = PRT_VALUE.PrtTupleGet(tmpVar_69, 0);
tmpVal_58 = PRT_VALUE.PrtTupleGet(tmpVal_57, 0);
currentLocation = PRT_VALUE.PrtCloneValue(tmpVal_58);
tmpVar_70 = PRT_VALUE.PrtCastValue(currentArg, Main.type_10_PRT_TYPE);
tmpVal_59 = PRT_VALUE.PrtTupleGet(tmpVar_70, 0);
tmpVal_60 = PRT_VALUE.PrtTupleGet(tmpVal_59, 1);
batteryLevel = PRT_VALUE.PrtCloneValue(tmpVal_60);
tmpVar_71 = PRT_VALUE.PrtCastValue(currentArg, Main.type_10_PRT_TYPE);
tmpVal_61 = PRT_VALUE.PrtTupleGet(tmpVar_71, 1);
EnvMachine = PRT_VALUE.PrtCloneValue(tmpVal_61);
tmp_85 = PRT_VALUE.PrtMkDefaultValue(Main.type_1_PRT_TYPE);
PRT_VALUE.PrtPrimSetInt(tmp_85, 0);
tmpVar_72 = PRT_VALUE.PrtMkDefaultValue(Main.type_5_PRT_TYPE);
PRT_VALUE.PrtPrimSetBool(tmpVar_72, (batteryLevel.nt > tmp_85.nt));
assert(tmpVar_72.bl, "(28, 4): Assert failed");

;
entryCtxt.Return();
return;

;

}
void AnonFun2(Continuation entryCtxt) {
PRT_VALUE_ARRAY locals;
SM_EVENT currentEvent;
PRT_VALUE currentArg;
PRT_VALUE tmpVar_73;
StackFrame retTo_41;

dummy:
retTo_41 = entryCtxt.PopReturnTo();
locals = retTo_41.locals;
currentEvent = retTo_41.currentEvent;
currentArg = retTo_41.currentArg;
if ((retTo_41.pc == 0)) {
goto start;
}
assert(false, "Internal error");

start:
tmpVar_73 = PRT_VALUE.PrtCastValue(currentArg, Main.type_8_PRT_TYPE);
sensingMachine = PRT_VALUE.PrtCloneValue(tmpVar_73);

;
entryCtxt.Return();
return;

;

}
void AnonFun3(Continuation entryCtxt) {
PRT_VALUE_ARRAY locals;
SM_EVENT currentEvent;
PRT_VALUE currentArg;
PRT_VALUE tmpVal_62;
PRT_VALUE_ARRAY argCloneVar_32;
PRT_VALUE ret_4;
bool tmpVar_74;
PRT_VALUE tmpVar_75;
PRT_VALUE tmpVal_63;
PRT_VALUE tmp_86;
PRT_VALUE tmpVal_64;
PRT_VALUE tmpVal_65;
PRT_VALUE tmpVar_76;
StackFrame retTo_42;

dummy:
retTo_42 = entryCtxt.PopReturnTo();
locals = retTo_42.locals;
currentEvent = retTo_42.currentEvent;
currentArg = retTo_42.currentArg;
if ((retTo_42.pc == 0)) {
goto start;
}
if ((retTo_42.pc == 1)) {
goto AnonFun3_4;
}
assert(false, "Internal error");

start:
tmpVal_62 = PRT_VALUE.PrtTupleGet(currentArg, 0);
argCloneVar_32 = null;
entryCtxt.PushReturnTo(0, argCloneVar_32, currentEvent, currentArg);

AnonFun3_4:
Main.BATTERY_CHARGE_LOCATION(myHandle, entryCtxt);

;
if ((entryCtxt.reason == ContinuationReason.Return)) {
ret_4 = entryCtxt.retVal;

} else {
entryCtxt.PushReturnTo(1, locals, currentEvent, currentArg);
return;

}
tmpVar_74 = PRT_VALUE.PrtIsEqualValue(tmpVal_62, ret_4);
tmpVar_75 = PRT_VALUE.PrtMkDefaultValue(Main.type_5_PRT_TYPE);
PRT_VALUE.PrtPrimSetBool(tmpVar_75, tmpVar_74);
if (!tmpVar_75.bl) {
goto AnonFun3_if_1_else;
}
tmpVal_63 = PRT_VALUE.PrtTupleGet(currentArg, 0);
currentLocation = PRT_VALUE.PrtCloneValue(tmpVal_63);
tmp_86 = PRT_VALUE.PrtMkDefaultValue(Main.type_1_PRT_TYPE);
PRT_VALUE.PrtPrimSetInt(tmp_86, 30);
batteryLevel = PRT_VALUE.PrtCloneValue(tmp_86);
goto AnonFun3_if_1_end;
AnonFun3_if_1_else:
tmpVal_64 = PRT_VALUE.PrtTupleGet(currentArg, 0);
currentLocation = PRT_VALUE.PrtCloneValue(tmpVal_64);
tmpVal_65 = PRT_VALUE.PrtTupleGet(currentArg, 1);
tmpVar_76 = PRT_VALUE.PrtMkDefaultValue(Main.type_1_PRT_TYPE);
PRT_VALUE.PrtPrimSetInt(tmpVar_76, (tmpVal_65.nt + batteryLevel.nt));
batteryLevel = PRT_VALUE.PrtCloneValue(tmpVar_76);

;

AnonFun3_if_1_end:

;

;
entryCtxt.Return();
return;

;

}
void AnonFun4(Continuation entryCtxt) {
PRT_VALUE_ARRAY locals;
SM_EVENT currentEvent;
PRT_VALUE currentArg;
PRT_VALUE tmp_87;
PRT_VALUE tmp_88;
PRT_VALUE tmpTuple_15;
PRT_VALUE tmpPayload_26;
StackFrame retTo_43;

dummy:
retTo_43 = entryCtxt.PopReturnTo();
locals = retTo_43.locals;
currentEvent = retTo_43.currentEvent;
currentArg = retTo_43.currentArg;
if ((retTo_43.pc == 0)) {
goto start;
}
if ((retTo_43.pc == 1)) {
goto AnonFun4_0;
}
assert(false, "Internal error");

start:
tmp_87 = PRT_VALUE.PrtMkDefaultValue(Main.type_12_PRT_TYPE);
PRT_VALUE.PrtPrimSetEvent(tmp_87, Main.GetEnv_SM_EVENT);
tmp_88 = PRT_VALUE.PrtMkDefaultValue(Main.type_8_PRT_TYPE);
PRT_VALUE.PrtPrimSetMachine(tmp_88, myHandle);
tmpTuple_15 = PRT_VALUE.PrtMkDefaultValue(Main.type_21_PRT_TYPE);
PRT_VALUE.PrtTupleSet(tmpTuple_15, 0, tmp_88);
PRT_VALUE.PrtTupleSet(tmpTuple_15, 1, currentLocation);
assert((EnvMachine.mach != null), "Target of send must be non-null");
tmpPayload_26 = PRT_VALUE.PrtCloneValue(tmpTuple_15);
Main.InvokeMachine_Prop_1(tmp_87.ev, tmpPayload_26);
Main.InvokeMachine_Prop_2(tmp_87.ev, tmpPayload_26);
Main.InvokeMachine_Prop_6(tmp_87.ev, tmpPayload_26);
Main.InvokeMachine_Prop_7(tmp_87.ev, tmpPayload_26);
Main.InvokeMachine_Prop_8(tmp_87.ev, tmpPayload_26);
Main.InvokeMachine_Prop_9(tmp_87.ev, tmpPayload_26);
Main.InvokeMachine_Prop_3(tmp_87.ev, tmpPayload_26);
Main.InvokeMachine_Prop_10a(tmp_87.ev, tmpPayload_26);
Main.InvokeMachine_Prop_10b(tmp_87.ev, tmpPayload_26);
Main.InvokeMachine_Prop_10c(tmp_87.ev, tmpPayload_26);
EnvMachine.mach.EnqueueEvent(tmp_87.ev, tmpPayload_26, myHandle);
entryCtxt.Send(1, locals, currentEvent, currentArg);
return;

AnonFun4_0:

;

;
entryCtxt.Return();
return;

;

}
void AnonFun5(Continuation entryCtxt) {
PRT_VALUE_ARRAY locals;
SM_EVENT currentEvent;
PRT_VALUE currentArg;
PRT_VALUE tmpVal_66;
bool tmpVar_77;
PRT_VALUE tmpVar_78;
PRT_VALUE tmp_89;
PRT_VALUE tmpTuple_16;
PRT_VALUE tmpVal_67;
PRT_VALUE tmpTuple_17;
PRT_VALUE tmpPayload_27;
StackFrame retTo_44;

dummy:
retTo_44 = entryCtxt.PopReturnTo();
locals = retTo_44.locals;
currentEvent = retTo_44.currentEvent;
currentArg = retTo_44.currentArg;
if ((retTo_44.pc == 0)) {
goto start;
}
if ((retTo_44.pc == 1)) {
goto AnonFun5_6;
}
assert(false, "Internal error");

start:
tmpVal_66 = PRT_VALUE.PrtTupleGet(currentArg, 0);
tmpVar_77 = PRT_VALUE.PrtIsEqualValue(tmpVal_66, currentLocation);
tmpVar_78 = PRT_VALUE.PrtMkDefaultValue(Main.type_5_PRT_TYPE);
PRT_VALUE.PrtPrimSetBool(tmpVar_78, tmpVar_77);
assert(tmpVar_78.bl, "(57, 4): Assert failed");
tmp_89 = PRT_VALUE.PrtMkDefaultValue(Main.type_12_PRT_TYPE);
PRT_VALUE.PrtPrimSetEvent(tmp_89, Main.CurrentState_SM_EVENT);
tmpTuple_16 = PRT_VALUE.PrtMkDefaultValue(Main.type_9_PRT_TYPE);
PRT_VALUE.PrtTupleSet(tmpTuple_16, 0, currentLocation);
PRT_VALUE.PrtTupleSet(tmpTuple_16, 1, batteryLevel);
tmpVal_67 = PRT_VALUE.PrtTupleGet(currentArg, 1);
tmpTuple_17 = PRT_VALUE.PrtMkDefaultValue(Main.type_22_PRT_TYPE);
PRT_VALUE.PrtTupleSet(tmpTuple_17, 0, tmpTuple_16);
PRT_VALUE.PrtTupleSet(tmpTuple_17, 1, tmpVal_67);
assert((sensingMachine.mach != null), "Target of send must be non-null");
tmpPayload_27 = PRT_VALUE.PrtCloneValue(tmpTuple_17);
Main.InvokeMachine_Prop_1(tmp_89.ev, tmpPayload_27);
Main.InvokeMachine_Prop_2(tmp_89.ev, tmpPayload_27);
Main.InvokeMachine_Prop_6(tmp_89.ev, tmpPayload_27);
Main.InvokeMachine_Prop_7(tmp_89.ev, tmpPayload_27);
Main.InvokeMachine_Prop_8(tmp_89.ev, tmpPayload_27);
Main.InvokeMachine_Prop_9(tmp_89.ev, tmpPayload_27);
Main.InvokeMachine_Prop_3(tmp_89.ev, tmpPayload_27);
Main.InvokeMachine_Prop_10a(tmp_89.ev, tmpPayload_27);
Main.InvokeMachine_Prop_10b(tmp_89.ev, tmpPayload_27);
Main.InvokeMachine_Prop_10c(tmp_89.ev, tmpPayload_27);
sensingMachine.mach.EnqueueEvent(tmp_89.ev, tmpPayload_27, myHandle);
entryCtxt.Send(1, locals, currentEvent, currentArg);
return;

AnonFun5_6:

;
myHandle.currentEvent = null;
myHandle.currentArg = null;
entryCtxt.Pop();
return;

;
entryCtxt.Return();
return;

;

}
};

class MACHINE_SenseAndInfer{
PRT_VALUE robotTP;
PRT_VALUE robotStManager;
PRT_VALUE currentRobotState;
SM_HANDLE myHandle;
void SenseAndInfer_Init_CalculateDeferredAndActionSet() {

dummy:
myHandle.stack.deferredSet = new SM_EVENT_SET;
myHandle.stack.actionSet = new SM_EVENT_SET;
myHandle.stack.AddStackDeferredSet(myHandle.stack.deferredSet);
myHandle.stack.deferredSet = (myHandle.stack.deferredSet - Main.local_SM_EVENT);
myHandle.stack.AddStackActionSet(myHandle.stack.actionSet);
myHandle.stack.actionSet = (myHandle.stack.actionSet - Main.local_SM_EVENT);
myHandle.stack.es = new SM_EVENT_ARRAY[0];
myHandle.stack.as = new ActionOrFun_ARRAY[0];

;

}
void SenseAndInfer_PeriodicallySenseUpdate_CalculateDeferredAndActionSet() {

dummy:
myHandle.stack.deferredSet = new SM_EVENT_SET;
myHandle.stack.actionSet = new SM_EVENT_SET;
myHandle.stack.AddStackDeferredSet(myHandle.stack.deferredSet);
myHandle.stack.deferredSet = (myHandle.stack.deferredSet - Main.GetRobotState_SM_EVENT);
myHandle.stack.deferredSet = (myHandle.stack.deferredSet - Main.null_SM_EVENT);
myHandle.stack.AddStackActionSet(myHandle.stack.actionSet);
myHandle.stack.actionSet = (myHandle.stack.actionSet + Main.GetRobotState_SM_EVENT);
myHandle.stack.actionSet = (myHandle.stack.actionSet - Main.null_SM_EVENT);
myHandle.stack.es = new SM_EVENT_ARRAY[1];
myHandle.stack.as = new ActionOrFun_ARRAY[1];
myHandle.stack.es[0] = Main.GetRobotState_SM_EVENT;
myHandle.stack.as[0] = ActionOrFun._SenseAndInfer_AnonFun3;

;

}
void SenseAndInfer_SenseEnvironment_CalculateDeferredAndActionSet() {

dummy:
myHandle.stack.deferredSet = new SM_EVENT_SET;
myHandle.stack.actionSet = new SM_EVENT_SET;
myHandle.stack.AddStackDeferredSet(myHandle.stack.deferredSet);
myHandle.stack.deferredSet = (myHandle.stack.deferredSet + Main.GetRobotState_SM_EVENT);
myHandle.stack.AddStackActionSet(myHandle.stack.actionSet);
myHandle.stack.actionSet = (myHandle.stack.actionSet - Main.GetRobotState_SM_EVENT);
myHandle.stack.es = new SM_EVENT_ARRAY[0];
myHandle.stack.as = new ActionOrFun_ARRAY[0];

;

}
void Start() {

dummy:
Run(Main.SenseAndInfer_Init_SM_STATE);
if ((myHandle.currentEvent == Main.halt_SM_EVENT)) {
myHandle.stack = null;
myHandle.buffer = null;
myHandle.currentArg = null;
SM_HANDLE.halted = (SM_HANDLE.halted + myHandle);
SM_HANDLE.enabled = (SM_HANDLE.enabled - myHandle);
return;

}
trace("<StateLog> Unhandled event exception by machine SenseAndInfer-{0}\n", myHandle.instance);
assert(false, "Unhandled event exception by machine SenseAndInfer");

;

}
void Run(SM_STATE state) {
bool doPop;
bool hasNullTransitionOrAction;

init:
myHandle.Push();
myHandle.stack.state = state;
doPop = RunHelper(true);
while (!doPop) {
hasNullTransitionOrAction = myHandle.stack.HasNullTransitionOrAction();
myHandle.DequeueEvent(hasNullTransitionOrAction);
doPop = RunHelper(false);

}
myHandle.Pop();

;

}
void TraceEnterState(SM_STATE state) {

init:
if ((state == Main.SenseAndInfer_Init_SM_STATE)) {
trace("<StateLog> Machine SenseAndInfer-{0} entering State Init\n", myHandle.instance);
return;

}
if ((state == Main.SenseAndInfer_PeriodicallySenseUpdate_SM_STATE)) {
trace("<StateLog> Machine SenseAndInfer-{0} entering State PeriodicallySenseUpdate\n", myHandle.instance);
return;

}
if ((state == Main.SenseAndInfer_SenseEnvironment_SM_STATE)) {
trace("<StateLog> Machine SenseAndInfer-{0} entering State SenseEnvironment\n", myHandle.instance);
return;

}
assert(false, "Internal error");

;

}
void TraceExitState(SM_STATE state) {

init:
if ((state == Main.SenseAndInfer_Init_SM_STATE)) {
trace("<StateLog> Machine SenseAndInfer-{0} exiting State Init\n", myHandle.instance);
return;

}
if ((state == Main.SenseAndInfer_PeriodicallySenseUpdate_SM_STATE)) {
trace("<StateLog> Machine SenseAndInfer-{0} exiting State PeriodicallySenseUpdate\n", myHandle.instance);
return;

}
if ((state == Main.SenseAndInfer_SenseEnvironment_SM_STATE)) {
trace("<StateLog> Machine SenseAndInfer-{0} exiting State SenseEnvironment\n", myHandle.instance);
return;

}
assert(false, "Internal error");

;

}
void CalculateDeferredAndActionSet(SM_STATE state) {

init:
if ((state == Main.SenseAndInfer_Init_SM_STATE)) {
SenseAndInfer_Init_CalculateDeferredAndActionSet();
return;

}
if ((state == Main.SenseAndInfer_PeriodicallySenseUpdate_SM_STATE)) {
SenseAndInfer_PeriodicallySenseUpdate_CalculateDeferredAndActionSet();
return;

}
if ((state == Main.SenseAndInfer_SenseEnvironment_SM_STATE)) {
SenseAndInfer_SenseEnvironment_CalculateDeferredAndActionSet();
return;

}
assert(false, "Internal error");

;

}
bool RunHelper(bool start) {
SM_STATE state;
SM_TRANSITION transition;
ActionOrFun actionFun;

init:
state = myHandle.stack.state;
if (start) {
goto enter;
} else {
goto handle;
}

;


enter:
state = myHandle.stack.state;
TraceEnterState(state);
CalculateDeferredAndActionSet(state);
actionFun = state.entryFun;

;


execute:
ReentrancyHelper(actionFun);
if ((myHandle.cont.reason == ContinuationReason.Raise)) {
goto handle;
}
myHandle.currentEvent = null;
myHandle.currentArg = PRT_VALUE.PrtMkDefaultValue(Main.type_0_PRT_TYPE);
if ((myHandle.cont.reason != ContinuationReason.Pop)) {
return false;

}
TraceExitState(state);
ReentrancyHelper(state.exitFun);
return true;

;


handle:
if ((myHandle.currentEvent in myHandle.stack.actionSet)) {
actionFun = myHandle.stack.Find(myHandle.currentEvent);
goto execute;
}
transition = state.FindPushTransition(myHandle.currentEvent);
if ((transition != null)) {
Run(transition.to);
if ((myHandle.currentEvent == null)) {
return false;

} else {
goto handle;
}

}
TraceExitState(state);
ReentrancyHelper(state.exitFun);
transition = state.FindTransition(myHandle.currentEvent);
if ((transition == null)) {
return true;

}
ReentrancyHelper(transition.fun);
myHandle.stack.state = transition.to;
state = myHandle.stack.state;
goto enter;
;

}
bool ProcessContinuation() {
bool doPop;

init:
if ((myHandle.cont.reason == ContinuationReason.Return)) {
return true;

}
if ((myHandle.cont.reason == ContinuationReason.Pop)) {
return true;

}
if ((myHandle.cont.reason == ContinuationReason.Raise)) {
return true;

}
if ((myHandle.cont.reason == ContinuationReason.Receive)) {
myHandle.DequeueEvent(false);
return false;

}
if ((myHandle.cont.reason == ContinuationReason.Nondet)) {
myHandle.cont.nondet = choose(bool);
return false;

}
if ((myHandle.cont.reason == ContinuationReason.NewMachine)) {
yield;
return false;

}
if ((myHandle.cont.reason == ContinuationReason.Send)) {
yield;
return false;

}

;

}
void ReentrancyHelper(ActionOrFun actionFun) {
PRT_VALUE_ARRAY locals;
bool doPop;

init:
doPop = false;
myHandle.cont.Reset();
if ((actionFun == ActionOrFun._ResetObstacle)) {
trace("<FunctionLog> Machine SenseAndInfer-{0} executing Function ResetObstacle\n", myHandle.instance);
locals = null;
myHandle.cont.PushReturnTo(0, locals, myHandle.currentEvent, myHandle.currentArg);
goto execute_ResetObstacle;
}
if ((actionFun == ActionOrFun._Seal)) {
trace("<FunctionLog> Machine SenseAndInfer-{0} executing Function Seal\n", myHandle.instance);
locals = null;
myHandle.cont.PushReturnTo(0, locals, myHandle.currentEvent, myHandle.currentArg);
goto execute_Seal;
}
if ((actionFun == ActionOrFun._Unseal)) {
trace("<FunctionLog> Machine SenseAndInfer-{0} executing Function Unseal\n", myHandle.instance);
locals = null;
myHandle.cont.PushReturnTo(0, locals, myHandle.currentEvent, myHandle.currentArg);
goto execute_Unseal;
}
if ((actionFun == ActionOrFun._InitializeMotionPlanning)) {
trace("<FunctionLog> Machine SenseAndInfer-{0} executing Function InitializeMotionPlanning\n", myHandle.instance);
locals = new PRT_VALUE_ARRAY[4];
locals[3] = PRT_VALUE.PrtMkDefaultValue(Main.type_1_PRT_TYPE);
locals[2] = PRT_VALUE.PrtMkDefaultValue(Main.type_2_PRT_TYPE);
locals[1] = PRT_VALUE.PrtMkDefaultValue(Main.type_2_PRT_TYPE);
locals[0] = PRT_VALUE.PrtMkDefaultValue(Main.type_4_PRT_TYPE);
myHandle.cont.PushReturnTo(0, locals, myHandle.currentEvent, myHandle.currentArg);
goto execute_InitializeMotionPlanning;
}
if ((actionFun == ActionOrFun._CAT_CAGE_LOC)) {
trace("<FunctionLog> Machine SenseAndInfer-{0} executing Function CAT_CAGE_LOC\n", myHandle.instance);
locals = null;
myHandle.cont.PushReturnTo(0, locals, myHandle.currentEvent, myHandle.currentArg);
goto execute_CAT_CAGE_LOC;
}
if ((actionFun == ActionOrFun._DOG_CAGE_LOC)) {
trace("<FunctionLog> Machine SenseAndInfer-{0} executing Function DOG_CAGE_LOC\n", myHandle.instance);
locals = null;
myHandle.cont.PushReturnTo(0, locals, myHandle.currentEvent, myHandle.currentArg);
goto execute_DOG_CAGE_LOC;
}
if ((actionFun == ActionOrFun._MICE_CAGE_LOC)) {
trace("<FunctionLog> Machine SenseAndInfer-{0} executing Function MICE_CAGE_LOC\n", myHandle.instance);
locals = null;
myHandle.cont.PushReturnTo(0, locals, myHandle.currentEvent, myHandle.currentArg);
goto execute_MICE_CAGE_LOC;
}
if ((actionFun == ActionOrFun._BATTERY_THRESHOLD)) {
trace("<FunctionLog> Machine SenseAndInfer-{0} executing Function BATTERY_THRESHOLD\n", myHandle.instance);
locals = null;
myHandle.cont.PushReturnTo(0, locals, myHandle.currentEvent, myHandle.currentArg);
goto execute_BATTERY_THRESHOLD;
}
if ((actionFun == ActionOrFun._DOG)) {
trace("<FunctionLog> Machine SenseAndInfer-{0} executing Function DOG\n", myHandle.instance);
locals = null;
myHandle.cont.PushReturnTo(0, locals, myHandle.currentEvent, myHandle.currentArg);
goto execute_DOG;
}
if ((actionFun == ActionOrFun._CAT)) {
trace("<FunctionLog> Machine SenseAndInfer-{0} executing Function CAT\n", myHandle.instance);
locals = null;
myHandle.cont.PushReturnTo(0, locals, myHandle.currentEvent, myHandle.currentArg);
goto execute_CAT;
}
if ((actionFun == ActionOrFun._MICE)) {
trace("<FunctionLog> Machine SenseAndInfer-{0} executing Function MICE\n", myHandle.instance);
locals = null;
myHandle.cont.PushReturnTo(0, locals, myHandle.currentEvent, myHandle.currentArg);
goto execute_MICE;
}
if ((actionFun == ActionOrFun._BATTERY_CHARGE_LOCATION)) {
trace("<FunctionLog> Machine SenseAndInfer-{0} executing Function BATTERY_CHARGE_LOCATION\n", myHandle.instance);
locals = null;
myHandle.cont.PushReturnTo(0, locals, myHandle.currentEvent, myHandle.currentArg);
goto execute_BATTERY_CHARGE_LOCATION;
}
if ((actionFun == ActionOrFun._ROBOT_START_STATE)) {
trace("<FunctionLog> Machine SenseAndInfer-{0} executing Function ROBOT_START_STATE\n", myHandle.instance);
locals = null;
myHandle.cont.PushReturnTo(0, locals, myHandle.currentEvent, myHandle.currentArg);
goto execute_ROBOT_START_STATE;
}
if ((actionFun == ActionOrFun._SIZE_OF_GRID)) {
trace("<FunctionLog> Machine SenseAndInfer-{0} executing Function SIZE_OF_GRID\n", myHandle.instance);
locals = null;
myHandle.cont.PushReturnTo(0, locals, myHandle.currentEvent, myHandle.currentArg);
goto execute_SIZE_OF_GRID;
}
if ((actionFun == ActionOrFun._ROBOT_SCAN_LOCATIONS)) {
trace("<FunctionLog> Machine SenseAndInfer-{0} executing Function ROBOT_SCAN_LOCATIONS\n", myHandle.instance);
locals = new PRT_VALUE_ARRAY[3];
locals[2] = PRT_VALUE.PrtMkDefaultValue(Main.type_2_PRT_TYPE);
locals[1] = PRT_VALUE.PrtMkDefaultValue(Main.type_2_PRT_TYPE);
locals[0] = PRT_VALUE.PrtMkDefaultValue(Main.type_1_PRT_TYPE);
myHandle.cont.PushReturnTo(0, locals, myHandle.currentEvent, myHandle.currentArg);
goto execute_ROBOT_SCAN_LOCATIONS;
}
if ((actionFun == ActionOrFun._GetStaticGoals)) {
trace("<FunctionLog> Machine SenseAndInfer-{0} executing Function GetStaticGoals\n", myHandle.instance);
locals = new PRT_VALUE_ARRAY[1];
locals[0] = PRT_VALUE.PrtMkDefaultValue(Main.type_7_PRT_TYPE);
myHandle.cont.PushReturnTo(0, locals, myHandle.currentEvent, myHandle.currentArg);
goto execute_GetStaticGoals;
}
if ((actionFun == ActionOrFun._GetStaticObstacles)) {
trace("<FunctionLog> Machine SenseAndInfer-{0} executing Function GetStaticObstacles\n", myHandle.instance);
locals = new PRT_VALUE_ARRAY[1];
locals[0] = PRT_VALUE.PrtMkDefaultValue(Main.type_2_PRT_TYPE);
myHandle.cont.PushReturnTo(0, locals, myHandle.currentEvent, myHandle.currentArg);
goto execute_GetStaticObstacles;
}
if ((actionFun == ActionOrFun._SenseAndInfer_ignore)) {
trace("<FunctionLog> Machine SenseAndInfer-{0} executing Function ignore\n", myHandle.instance);
locals = null;
myHandle.cont.PushReturnTo(0, locals, myHandle.currentEvent, myHandle.currentArg);
goto execute_ignore;
}
if ((actionFun == ActionOrFun._SenseAndInfer_InferCurrentStateAndInformTPorMP)) {
trace("<FunctionLog> Machine SenseAndInfer-{0} executing Function InferCurrentStateAndInformTPorMP\n", myHandle.instance);
locals = null;
myHandle.cont.PushReturnTo(0, locals, myHandle.currentEvent, myHandle.currentArg);
goto execute_InferCurrentStateAndInformTPorMP;
}
if ((actionFun == ActionOrFun._SenseAndInfer_AnonFun0)) {
locals = null;
myHandle.cont.PushReturnTo(0, locals, myHandle.currentEvent, myHandle.currentArg);
goto execute_AnonFun0;
}
if ((actionFun == ActionOrFun._SenseAndInfer_AnonFun1)) {
locals = null;
myHandle.cont.PushReturnTo(0, locals, myHandle.currentEvent, myHandle.currentArg);
goto execute_AnonFun1;
}
if ((actionFun == ActionOrFun._SenseAndInfer_AnonFun2)) {
locals = null;
myHandle.cont.PushReturnTo(0, locals, myHandle.currentEvent, myHandle.currentArg);
goto execute_AnonFun2;
}
if ((actionFun == ActionOrFun._SenseAndInfer_AnonFun3)) {
locals = null;
myHandle.cont.PushReturnTo(0, locals, myHandle.currentEvent, myHandle.currentArg);
goto execute_AnonFun3;
}
if ((actionFun == ActionOrFun._SenseAndInfer_AnonFun4)) {
locals = null;
myHandle.cont.PushReturnTo(0, locals, myHandle.currentEvent, myHandle.currentArg);
goto execute_AnonFun4;
}
assert(false, "Internal error");

;


execute_ResetObstacle:
while (!doPop) {
Main.ResetObstacle(myHandle, myHandle.cont);
doPop = ProcessContinuation();

}
return;

;


execute_Seal:
while (!doPop) {
Main.Seal(myHandle, myHandle.cont);
doPop = ProcessContinuation();

}
return;

;


execute_Unseal:
while (!doPop) {
Main.Unseal(myHandle, myHandle.cont);
doPop = ProcessContinuation();

}
return;

;


execute_InitializeMotionPlanning:
while (!doPop) {
Main.InitializeMotionPlanning(myHandle, myHandle.cont);
doPop = ProcessContinuation();

}
return;

;


execute_CAT_CAGE_LOC:
while (!doPop) {
Main.CAT_CAGE_LOC(myHandle, myHandle.cont);
doPop = ProcessContinuation();

}
return;

;


execute_DOG_CAGE_LOC:
while (!doPop) {
Main.DOG_CAGE_LOC(myHandle, myHandle.cont);
doPop = ProcessContinuation();

}
return;

;


execute_MICE_CAGE_LOC:
while (!doPop) {
Main.MICE_CAGE_LOC(myHandle, myHandle.cont);
doPop = ProcessContinuation();

}
return;

;


execute_BATTERY_THRESHOLD:
while (!doPop) {
Main.BATTERY_THRESHOLD(myHandle, myHandle.cont);
doPop = ProcessContinuation();

}
return;

;


execute_DOG:
while (!doPop) {
Main.DOG(myHandle, myHandle.cont);
doPop = ProcessContinuation();

}
return;

;


execute_CAT:
while (!doPop) {
Main.CAT(myHandle, myHandle.cont);
doPop = ProcessContinuation();

}
return;

;


execute_MICE:
while (!doPop) {
Main.MICE(myHandle, myHandle.cont);
doPop = ProcessContinuation();

}
return;

;


execute_BATTERY_CHARGE_LOCATION:
while (!doPop) {
Main.BATTERY_CHARGE_LOCATION(myHandle, myHandle.cont);
doPop = ProcessContinuation();

}
return;

;


execute_ROBOT_START_STATE:
while (!doPop) {
Main.ROBOT_START_STATE(myHandle, myHandle.cont);
doPop = ProcessContinuation();

}
return;

;


execute_SIZE_OF_GRID:
while (!doPop) {
Main.SIZE_OF_GRID(myHandle, myHandle.cont);
doPop = ProcessContinuation();

}
return;

;


execute_ROBOT_SCAN_LOCATIONS:
while (!doPop) {
Main.ROBOT_SCAN_LOCATIONS(myHandle, myHandle.cont);
doPop = ProcessContinuation();

}
return;

;


execute_GetStaticGoals:
while (!doPop) {
Main.GetStaticGoals(myHandle, myHandle.cont);
doPop = ProcessContinuation();

}
return;

;


execute_GetStaticObstacles:
while (!doPop) {
Main.GetStaticObstacles(myHandle, myHandle.cont);
doPop = ProcessContinuation();

}
return;

;


execute_ignore:
while (!doPop) {
ignore(myHandle.cont);
doPop = ProcessContinuation();

}
return;

;


execute_InferCurrentStateAndInformTPorMP:
while (!doPop) {
InferCurrentStateAndInformTPorMP(myHandle.cont);
doPop = ProcessContinuation();

}
return;

;


execute_AnonFun0:
while (!doPop) {
AnonFun0(myHandle.cont);
doPop = ProcessContinuation();

}
return;

;


execute_AnonFun1:
while (!doPop) {
AnonFun1(myHandle.cont);
doPop = ProcessContinuation();

}
return;

;


execute_AnonFun2:
while (!doPop) {
AnonFun2(myHandle.cont);
doPop = ProcessContinuation();

}
return;

;


execute_AnonFun3:
while (!doPop) {
AnonFun3(myHandle.cont);
doPop = ProcessContinuation();

}
return;

;


execute_AnonFun4:
while (!doPop) {
AnonFun4(myHandle.cont);
doPop = ProcessContinuation();

}
return;

;

}
void ignore(Continuation entryCtxt) {
PRT_VALUE_ARRAY locals;
SM_EVENT currentEvent;
PRT_VALUE currentArg;
StackFrame retTo_45;

dummy:
retTo_45 = entryCtxt.PopReturnTo();
locals = retTo_45.locals;
currentEvent = retTo_45.currentEvent;
currentArg = retTo_45.currentArg;
if ((retTo_45.pc == 0)) {
goto start;
}
assert(false, "Internal error");

start:

;
entryCtxt.Return();
return;

;

}
void InferCurrentStateAndInformTPorMP(Continuation entryCtxt) {
PRT_VALUE_ARRAY locals;
SM_EVENT currentEvent;
PRT_VALUE currentArg;
PRT_VALUE tmpVal_68;
PRT_VALUE tmpVal_69;
PRT_VALUE_ARRAY argCloneVar_33;
PRT_VALUE ret_5;
PRT_VALUE tmpVar_79;
PRT_VALUE tmp_90;
PRT_VALUE tmpVal_70;
PRT_VALUE tmpVal_71;
PRT_VALUE tmpPayload_28;
PRT_VALUE tmpVal_72;
PRT_VALUE tmp_91;
bool tmpVar_80;
PRT_VALUE tmpVar_81;
PRT_VALUE tmpVal_73;
PRT_VALUE_ARRAY argCloneVar_34;
PRT_VALUE ret_6;
PRT_VALUE tmp_92;
PRT_VALUE tmpVal_74;
PRT_VALUE tmpVal_75;
PRT_VALUE tmpVal_76;
PRT_VALUE tmpTuple_18;
PRT_VALUE tmpPayload_29;
StackFrame retTo_46;

dummy:
retTo_46 = entryCtxt.PopReturnTo();
locals = retTo_46.locals;
currentEvent = retTo_46.currentEvent;
currentArg = retTo_46.currentArg;
if ((retTo_46.pc == 0)) {
goto start;
}
if ((retTo_46.pc == 1)) {
goto InferCurrentStateAndInformTPorMP_0;
}
if ((retTo_46.pc == 2)) {
goto InferCurrentStateAndInformTPorMP_1;
}
if ((retTo_46.pc == 3)) {
goto InferCurrentStateAndInformTPorMP_2;
}
if ((retTo_46.pc == 4)) {
goto InferCurrentStateAndInformTPorMP_3;
}
assert(false, "Internal error");

start:
tmpVal_68 = PRT_VALUE.PrtTupleGet(currentRobotState, 0);
tmpVal_69 = PRT_VALUE.PrtTupleGet(tmpVal_68, 1);
argCloneVar_33 = null;
entryCtxt.PushReturnTo(0, argCloneVar_33, currentEvent, currentArg);

InferCurrentStateAndInformTPorMP_0:
Main.BATTERY_THRESHOLD(myHandle, entryCtxt);

;
if ((entryCtxt.reason == ContinuationReason.Return)) {
ret_5 = entryCtxt.retVal;

} else {
entryCtxt.PushReturnTo(1, locals, currentEvent, currentArg);
return;

}
tmpVar_79 = PRT_VALUE.PrtMkDefaultValue(Main.type_5_PRT_TYPE);
PRT_VALUE.PrtPrimSetBool(tmpVar_79, (tmpVal_69.nt < ret_5.nt));
if (!tmpVar_79.bl) {
goto InferCurrentStateAndInformTPorMP_if_0_else;
}
tmp_90 = PRT_VALUE.PrtMkDefaultValue(Main.type_12_PRT_TYPE);
PRT_VALUE.PrtPrimSetEvent(tmp_90, Main.BatteryLow_SM_EVENT);
tmpVal_70 = PRT_VALUE.PrtTupleGet(currentRobotState, 0);
tmpVal_71 = PRT_VALUE.PrtTupleGet(tmpVal_70, 1);
assert((robotTP.mach != null), "Target of send must be non-null");
tmpPayload_28 = PRT_VALUE.PrtCloneValue(tmpVal_71);
Main.InvokeMachine_Prop_1(tmp_90.ev, tmpPayload_28);
Main.InvokeMachine_Prop_2(tmp_90.ev, tmpPayload_28);
Main.InvokeMachine_Prop_6(tmp_90.ev, tmpPayload_28);
Main.InvokeMachine_Prop_7(tmp_90.ev, tmpPayload_28);
Main.InvokeMachine_Prop_8(tmp_90.ev, tmpPayload_28);
Main.InvokeMachine_Prop_9(tmp_90.ev, tmpPayload_28);
Main.InvokeMachine_Prop_3(tmp_90.ev, tmpPayload_28);
Main.InvokeMachine_Prop_10a(tmp_90.ev, tmpPayload_28);
Main.InvokeMachine_Prop_10b(tmp_90.ev, tmpPayload_28);
Main.InvokeMachine_Prop_10c(tmp_90.ev, tmpPayload_28);
robotTP.mach.EnqueueEvent(tmp_90.ev, tmpPayload_28, myHandle);
entryCtxt.Send(2, locals, currentEvent, currentArg);
return;

InferCurrentStateAndInformTPorMP_1:

;
goto InferCurrentStateAndInformTPorMP_if_0_end;
InferCurrentStateAndInformTPorMP_if_0_else:

;

InferCurrentStateAndInformTPorMP_if_0_end:

;
tmpVal_72 = PRT_VALUE.PrtTupleGet(currentRobotState, 1);
tmp_91 = PRT_VALUE.PrtMkDefaultValue(Main.type_0_PRT_TYPE);
tmpVar_80 = PRT_VALUE.PrtIsEqualValue(tmpVal_72, tmp_91);
tmpVar_81 = PRT_VALUE.PrtMkDefaultValue(Main.type_5_PRT_TYPE);
PRT_VALUE.PrtPrimSetBool(tmpVar_81, !tmpVar_80);
if (!tmpVar_81.bl) {
goto InferCurrentStateAndInformTPorMP_if_2_else;
}
tmpVal_73 = PRT_VALUE.PrtTupleGet(currentRobotState, 1);
argCloneVar_34 = new PRT_VALUE_ARRAY[1];
argCloneVar_34[0] = PRT_VALUE.PrtCloneValue(tmpVal_73);
entryCtxt.PushReturnTo(0, argCloneVar_34, currentEvent, currentArg);

InferCurrentStateAndInformTPorMP_2:
Main.EventDetected(myHandle, entryCtxt);

;
if ((entryCtxt.reason == ContinuationReason.Return)) {
ret_6 = entryCtxt.retVal;

} else {
entryCtxt.PushReturnTo(3, locals, currentEvent, currentArg);
return;

}
if (!ret_6.bl) {
goto InferCurrentStateAndInformTPorMP_if_1_else;
}
tmp_92 = PRT_VALUE.PrtMkDefaultValue(Main.type_12_PRT_TYPE);
PRT_VALUE.PrtPrimSetEvent(tmp_92, Main.EnvEventDetected_SM_EVENT);
tmpVal_74 = PRT_VALUE.PrtTupleGet(currentRobotState, 0);
tmpVal_75 = PRT_VALUE.PrtTupleGet(tmpVal_74, 0);
tmpVal_76 = PRT_VALUE.PrtTupleGet(currentRobotState, 1);
tmpTuple_18 = PRT_VALUE.PrtMkDefaultValue(Main.type_19_PRT_TYPE);
PRT_VALUE.PrtTupleSet(tmpTuple_18, 0, tmpVal_75);
PRT_VALUE.PrtTupleSet(tmpTuple_18, 1, tmpVal_76);
assert((robotTP.mach != null), "Target of send must be non-null");
tmpPayload_29 = PRT_VALUE.PrtCloneValue(tmpTuple_18);
Main.InvokeMachine_Prop_1(tmp_92.ev, tmpPayload_29);
Main.InvokeMachine_Prop_2(tmp_92.ev, tmpPayload_29);
Main.InvokeMachine_Prop_6(tmp_92.ev, tmpPayload_29);
Main.InvokeMachine_Prop_7(tmp_92.ev, tmpPayload_29);
Main.InvokeMachine_Prop_8(tmp_92.ev, tmpPayload_29);
Main.InvokeMachine_Prop_9(tmp_92.ev, tmpPayload_29);
Main.InvokeMachine_Prop_3(tmp_92.ev, tmpPayload_29);
Main.InvokeMachine_Prop_10a(tmp_92.ev, tmpPayload_29);
Main.InvokeMachine_Prop_10b(tmp_92.ev, tmpPayload_29);
Main.InvokeMachine_Prop_10c(tmp_92.ev, tmpPayload_29);
robotTP.mach.EnqueueEvent(tmp_92.ev, tmpPayload_29, myHandle);
entryCtxt.Send(4, locals, currentEvent, currentArg);
return;

InferCurrentStateAndInformTPorMP_3:

;
goto InferCurrentStateAndInformTPorMP_if_1_end;
InferCurrentStateAndInformTPorMP_if_1_else:

;

InferCurrentStateAndInformTPorMP_if_1_end:

;
goto InferCurrentStateAndInformTPorMP_if_2_end;
InferCurrentStateAndInformTPorMP_if_2_else:

;

InferCurrentStateAndInformTPorMP_if_2_end:

;

;
entryCtxt.Return();
return;

;

}
void AnonFun0(Continuation entryCtxt) {
PRT_VALUE_ARRAY locals;
SM_EVENT currentEvent;
PRT_VALUE currentArg;
StackFrame retTo_47;

dummy:
retTo_47 = entryCtxt.PopReturnTo();
locals = retTo_47.locals;
currentEvent = retTo_47.currentEvent;
currentArg = retTo_47.currentArg;
if ((retTo_47.pc == 0)) {
goto start;
}
assert(false, "Internal error");

start:

;
entryCtxt.Return();
return;

;

}
void AnonFun1(Continuation entryCtxt) {
PRT_VALUE_ARRAY locals;
SM_EVENT currentEvent;
PRT_VALUE currentArg;
PRT_VALUE tmpVar_82;
PRT_VALUE tmpVal_77;
PRT_VALUE tmpVar_83;
PRT_VALUE tmpVal_78;
PRT_VALUE tmp_93;
PRT_VALUE tmp_94;
PRT_VALUE tmpPayload_30;
PRT_VALUE tmp_95;
PRT_VALUE tmpPayload_31;
StackFrame retTo_48;

dummy:
retTo_48 = entryCtxt.PopReturnTo();
locals = retTo_48.locals;
currentEvent = retTo_48.currentEvent;
currentArg = retTo_48.currentArg;
if ((retTo_48.pc == 0)) {
goto start;
}
if ((retTo_48.pc == 1)) {
goto AnonFun1_9;
}
assert(false, "Internal error");

start:
tmpVar_82 = PRT_VALUE.PrtCastValue(currentArg, Main.type_11_PRT_TYPE);
tmpVal_77 = PRT_VALUE.PrtTupleGet(tmpVar_82, 0);
robotTP = PRT_VALUE.PrtCloneValue(tmpVal_77);
tmpVar_83 = PRT_VALUE.PrtCastValue(currentArg, Main.type_11_PRT_TYPE);
tmpVal_78 = PRT_VALUE.PrtTupleGet(tmpVar_83, 1);
robotStManager = PRT_VALUE.PrtCloneValue(tmpVal_78);
tmp_93 = PRT_VALUE.PrtMkDefaultValue(Main.type_12_PRT_TYPE);
PRT_VALUE.PrtPrimSetEvent(tmp_93, Main.initial_setup_SM_EVENT);
tmp_94 = PRT_VALUE.PrtMkDefaultValue(Main.type_8_PRT_TYPE);
PRT_VALUE.PrtPrimSetMachine(tmp_94, myHandle);
assert((robotStManager.mach != null), "Target of send must be non-null");
tmpPayload_30 = PRT_VALUE.PrtCloneValue(tmp_94);
Main.InvokeMachine_Prop_1(tmp_93.ev, tmpPayload_30);
Main.InvokeMachine_Prop_2(tmp_93.ev, tmpPayload_30);
Main.InvokeMachine_Prop_6(tmp_93.ev, tmpPayload_30);
Main.InvokeMachine_Prop_7(tmp_93.ev, tmpPayload_30);
Main.InvokeMachine_Prop_8(tmp_93.ev, tmpPayload_30);
Main.InvokeMachine_Prop_9(tmp_93.ev, tmpPayload_30);
Main.InvokeMachine_Prop_3(tmp_93.ev, tmpPayload_30);
Main.InvokeMachine_Prop_10a(tmp_93.ev, tmpPayload_30);
Main.InvokeMachine_Prop_10b(tmp_93.ev, tmpPayload_30);
Main.InvokeMachine_Prop_10c(tmp_93.ev, tmpPayload_30);
robotStManager.mach.EnqueueEvent(tmp_93.ev, tmpPayload_30, myHandle);
entryCtxt.Send(1, locals, currentEvent, currentArg);
return;

AnonFun1_9:

;
tmp_95 = PRT_VALUE.PrtMkDefaultValue(Main.type_12_PRT_TYPE);
PRT_VALUE.PrtPrimSetEvent(tmp_95, Main.local_SM_EVENT);
tmpPayload_31 = PRT_VALUE.PrtMkDefaultValue(Main.type_0_PRT_TYPE);
assert((tmp_95.ev != null), "(15, 4): Raised event must be non-null");
trace("<RaiseLog> Machine SenseAndInfer-{0} raised Event {1}\n", myHandle.instance, tmp_95.ev.name);
myHandle.currentEvent = tmp_95.ev;
myHandle.currentArg = tmpPayload_31;
entryCtxt.Raise();
return;

;
entryCtxt.Return();
return;

;

}
void AnonFun2(Continuation entryCtxt) {
PRT_VALUE_ARRAY locals;
SM_EVENT currentEvent;
PRT_VALUE currentArg;
PRT_VALUE tmpVar_84;
StackFrame retTo_49;

dummy:
retTo_49 = entryCtxt.PopReturnTo();
locals = retTo_49.locals;
currentEvent = retTo_49.currentEvent;
currentArg = retTo_49.currentArg;
if ((retTo_49.pc == 0)) {
goto start;
}
assert(false, "Internal error");

start:
tmpVar_84 = PRT_VALUE.PrtCastValue(currentArg, Main.type_22_PRT_TYPE);
currentRobotState = PRT_VALUE.PrtCloneValue(tmpVar_84);

;
entryCtxt.Return();
return;

;

}
void AnonFun3(Continuation entryCtxt) {
PRT_VALUE_ARRAY locals;
SM_EVENT currentEvent;
PRT_VALUE currentArg;
PRT_VALUE tmp_96;
PRT_VALUE tmpPayload_32;
PRT_VALUE_ARRAY argCloneVar_35;
PRT_VALUE tmp_97;
PRT_VALUE tmpPayload_33;
StackFrame retTo_50;

dummy:
retTo_50 = entryCtxt.PopReturnTo();
locals = retTo_50.locals;
currentEvent = retTo_50.currentEvent;
currentArg = retTo_50.currentArg;
if ((retTo_50.pc == 0)) {
goto start;
}
if ((retTo_50.pc == 1)) {
goto AnonFun3_5;
}
if ((retTo_50.pc == 2)) {
goto AnonFun3_6;
}
if ((retTo_50.pc == 3)) {
goto AnonFun3_7;
}
if ((retTo_50.pc == 4)) {
goto AnonFun3_8;
}
if ((retTo_50.pc == 5)) {
goto AnonFun3_9;
}
if ((retTo_50.pc == 6)) {
goto AnonFun3_10;
}
assert(false, "Internal error");

start:
tmp_96 = PRT_VALUE.PrtMkDefaultValue(Main.type_12_PRT_TYPE);
PRT_VALUE.PrtPrimSetEvent(tmp_96, Main.GetRobotState_SM_EVENT);
assert((robotStManager.mach != null), "Target of send must be non-null");
tmpPayload_32 = PRT_VALUE.PrtMkDefaultValue(Main.type_0_PRT_TYPE);
Main.InvokeMachine_Prop_1(tmp_96.ev, tmpPayload_32);
Main.InvokeMachine_Prop_2(tmp_96.ev, tmpPayload_32);
Main.InvokeMachine_Prop_6(tmp_96.ev, tmpPayload_32);
Main.InvokeMachine_Prop_7(tmp_96.ev, tmpPayload_32);
Main.InvokeMachine_Prop_8(tmp_96.ev, tmpPayload_32);
Main.InvokeMachine_Prop_9(tmp_96.ev, tmpPayload_32);
Main.InvokeMachine_Prop_3(tmp_96.ev, tmpPayload_32);
Main.InvokeMachine_Prop_10a(tmp_96.ev, tmpPayload_32);
Main.InvokeMachine_Prop_10b(tmp_96.ev, tmpPayload_32);
Main.InvokeMachine_Prop_10c(tmp_96.ev, tmpPayload_32);
robotStManager.mach.EnqueueEvent(tmp_96.ev, tmpPayload_32, myHandle);
entryCtxt.Send(1, locals, currentEvent, currentArg);
return;

AnonFun3_5:

;
myHandle.receiveSet = (myHandle.receiveSet + Main.CurrentState_SM_EVENT);
entryCtxt.Receive(2, locals, currentEvent, currentArg);
return;

AnonFun3_6:

;
if ((myHandle.currentEvent == Main.CurrentState_SM_EVENT)) {
entryCtxt.PushReturnTo(0, locals, myHandle.currentEvent, myHandle.currentArg);
goto AnonFun3_8;
}
assert(false);

AnonFun3_8:
AnonFun2(entryCtxt);

;
if ((entryCtxt.reason == ContinuationReason.Return)) {
goto AnonFun3_7;
} else {
entryCtxt.PushReturnTo(4, locals, currentEvent, currentArg);
return;

}

AnonFun3_7:

;
argCloneVar_35 = null;
entryCtxt.PushReturnTo(0, argCloneVar_35, currentEvent, currentArg);

AnonFun3_9:
InferCurrentStateAndInformTPorMP(entryCtxt);

;
if ((entryCtxt.reason == ContinuationReason.Return)) {

} else {
entryCtxt.PushReturnTo(5, locals, currentEvent, currentArg);
return;

}
tmp_97 = PRT_VALUE.PrtMkDefaultValue(Main.type_12_PRT_TYPE);
PRT_VALUE.PrtPrimSetEvent(tmp_97, Main.CurrentState_SM_EVENT);
assert((robotTP.mach != null), "Target of send must be non-null");
tmpPayload_33 = PRT_VALUE.PrtCloneValue(currentRobotState);
Main.InvokeMachine_Prop_1(tmp_97.ev, tmpPayload_33);
Main.InvokeMachine_Prop_2(tmp_97.ev, tmpPayload_33);
Main.InvokeMachine_Prop_6(tmp_97.ev, tmpPayload_33);
Main.InvokeMachine_Prop_7(tmp_97.ev, tmpPayload_33);
Main.InvokeMachine_Prop_8(tmp_97.ev, tmpPayload_33);
Main.InvokeMachine_Prop_9(tmp_97.ev, tmpPayload_33);
Main.InvokeMachine_Prop_3(tmp_97.ev, tmpPayload_33);
Main.InvokeMachine_Prop_10a(tmp_97.ev, tmpPayload_33);
Main.InvokeMachine_Prop_10b(tmp_97.ev, tmpPayload_33);
Main.InvokeMachine_Prop_10c(tmp_97.ev, tmpPayload_33);
robotTP.mach.EnqueueEvent(tmp_97.ev, tmpPayload_33, myHandle);
entryCtxt.Send(6, locals, currentEvent, currentArg);
return;

AnonFun3_10:

;

;
entryCtxt.Return();
return;

;

}
void AnonFun4(Continuation entryCtxt) {
PRT_VALUE_ARRAY locals;
SM_EVENT currentEvent;
PRT_VALUE currentArg;
PRT_VALUE tmp_98;
PRT_VALUE tmpPayload_34;
PRT_VALUE_ARRAY argCloneVar_36;
StackFrame retTo_51;

dummy:
retTo_51 = entryCtxt.PopReturnTo();
locals = retTo_51.locals;
currentEvent = retTo_51.currentEvent;
currentArg = retTo_51.currentArg;
if ((retTo_51.pc == 0)) {
goto start;
}
if ((retTo_51.pc == 1)) {
goto AnonFun4_1;
}
if ((retTo_51.pc == 2)) {
goto AnonFun4_2;
}
if ((retTo_51.pc == 3)) {
goto AnonFun4_3;
}
if ((retTo_51.pc == 4)) {
goto AnonFun4_4;
}
if ((retTo_51.pc == 5)) {
goto AnonFun4_5;
}
assert(false, "Internal error");

start:
tmp_98 = PRT_VALUE.PrtMkDefaultValue(Main.type_12_PRT_TYPE);
PRT_VALUE.PrtPrimSetEvent(tmp_98, Main.GetRobotState_SM_EVENT);
assert((robotStManager.mach != null), "Target of send must be non-null");
tmpPayload_34 = PRT_VALUE.PrtMkDefaultValue(Main.type_0_PRT_TYPE);
Main.InvokeMachine_Prop_1(tmp_98.ev, tmpPayload_34);
Main.InvokeMachine_Prop_2(tmp_98.ev, tmpPayload_34);
Main.InvokeMachine_Prop_6(tmp_98.ev, tmpPayload_34);
Main.InvokeMachine_Prop_7(tmp_98.ev, tmpPayload_34);
Main.InvokeMachine_Prop_8(tmp_98.ev, tmpPayload_34);
Main.InvokeMachine_Prop_9(tmp_98.ev, tmpPayload_34);
Main.InvokeMachine_Prop_3(tmp_98.ev, tmpPayload_34);
Main.InvokeMachine_Prop_10a(tmp_98.ev, tmpPayload_34);
Main.InvokeMachine_Prop_10b(tmp_98.ev, tmpPayload_34);
Main.InvokeMachine_Prop_10c(tmp_98.ev, tmpPayload_34);
robotStManager.mach.EnqueueEvent(tmp_98.ev, tmpPayload_34, myHandle);
entryCtxt.Send(1, locals, currentEvent, currentArg);
return;

AnonFun4_1:

;
myHandle.receiveSet = (myHandle.receiveSet + Main.CurrentState_SM_EVENT);
entryCtxt.Receive(2, locals, currentEvent, currentArg);
return;

AnonFun4_2:

;
if ((myHandle.currentEvent == Main.CurrentState_SM_EVENT)) {
entryCtxt.PushReturnTo(0, locals, myHandle.currentEvent, myHandle.currentArg);
goto AnonFun4_4;
}
assert(false);

AnonFun4_4:
AnonFun2(entryCtxt);

;
if ((entryCtxt.reason == ContinuationReason.Return)) {
goto AnonFun4_3;
} else {
entryCtxt.PushReturnTo(4, locals, currentEvent, currentArg);
return;

}

AnonFun4_3:

;
argCloneVar_36 = null;
entryCtxt.PushReturnTo(0, argCloneVar_36, currentEvent, currentArg);

AnonFun4_5:
InferCurrentStateAndInformTPorMP(entryCtxt);

;
if ((entryCtxt.reason == ContinuationReason.Return)) {

} else {
entryCtxt.PushReturnTo(5, locals, currentEvent, currentArg);
return;

}
myHandle.currentEvent = null;
myHandle.currentArg = null;
entryCtxt.Pop();
return;

;
entryCtxt.Return();
return;

;

}
};

class MACHINE_Timer{
PRT_VALUE client;
SM_HANDLE myHandle;
void Timer_Init_CalculateDeferredAndActionSet() {

dummy:
myHandle.stack.deferredSet = new SM_EVENT_SET;
myHandle.stack.actionSet = new SM_EVENT_SET;
myHandle.stack.AddStackDeferredSet(myHandle.stack.deferredSet);
myHandle.stack.deferredSet = (myHandle.stack.deferredSet - Main.UNIT_SM_EVENT);
myHandle.stack.AddStackActionSet(myHandle.stack.actionSet);
myHandle.stack.actionSet = (myHandle.stack.actionSet - Main.UNIT_SM_EVENT);
myHandle.stack.es = new SM_EVENT_ARRAY[0];
myHandle.stack.as = new ActionOrFun_ARRAY[0];

;

}
void Timer_WaitForReq_CalculateDeferredAndActionSet() {

dummy:
myHandle.stack.deferredSet = new SM_EVENT_SET;
myHandle.stack.actionSet = new SM_EVENT_SET;
myHandle.stack.AddStackDeferredSet(myHandle.stack.deferredSet);
myHandle.stack.deferredSet = (myHandle.stack.deferredSet - Main.CANCEL_SM_EVENT);
myHandle.stack.deferredSet = (myHandle.stack.deferredSet - Main.START_SM_EVENT);
myHandle.stack.AddStackActionSet(myHandle.stack.actionSet);
myHandle.stack.actionSet = (myHandle.stack.actionSet - Main.CANCEL_SM_EVENT);
myHandle.stack.actionSet = (myHandle.stack.actionSet - Main.START_SM_EVENT);
myHandle.stack.es = new SM_EVENT_ARRAY[0];
myHandle.stack.as = new ActionOrFun_ARRAY[0];

;

}
void Timer_WaitForCancel_CalculateDeferredAndActionSet() {

dummy:
myHandle.stack.deferredSet = new SM_EVENT_SET;
myHandle.stack.actionSet = new SM_EVENT_SET;
myHandle.stack.AddStackDeferredSet(myHandle.stack.deferredSet);
myHandle.stack.deferredSet = (myHandle.stack.deferredSet - Main.START_SM_EVENT);
myHandle.stack.deferredSet = (myHandle.stack.deferredSet - Main.null_SM_EVENT);
myHandle.stack.deferredSet = (myHandle.stack.deferredSet - Main.CANCEL_SM_EVENT);
myHandle.stack.AddStackActionSet(myHandle.stack.actionSet);
myHandle.stack.actionSet = (myHandle.stack.actionSet + Main.START_SM_EVENT);
myHandle.stack.actionSet = (myHandle.stack.actionSet - Main.null_SM_EVENT);
myHandle.stack.actionSet = (myHandle.stack.actionSet - Main.CANCEL_SM_EVENT);
myHandle.stack.es = new SM_EVENT_ARRAY[1];
myHandle.stack.as = new ActionOrFun_ARRAY[1];
myHandle.stack.es[0] = Main.START_SM_EVENT;
myHandle.stack.as[0] = ActionOrFun._Timer_ignore;

;

}
void Start() {

dummy:
Run(Main.Timer_Init_SM_STATE);
if ((myHandle.currentEvent == Main.halt_SM_EVENT)) {
myHandle.stack = null;
myHandle.buffer = null;
myHandle.currentArg = null;
SM_HANDLE.halted = (SM_HANDLE.halted + myHandle);
SM_HANDLE.enabled = (SM_HANDLE.enabled - myHandle);
return;

}
trace("<StateLog> Unhandled event exception by machine Timer-{0}\n", myHandle.instance);
assert(false, "Unhandled event exception by machine Timer");

;

}
void Run(SM_STATE state) {
bool doPop;
bool hasNullTransitionOrAction;

init:
myHandle.Push();
myHandle.stack.state = state;
doPop = RunHelper(true);
while (!doPop) {
hasNullTransitionOrAction = myHandle.stack.HasNullTransitionOrAction();
myHandle.DequeueEvent(hasNullTransitionOrAction);
doPop = RunHelper(false);

}
myHandle.Pop();

;

}
void TraceEnterState(SM_STATE state) {

init:
if ((state == Main.Timer_Init_SM_STATE)) {
trace("<StateLog> Machine Timer-{0} entering State Init\n", myHandle.instance);
return;

}
if ((state == Main.Timer_WaitForReq_SM_STATE)) {
trace("<StateLog> Machine Timer-{0} entering State WaitForReq\n", myHandle.instance);
return;

}
if ((state == Main.Timer_WaitForCancel_SM_STATE)) {
trace("<StateLog> Machine Timer-{0} entering State WaitForCancel\n", myHandle.instance);
return;

}
assert(false, "Internal error");

;

}
void TraceExitState(SM_STATE state) {

init:
if ((state == Main.Timer_Init_SM_STATE)) {
trace("<StateLog> Machine Timer-{0} exiting State Init\n", myHandle.instance);
return;

}
if ((state == Main.Timer_WaitForReq_SM_STATE)) {
trace("<StateLog> Machine Timer-{0} exiting State WaitForReq\n", myHandle.instance);
return;

}
if ((state == Main.Timer_WaitForCancel_SM_STATE)) {
trace("<StateLog> Machine Timer-{0} exiting State WaitForCancel\n", myHandle.instance);
return;

}
assert(false, "Internal error");

;

}
void CalculateDeferredAndActionSet(SM_STATE state) {

init:
if ((state == Main.Timer_Init_SM_STATE)) {
Timer_Init_CalculateDeferredAndActionSet();
return;

}
if ((state == Main.Timer_WaitForReq_SM_STATE)) {
Timer_WaitForReq_CalculateDeferredAndActionSet();
return;

}
if ((state == Main.Timer_WaitForCancel_SM_STATE)) {
Timer_WaitForCancel_CalculateDeferredAndActionSet();
return;

}
assert(false, "Internal error");

;

}
bool RunHelper(bool start) {
SM_STATE state;
SM_TRANSITION transition;
ActionOrFun actionFun;

init:
state = myHandle.stack.state;
if (start) {
goto enter;
} else {
goto handle;
}

;


enter:
state = myHandle.stack.state;
TraceEnterState(state);
CalculateDeferredAndActionSet(state);
actionFun = state.entryFun;

;


execute:
ReentrancyHelper(actionFun);
if ((myHandle.cont.reason == ContinuationReason.Raise)) {
goto handle;
}
myHandle.currentEvent = null;
myHandle.currentArg = PRT_VALUE.PrtMkDefaultValue(Main.type_0_PRT_TYPE);
if ((myHandle.cont.reason != ContinuationReason.Pop)) {
return false;

}
TraceExitState(state);
ReentrancyHelper(state.exitFun);
return true;

;


handle:
if ((myHandle.currentEvent in myHandle.stack.actionSet)) {
actionFun = myHandle.stack.Find(myHandle.currentEvent);
goto execute;
}
transition = state.FindPushTransition(myHandle.currentEvent);
if ((transition != null)) {
Run(transition.to);
if ((myHandle.currentEvent == null)) {
return false;

} else {
goto handle;
}

}
TraceExitState(state);
ReentrancyHelper(state.exitFun);
transition = state.FindTransition(myHandle.currentEvent);
if ((transition == null)) {
return true;

}
ReentrancyHelper(transition.fun);
myHandle.stack.state = transition.to;
state = myHandle.stack.state;
goto enter;
;

}
bool ProcessContinuation() {
bool doPop;

init:
if ((myHandle.cont.reason == ContinuationReason.Return)) {
return true;

}
if ((myHandle.cont.reason == ContinuationReason.Pop)) {
return true;

}
if ((myHandle.cont.reason == ContinuationReason.Raise)) {
return true;

}
if ((myHandle.cont.reason == ContinuationReason.Receive)) {
myHandle.DequeueEvent(false);
return false;

}
if ((myHandle.cont.reason == ContinuationReason.Nondet)) {
myHandle.cont.nondet = choose(bool);
return false;

}
if ((myHandle.cont.reason == ContinuationReason.NewMachine)) {
yield;
return false;

}
if ((myHandle.cont.reason == ContinuationReason.Send)) {
yield;
return false;

}

;

}
void ReentrancyHelper(ActionOrFun actionFun) {
PRT_VALUE_ARRAY locals;
bool doPop;

init:
doPop = false;
myHandle.cont.Reset();
if ((actionFun == ActionOrFun._ResetObstacle)) {
trace("<FunctionLog> Machine Timer-{0} executing Function ResetObstacle\n", myHandle.instance);
locals = null;
myHandle.cont.PushReturnTo(0, locals, myHandle.currentEvent, myHandle.currentArg);
goto execute_ResetObstacle;
}
if ((actionFun == ActionOrFun._Seal)) {
trace("<FunctionLog> Machine Timer-{0} executing Function Seal\n", myHandle.instance);
locals = null;
myHandle.cont.PushReturnTo(0, locals, myHandle.currentEvent, myHandle.currentArg);
goto execute_Seal;
}
if ((actionFun == ActionOrFun._Unseal)) {
trace("<FunctionLog> Machine Timer-{0} executing Function Unseal\n", myHandle.instance);
locals = null;
myHandle.cont.PushReturnTo(0, locals, myHandle.currentEvent, myHandle.currentArg);
goto execute_Unseal;
}
if ((actionFun == ActionOrFun._InitializeMotionPlanning)) {
trace("<FunctionLog> Machine Timer-{0} executing Function InitializeMotionPlanning\n", myHandle.instance);
locals = new PRT_VALUE_ARRAY[4];
locals[3] = PRT_VALUE.PrtMkDefaultValue(Main.type_1_PRT_TYPE);
locals[2] = PRT_VALUE.PrtMkDefaultValue(Main.type_2_PRT_TYPE);
locals[1] = PRT_VALUE.PrtMkDefaultValue(Main.type_2_PRT_TYPE);
locals[0] = PRT_VALUE.PrtMkDefaultValue(Main.type_4_PRT_TYPE);
myHandle.cont.PushReturnTo(0, locals, myHandle.currentEvent, myHandle.currentArg);
goto execute_InitializeMotionPlanning;
}
if ((actionFun == ActionOrFun._CAT_CAGE_LOC)) {
trace("<FunctionLog> Machine Timer-{0} executing Function CAT_CAGE_LOC\n", myHandle.instance);
locals = null;
myHandle.cont.PushReturnTo(0, locals, myHandle.currentEvent, myHandle.currentArg);
goto execute_CAT_CAGE_LOC;
}
if ((actionFun == ActionOrFun._DOG_CAGE_LOC)) {
trace("<FunctionLog> Machine Timer-{0} executing Function DOG_CAGE_LOC\n", myHandle.instance);
locals = null;
myHandle.cont.PushReturnTo(0, locals, myHandle.currentEvent, myHandle.currentArg);
goto execute_DOG_CAGE_LOC;
}
if ((actionFun == ActionOrFun._MICE_CAGE_LOC)) {
trace("<FunctionLog> Machine Timer-{0} executing Function MICE_CAGE_LOC\n", myHandle.instance);
locals = null;
myHandle.cont.PushReturnTo(0, locals, myHandle.currentEvent, myHandle.currentArg);
goto execute_MICE_CAGE_LOC;
}
if ((actionFun == ActionOrFun._BATTERY_THRESHOLD)) {
trace("<FunctionLog> Machine Timer-{0} executing Function BATTERY_THRESHOLD\n", myHandle.instance);
locals = null;
myHandle.cont.PushReturnTo(0, locals, myHandle.currentEvent, myHandle.currentArg);
goto execute_BATTERY_THRESHOLD;
}
if ((actionFun == ActionOrFun._DOG)) {
trace("<FunctionLog> Machine Timer-{0} executing Function DOG\n", myHandle.instance);
locals = null;
myHandle.cont.PushReturnTo(0, locals, myHandle.currentEvent, myHandle.currentArg);
goto execute_DOG;
}
if ((actionFun == ActionOrFun._CAT)) {
trace("<FunctionLog> Machine Timer-{0} executing Function CAT\n", myHandle.instance);
locals = null;
myHandle.cont.PushReturnTo(0, locals, myHandle.currentEvent, myHandle.currentArg);
goto execute_CAT;
}
if ((actionFun == ActionOrFun._MICE)) {
trace("<FunctionLog> Machine Timer-{0} executing Function MICE\n", myHandle.instance);
locals = null;
myHandle.cont.PushReturnTo(0, locals, myHandle.currentEvent, myHandle.currentArg);
goto execute_MICE;
}
if ((actionFun == ActionOrFun._BATTERY_CHARGE_LOCATION)) {
trace("<FunctionLog> Machine Timer-{0} executing Function BATTERY_CHARGE_LOCATION\n", myHandle.instance);
locals = null;
myHandle.cont.PushReturnTo(0, locals, myHandle.currentEvent, myHandle.currentArg);
goto execute_BATTERY_CHARGE_LOCATION;
}
if ((actionFun == ActionOrFun._ROBOT_START_STATE)) {
trace("<FunctionLog> Machine Timer-{0} executing Function ROBOT_START_STATE\n", myHandle.instance);
locals = null;
myHandle.cont.PushReturnTo(0, locals, myHandle.currentEvent, myHandle.currentArg);
goto execute_ROBOT_START_STATE;
}
if ((actionFun == ActionOrFun._SIZE_OF_GRID)) {
trace("<FunctionLog> Machine Timer-{0} executing Function SIZE_OF_GRID\n", myHandle.instance);
locals = null;
myHandle.cont.PushReturnTo(0, locals, myHandle.currentEvent, myHandle.currentArg);
goto execute_SIZE_OF_GRID;
}
if ((actionFun == ActionOrFun._ROBOT_SCAN_LOCATIONS)) {
trace("<FunctionLog> Machine Timer-{0} executing Function ROBOT_SCAN_LOCATIONS\n", myHandle.instance);
locals = new PRT_VALUE_ARRAY[3];
locals[2] = PRT_VALUE.PrtMkDefaultValue(Main.type_2_PRT_TYPE);
locals[1] = PRT_VALUE.PrtMkDefaultValue(Main.type_2_PRT_TYPE);
locals[0] = PRT_VALUE.PrtMkDefaultValue(Main.type_1_PRT_TYPE);
myHandle.cont.PushReturnTo(0, locals, myHandle.currentEvent, myHandle.currentArg);
goto execute_ROBOT_SCAN_LOCATIONS;
}
if ((actionFun == ActionOrFun._GetStaticGoals)) {
trace("<FunctionLog> Machine Timer-{0} executing Function GetStaticGoals\n", myHandle.instance);
locals = new PRT_VALUE_ARRAY[1];
locals[0] = PRT_VALUE.PrtMkDefaultValue(Main.type_7_PRT_TYPE);
myHandle.cont.PushReturnTo(0, locals, myHandle.currentEvent, myHandle.currentArg);
goto execute_GetStaticGoals;
}
if ((actionFun == ActionOrFun._GetStaticObstacles)) {
trace("<FunctionLog> Machine Timer-{0} executing Function GetStaticObstacles\n", myHandle.instance);
locals = new PRT_VALUE_ARRAY[1];
locals[0] = PRT_VALUE.PrtMkDefaultValue(Main.type_2_PRT_TYPE);
myHandle.cont.PushReturnTo(0, locals, myHandle.currentEvent, myHandle.currentArg);
goto execute_GetStaticObstacles;
}
if ((actionFun == ActionOrFun._Timer_ignore)) {
trace("<FunctionLog> Machine Timer-{0} executing Function ignore\n", myHandle.instance);
locals = null;
myHandle.cont.PushReturnTo(0, locals, myHandle.currentEvent, myHandle.currentArg);
goto execute_ignore;
}
if ((actionFun == ActionOrFun._Timer_AnonFun0)) {
locals = null;
myHandle.cont.PushReturnTo(0, locals, myHandle.currentEvent, myHandle.currentArg);
goto execute_AnonFun0;
}
if ((actionFun == ActionOrFun._Timer_AnonFun1)) {
locals = null;
myHandle.cont.PushReturnTo(0, locals, myHandle.currentEvent, myHandle.currentArg);
goto execute_AnonFun1;
}
if ((actionFun == ActionOrFun._Timer_AnonFun2)) {
locals = null;
myHandle.cont.PushReturnTo(0, locals, myHandle.currentEvent, myHandle.currentArg);
goto execute_AnonFun2;
}
if ((actionFun == ActionOrFun._Timer_AnonFun3)) {
locals = null;
myHandle.cont.PushReturnTo(0, locals, myHandle.currentEvent, myHandle.currentArg);
goto execute_AnonFun3;
}
if ((actionFun == ActionOrFun._Timer_AnonFun4)) {
locals = null;
myHandle.cont.PushReturnTo(0, locals, myHandle.currentEvent, myHandle.currentArg);
goto execute_AnonFun4;
}
assert(false, "Internal error");

;


execute_ResetObstacle:
while (!doPop) {
Main.ResetObstacle(myHandle, myHandle.cont);
doPop = ProcessContinuation();

}
return;

;


execute_Seal:
while (!doPop) {
Main.Seal(myHandle, myHandle.cont);
doPop = ProcessContinuation();

}
return;

;


execute_Unseal:
while (!doPop) {
Main.Unseal(myHandle, myHandle.cont);
doPop = ProcessContinuation();

}
return;

;


execute_InitializeMotionPlanning:
while (!doPop) {
Main.InitializeMotionPlanning(myHandle, myHandle.cont);
doPop = ProcessContinuation();

}
return;

;


execute_CAT_CAGE_LOC:
while (!doPop) {
Main.CAT_CAGE_LOC(myHandle, myHandle.cont);
doPop = ProcessContinuation();

}
return;

;


execute_DOG_CAGE_LOC:
while (!doPop) {
Main.DOG_CAGE_LOC(myHandle, myHandle.cont);
doPop = ProcessContinuation();

}
return;

;


execute_MICE_CAGE_LOC:
while (!doPop) {
Main.MICE_CAGE_LOC(myHandle, myHandle.cont);
doPop = ProcessContinuation();

}
return;

;


execute_BATTERY_THRESHOLD:
while (!doPop) {
Main.BATTERY_THRESHOLD(myHandle, myHandle.cont);
doPop = ProcessContinuation();

}
return;

;


execute_DOG:
while (!doPop) {
Main.DOG(myHandle, myHandle.cont);
doPop = ProcessContinuation();

}
return;

;


execute_CAT:
while (!doPop) {
Main.CAT(myHandle, myHandle.cont);
doPop = ProcessContinuation();

}
return;

;


execute_MICE:
while (!doPop) {
Main.MICE(myHandle, myHandle.cont);
doPop = ProcessContinuation();

}
return;

;


execute_BATTERY_CHARGE_LOCATION:
while (!doPop) {
Main.BATTERY_CHARGE_LOCATION(myHandle, myHandle.cont);
doPop = ProcessContinuation();

}
return;

;


execute_ROBOT_START_STATE:
while (!doPop) {
Main.ROBOT_START_STATE(myHandle, myHandle.cont);
doPop = ProcessContinuation();

}
return;

;


execute_SIZE_OF_GRID:
while (!doPop) {
Main.SIZE_OF_GRID(myHandle, myHandle.cont);
doPop = ProcessContinuation();

}
return;

;


execute_ROBOT_SCAN_LOCATIONS:
while (!doPop) {
Main.ROBOT_SCAN_LOCATIONS(myHandle, myHandle.cont);
doPop = ProcessContinuation();

}
return;

;


execute_GetStaticGoals:
while (!doPop) {
Main.GetStaticGoals(myHandle, myHandle.cont);
doPop = ProcessContinuation();

}
return;

;


execute_GetStaticObstacles:
while (!doPop) {
Main.GetStaticObstacles(myHandle, myHandle.cont);
doPop = ProcessContinuation();

}
return;

;


execute_ignore:
while (!doPop) {
ignore(myHandle.cont);
doPop = ProcessContinuation();

}
return;

;


execute_AnonFun0:
while (!doPop) {
AnonFun0(myHandle.cont);
doPop = ProcessContinuation();

}
return;

;


execute_AnonFun1:
while (!doPop) {
AnonFun1(myHandle.cont);
doPop = ProcessContinuation();

}
return;

;


execute_AnonFun2:
while (!doPop) {
AnonFun2(myHandle.cont);
doPop = ProcessContinuation();

}
return;

;


execute_AnonFun3:
while (!doPop) {
AnonFun3(myHandle.cont);
doPop = ProcessContinuation();

}
return;

;


execute_AnonFun4:
while (!doPop) {
AnonFun4(myHandle.cont);
doPop = ProcessContinuation();

}
return;

;

}
void ignore(Continuation entryCtxt) {
PRT_VALUE_ARRAY locals;
SM_EVENT currentEvent;
PRT_VALUE currentArg;
StackFrame retTo_52;

dummy:
retTo_52 = entryCtxt.PopReturnTo();
locals = retTo_52.locals;
currentEvent = retTo_52.currentEvent;
currentArg = retTo_52.currentArg;
if ((retTo_52.pc == 0)) {
goto start;
}
assert(false, "Internal error");

start:

;
entryCtxt.Return();
return;

;

}
void AnonFun0(Continuation entryCtxt) {
PRT_VALUE_ARRAY locals;
SM_EVENT currentEvent;
PRT_VALUE currentArg;
StackFrame retTo_53;

dummy:
retTo_53 = entryCtxt.PopReturnTo();
locals = retTo_53.locals;
currentEvent = retTo_53.currentEvent;
currentArg = retTo_53.currentArg;
if ((retTo_53.pc == 0)) {
goto start;
}
assert(false, "Internal error");

start:

;
entryCtxt.Return();
return;

;

}
void AnonFun1(Continuation entryCtxt) {
PRT_VALUE_ARRAY locals;
SM_EVENT currentEvent;
PRT_VALUE currentArg;
PRT_VALUE tmpVar_85;
PRT_VALUE tmp_99;
PRT_VALUE tmpPayload_35;
StackFrame retTo_54;

dummy:
retTo_54 = entryCtxt.PopReturnTo();
locals = retTo_54.locals;
currentEvent = retTo_54.currentEvent;
currentArg = retTo_54.currentArg;
if ((retTo_54.pc == 0)) {
goto start;
}
assert(false, "Internal error");

start:
tmpVar_85 = PRT_VALUE.PrtCastValue(currentArg, Main.type_8_PRT_TYPE);
client = PRT_VALUE.PrtCloneValue(tmpVar_85);
tmp_99 = PRT_VALUE.PrtMkDefaultValue(Main.type_12_PRT_TYPE);
PRT_VALUE.PrtPrimSetEvent(tmp_99, Main.UNIT_SM_EVENT);
tmpPayload_35 = PRT_VALUE.PrtMkDefaultValue(Main.type_0_PRT_TYPE);
assert((tmp_99.ev != null), "(9, 7): Raised event must be non-null");
trace("<RaiseLog> Machine Timer-{0} raised Event {1}\n", myHandle.instance, tmp_99.ev.name);
myHandle.currentEvent = tmp_99.ev;
myHandle.currentArg = tmpPayload_35;
entryCtxt.Raise();
return;

;
entryCtxt.Return();
return;

;

}
void AnonFun2(Continuation entryCtxt) {
PRT_VALUE_ARRAY locals;
SM_EVENT currentEvent;
PRT_VALUE currentArg;
PRT_VALUE tmp_100;
PRT_VALUE tmp_101;
PRT_VALUE tmpPayload_36;
StackFrame retTo_55;

dummy:
retTo_55 = entryCtxt.PopReturnTo();
locals = retTo_55.locals;
currentEvent = retTo_55.currentEvent;
currentArg = retTo_55.currentArg;
if ((retTo_55.pc == 0)) {
goto start;
}
if ((retTo_55.pc == 1)) {
goto AnonFun2_5;
}
assert(false, "Internal error");

start:
tmp_100 = PRT_VALUE.PrtMkDefaultValue(Main.type_12_PRT_TYPE);
PRT_VALUE.PrtPrimSetEvent(tmp_100, Main.CANCEL_FAILURE_SM_EVENT);
tmp_101 = PRT_VALUE.PrtMkDefaultValue(Main.type_8_PRT_TYPE);
PRT_VALUE.PrtPrimSetMachine(tmp_101, myHandle);
assert((client.mach != null), "Target of send must be non-null");
tmpPayload_36 = PRT_VALUE.PrtCloneValue(tmp_101);
Main.InvokeMachine_Prop_1(tmp_100.ev, tmpPayload_36);
Main.InvokeMachine_Prop_2(tmp_100.ev, tmpPayload_36);
Main.InvokeMachine_Prop_6(tmp_100.ev, tmpPayload_36);
Main.InvokeMachine_Prop_7(tmp_100.ev, tmpPayload_36);
Main.InvokeMachine_Prop_8(tmp_100.ev, tmpPayload_36);
Main.InvokeMachine_Prop_9(tmp_100.ev, tmpPayload_36);
Main.InvokeMachine_Prop_3(tmp_100.ev, tmpPayload_36);
Main.InvokeMachine_Prop_10a(tmp_100.ev, tmpPayload_36);
Main.InvokeMachine_Prop_10b(tmp_100.ev, tmpPayload_36);
Main.InvokeMachine_Prop_10c(tmp_100.ev, tmpPayload_36);
client.mach.EnqueueEvent(tmp_100.ev, tmpPayload_36, myHandle);
entryCtxt.Send(1, locals, currentEvent, currentArg);
return;

AnonFun2_5:

;

;
entryCtxt.Return();
return;

;

}
void AnonFun3(Continuation entryCtxt) {
PRT_VALUE_ARRAY locals;
SM_EVENT currentEvent;
PRT_VALUE currentArg;
PRT_VALUE tmp_102;
PRT_VALUE tmp_103;
PRT_VALUE tmpPayload_37;
StackFrame retTo_56;

dummy:
retTo_56 = entryCtxt.PopReturnTo();
locals = retTo_56.locals;
currentEvent = retTo_56.currentEvent;
currentArg = retTo_56.currentArg;
if ((retTo_56.pc == 0)) {
goto start;
}
if ((retTo_56.pc == 1)) {
goto AnonFun3_11;
}
assert(false, "Internal error");

start:
tmp_102 = PRT_VALUE.PrtMkDefaultValue(Main.type_12_PRT_TYPE);
PRT_VALUE.PrtPrimSetEvent(tmp_102, Main.TIMEOUT_SM_EVENT);
tmp_103 = PRT_VALUE.PrtMkDefaultValue(Main.type_8_PRT_TYPE);
PRT_VALUE.PrtPrimSetMachine(tmp_103, myHandle);
assert((client.mach != null), "Target of send must be non-null");
tmpPayload_37 = PRT_VALUE.PrtCloneValue(tmp_103);
Main.InvokeMachine_Prop_1(tmp_102.ev, tmpPayload_37);
Main.InvokeMachine_Prop_2(tmp_102.ev, tmpPayload_37);
Main.InvokeMachine_Prop_6(tmp_102.ev, tmpPayload_37);
Main.InvokeMachine_Prop_7(tmp_102.ev, tmpPayload_37);
Main.InvokeMachine_Prop_8(tmp_102.ev, tmpPayload_37);
Main.InvokeMachine_Prop_9(tmp_102.ev, tmpPayload_37);
Main.InvokeMachine_Prop_3(tmp_102.ev, tmpPayload_37);
Main.InvokeMachine_Prop_10a(tmp_102.ev, tmpPayload_37);
Main.InvokeMachine_Prop_10b(tmp_102.ev, tmpPayload_37);
Main.InvokeMachine_Prop_10c(tmp_102.ev, tmpPayload_37);
client.mach.EnqueueEvent(tmp_102.ev, tmpPayload_37, myHandle);
entryCtxt.Send(1, locals, currentEvent, currentArg);
return;

AnonFun3_11:

;

;
entryCtxt.Return();
return;

;

}
void AnonFun4(Continuation entryCtxt) {
PRT_VALUE_ARRAY locals;
SM_EVENT currentEvent;
PRT_VALUE currentArg;
bool nondet_0;
PRT_VALUE tmp_104;
PRT_VALUE tmp_105;
PRT_VALUE tmp_106;
PRT_VALUE tmpPayload_38;
PRT_VALUE tmp_107;
PRT_VALUE tmp_108;
PRT_VALUE tmpPayload_39;
PRT_VALUE tmp_109;
PRT_VALUE tmp_110;
PRT_VALUE tmpPayload_40;
StackFrame retTo_57;

dummy:
retTo_57 = entryCtxt.PopReturnTo();
locals = retTo_57.locals;
currentEvent = retTo_57.currentEvent;
currentArg = retTo_57.currentArg;
if ((retTo_57.pc == 0)) {
goto start;
}
if ((retTo_57.pc == 1)) {
goto AnonFun4_6;
}
if ((retTo_57.pc == 2)) {
goto AnonFun4_7;
}
if ((retTo_57.pc == 3)) {
goto AnonFun4_8;
}
if ((retTo_57.pc == 4)) {
goto AnonFun4_9;
}
assert(false, "Internal error");

start:
entryCtxt.Nondet(1, locals, currentEvent, currentArg);
return;

AnonFun4_6:
nondet_0 = entryCtxt.nondet;

;
entryCtxt.nondet = false;
tmp_104 = PRT_VALUE.PrtMkDefaultValue(Main.type_5_PRT_TYPE);
PRT_VALUE.PrtPrimSetBool(tmp_104, nondet_0);
if (!tmp_104.bl) {
goto AnonFun4_if_0_else;
}
tmp_105 = PRT_VALUE.PrtMkDefaultValue(Main.type_12_PRT_TYPE);
PRT_VALUE.PrtPrimSetEvent(tmp_105, Main.CANCEL_SUCCESS_SM_EVENT);
tmp_106 = PRT_VALUE.PrtMkDefaultValue(Main.type_8_PRT_TYPE);
PRT_VALUE.PrtPrimSetMachine(tmp_106, myHandle);
assert((client.mach != null), "Target of send must be non-null");
tmpPayload_38 = PRT_VALUE.PrtCloneValue(tmp_106);
Main.InvokeMachine_Prop_1(tmp_105.ev, tmpPayload_38);
Main.InvokeMachine_Prop_2(tmp_105.ev, tmpPayload_38);
Main.InvokeMachine_Prop_6(tmp_105.ev, tmpPayload_38);
Main.InvokeMachine_Prop_7(tmp_105.ev, tmpPayload_38);
Main.InvokeMachine_Prop_8(tmp_105.ev, tmpPayload_38);
Main.InvokeMachine_Prop_9(tmp_105.ev, tmpPayload_38);
Main.InvokeMachine_Prop_3(tmp_105.ev, tmpPayload_38);
Main.InvokeMachine_Prop_10a(tmp_105.ev, tmpPayload_38);
Main.InvokeMachine_Prop_10b(tmp_105.ev, tmpPayload_38);
Main.InvokeMachine_Prop_10c(tmp_105.ev, tmpPayload_38);
client.mach.EnqueueEvent(tmp_105.ev, tmpPayload_38, myHandle);
entryCtxt.Send(2, locals, currentEvent, currentArg);
return;

AnonFun4_7:

;
goto AnonFun4_if_0_end;
AnonFun4_if_0_else:
tmp_107 = PRT_VALUE.PrtMkDefaultValue(Main.type_12_PRT_TYPE);
PRT_VALUE.PrtPrimSetEvent(tmp_107, Main.CANCEL_FAILURE_SM_EVENT);
tmp_108 = PRT_VALUE.PrtMkDefaultValue(Main.type_8_PRT_TYPE);
PRT_VALUE.PrtPrimSetMachine(tmp_108, myHandle);
assert((client.mach != null), "Target of send must be non-null");
tmpPayload_39 = PRT_VALUE.PrtCloneValue(tmp_108);
Main.InvokeMachine_Prop_1(tmp_107.ev, tmpPayload_39);
Main.InvokeMachine_Prop_2(tmp_107.ev, tmpPayload_39);
Main.InvokeMachine_Prop_6(tmp_107.ev, tmpPayload_39);
Main.InvokeMachine_Prop_7(tmp_107.ev, tmpPayload_39);
Main.InvokeMachine_Prop_8(tmp_107.ev, tmpPayload_39);
Main.InvokeMachine_Prop_9(tmp_107.ev, tmpPayload_39);
Main.InvokeMachine_Prop_3(tmp_107.ev, tmpPayload_39);
Main.InvokeMachine_Prop_10a(tmp_107.ev, tmpPayload_39);
Main.InvokeMachine_Prop_10b(tmp_107.ev, tmpPayload_39);
Main.InvokeMachine_Prop_10c(tmp_107.ev, tmpPayload_39);
client.mach.EnqueueEvent(tmp_107.ev, tmpPayload_39, myHandle);
entryCtxt.Send(3, locals, currentEvent, currentArg);
return;

AnonFun4_8:

;
tmp_109 = PRT_VALUE.PrtMkDefaultValue(Main.type_12_PRT_TYPE);
PRT_VALUE.PrtPrimSetEvent(tmp_109, Main.TIMEOUT_SM_EVENT);
tmp_110 = PRT_VALUE.PrtMkDefaultValue(Main.type_8_PRT_TYPE);
PRT_VALUE.PrtPrimSetMachine(tmp_110, myHandle);
assert((client.mach != null), "Target of send must be non-null");
tmpPayload_40 = PRT_VALUE.PrtCloneValue(tmp_110);
Main.InvokeMachine_Prop_1(tmp_109.ev, tmpPayload_40);
Main.InvokeMachine_Prop_2(tmp_109.ev, tmpPayload_40);
Main.InvokeMachine_Prop_6(tmp_109.ev, tmpPayload_40);
Main.InvokeMachine_Prop_7(tmp_109.ev, tmpPayload_40);
Main.InvokeMachine_Prop_8(tmp_109.ev, tmpPayload_40);
Main.InvokeMachine_Prop_9(tmp_109.ev, tmpPayload_40);
Main.InvokeMachine_Prop_3(tmp_109.ev, tmpPayload_40);
Main.InvokeMachine_Prop_10a(tmp_109.ev, tmpPayload_40);
Main.InvokeMachine_Prop_10b(tmp_109.ev, tmpPayload_40);
Main.InvokeMachine_Prop_10c(tmp_109.ev, tmpPayload_40);
client.mach.EnqueueEvent(tmp_109.ev, tmpPayload_40, myHandle);
entryCtxt.Send(4, locals, currentEvent, currentArg);
return;

AnonFun4_9:

;

;

AnonFun4_if_0_end:

;

;
entryCtxt.Return();
return;

;

}
};

class MACHINE_Prop_1{
PRT_VALUE hCat;
PRT_VALUE hDog;
SM_HANDLE myHandle;
void Prop_1_Init_CalculateDeferredAndActionSet() {

dummy:
myHandle.stack.deferredSet = new SM_EVENT_SET;
myHandle.stack.actionSet = new SM_EVENT_SET;
myHandle.stack.AddStackDeferredSet(myHandle.stack.deferredSet);
myHandle.stack.deferredSet = (myHandle.stack.deferredSet - Main.M_hDog_SM_EVENT);
myHandle.stack.deferredSet = (myHandle.stack.deferredSet - Main.M_hCat_SM_EVENT);
myHandle.stack.deferredSet = (myHandle.stack.deferredSet - Main.M_rDog_SM_EVENT);
myHandle.stack.deferredSet = (myHandle.stack.deferredSet - Main.M_rCat_SM_EVENT);
myHandle.stack.AddStackActionSet(myHandle.stack.actionSet);
myHandle.stack.actionSet = (myHandle.stack.actionSet + Main.M_hDog_SM_EVENT);
myHandle.stack.actionSet = (myHandle.stack.actionSet + Main.M_hCat_SM_EVENT);
myHandle.stack.actionSet = (myHandle.stack.actionSet + Main.M_rDog_SM_EVENT);
myHandle.stack.actionSet = (myHandle.stack.actionSet + Main.M_rCat_SM_EVENT);
myHandle.stack.es = new SM_EVENT_ARRAY[4];
myHandle.stack.as = new ActionOrFun_ARRAY[4];
myHandle.stack.es[0] = Main.M_hDog_SM_EVENT;
myHandle.stack.as[0] = ActionOrFun._Prop_1_AnonFun2;
myHandle.stack.es[1] = Main.M_hCat_SM_EVENT;
myHandle.stack.as[1] = ActionOrFun._Prop_1_AnonFun3;
myHandle.stack.es[2] = Main.M_rDog_SM_EVENT;
myHandle.stack.as[2] = ActionOrFun._Prop_1_AnonFun4;
myHandle.stack.es[3] = Main.M_rCat_SM_EVENT;
myHandle.stack.as[3] = ActionOrFun._Prop_1_AnonFun5;

;

}
void Start() {

dummy:
Run(Main.Prop_1_Init_SM_STATE);
if ((myHandle.currentEvent == Main.halt_SM_EVENT)) {
myHandle.stack = null;
myHandle.buffer = null;
myHandle.currentArg = null;
SM_HANDLE.halted = (SM_HANDLE.halted + myHandle);
SM_HANDLE.enabled = (SM_HANDLE.enabled - myHandle);
return;

}
trace("<StateLog> Unhandled event exception by machine Prop_1-{0}\n", myHandle.instance);
assert(false, "Unhandled event exception by machine Prop_1");

;

}
void Run(SM_STATE state) {
bool doPop;
bool hasNullTransitionOrAction;

init:
myHandle.Push();
myHandle.stack.state = state;
doPop = RunHelper(true);
while (!doPop) {
hasNullTransitionOrAction = myHandle.stack.HasNullTransitionOrAction();
myHandle.DequeueEvent(hasNullTransitionOrAction);
doPop = RunHelper(false);

}
myHandle.Pop();

;

}
void TraceEnterState(SM_STATE state) {

init:
if ((state == Main.Prop_1_Init_SM_STATE)) {
trace("<StateLog> Machine Prop_1-{0} entering State Init\n", myHandle.instance);
return;

}
assert(false, "Internal error");

;

}
void TraceExitState(SM_STATE state) {

init:
if ((state == Main.Prop_1_Init_SM_STATE)) {
trace("<StateLog> Machine Prop_1-{0} exiting State Init\n", myHandle.instance);
return;

}
assert(false, "Internal error");

;

}
void CalculateDeferredAndActionSet(SM_STATE state) {

init:
if ((state == Main.Prop_1_Init_SM_STATE)) {
Prop_1_Init_CalculateDeferredAndActionSet();
return;

}
assert(false, "Internal error");

;

}
bool RunHelper(bool start) {
SM_STATE state;
SM_TRANSITION transition;
ActionOrFun actionFun;

init:
state = myHandle.stack.state;
if (start) {
goto enter;
} else {
goto handle;
}

;


enter:
state = myHandle.stack.state;
TraceEnterState(state);
if ((state.temperature == StateTemperature.Hot)) {
SM_HANDLE.hot = (SM_HANDLE.hot + myHandle);

} else {
SM_HANDLE.hot = (SM_HANDLE.hot - myHandle);

}
CalculateDeferredAndActionSet(state);
actionFun = state.entryFun;

;


execute:
ReentrancyHelper(actionFun);
if ((myHandle.cont.reason == ContinuationReason.Raise)) {
goto handle;
}
myHandle.currentEvent = null;
myHandle.currentArg = PRT_VALUE.PrtMkDefaultValue(Main.type_0_PRT_TYPE);
if ((myHandle.cont.reason != ContinuationReason.Pop)) {
return false;

}
TraceExitState(state);
ReentrancyHelper(state.exitFun);
return true;

;


handle:
if ((myHandle.currentEvent in myHandle.stack.actionSet)) {
actionFun = myHandle.stack.Find(myHandle.currentEvent);
goto execute;
}
transition = state.FindPushTransition(myHandle.currentEvent);
if ((transition != null)) {
Run(transition.to);
if ((myHandle.currentEvent == null)) {
return false;

} else {
goto handle;
}

}
TraceExitState(state);
ReentrancyHelper(state.exitFun);
transition = state.FindTransition(myHandle.currentEvent);
if ((transition == null)) {
return true;

}
ReentrancyHelper(transition.fun);
myHandle.stack.state = transition.to;
state = myHandle.stack.state;
goto enter;
;

}
bool ProcessContinuation() {
bool doPop;

init:
if ((myHandle.cont.reason == ContinuationReason.Return)) {
return true;

}
if ((myHandle.cont.reason == ContinuationReason.Pop)) {
return true;

}
if ((myHandle.cont.reason == ContinuationReason.Raise)) {
return true;

}
if ((myHandle.cont.reason == ContinuationReason.Receive)) {
myHandle.DequeueEvent(false);
return false;

}
if ((myHandle.cont.reason == ContinuationReason.Nondet)) {
myHandle.cont.nondet = choose(bool);
return false;

}
if ((myHandle.cont.reason == ContinuationReason.NewMachine)) {
yield;
return false;

}
if ((myHandle.cont.reason == ContinuationReason.Send)) {
yield;
return false;

}

;

}
void ReentrancyHelper(ActionOrFun actionFun) {
PRT_VALUE_ARRAY locals;
bool doPop;

init:
doPop = false;
myHandle.cont.Reset();
if ((actionFun == ActionOrFun._ResetObstacle)) {
trace("<FunctionLog> Machine Prop_1-{0} executing Function ResetObstacle\n", myHandle.instance);
locals = null;
myHandle.cont.PushReturnTo(0, locals, myHandle.currentEvent, myHandle.currentArg);
goto execute_ResetObstacle;
}
if ((actionFun == ActionOrFun._Seal)) {
trace("<FunctionLog> Machine Prop_1-{0} executing Function Seal\n", myHandle.instance);
locals = null;
myHandle.cont.PushReturnTo(0, locals, myHandle.currentEvent, myHandle.currentArg);
goto execute_Seal;
}
if ((actionFun == ActionOrFun._Unseal)) {
trace("<FunctionLog> Machine Prop_1-{0} executing Function Unseal\n", myHandle.instance);
locals = null;
myHandle.cont.PushReturnTo(0, locals, myHandle.currentEvent, myHandle.currentArg);
goto execute_Unseal;
}
if ((actionFun == ActionOrFun._InitializeMotionPlanning)) {
trace("<FunctionLog> Machine Prop_1-{0} executing Function InitializeMotionPlanning\n", myHandle.instance);
locals = new PRT_VALUE_ARRAY[4];
locals[3] = PRT_VALUE.PrtMkDefaultValue(Main.type_1_PRT_TYPE);
locals[2] = PRT_VALUE.PrtMkDefaultValue(Main.type_2_PRT_TYPE);
locals[1] = PRT_VALUE.PrtMkDefaultValue(Main.type_2_PRT_TYPE);
locals[0] = PRT_VALUE.PrtMkDefaultValue(Main.type_4_PRT_TYPE);
myHandle.cont.PushReturnTo(0, locals, myHandle.currentEvent, myHandle.currentArg);
goto execute_InitializeMotionPlanning;
}
if ((actionFun == ActionOrFun._CAT_CAGE_LOC)) {
trace("<FunctionLog> Machine Prop_1-{0} executing Function CAT_CAGE_LOC\n", myHandle.instance);
locals = null;
myHandle.cont.PushReturnTo(0, locals, myHandle.currentEvent, myHandle.currentArg);
goto execute_CAT_CAGE_LOC;
}
if ((actionFun == ActionOrFun._DOG_CAGE_LOC)) {
trace("<FunctionLog> Machine Prop_1-{0} executing Function DOG_CAGE_LOC\n", myHandle.instance);
locals = null;
myHandle.cont.PushReturnTo(0, locals, myHandle.currentEvent, myHandle.currentArg);
goto execute_DOG_CAGE_LOC;
}
if ((actionFun == ActionOrFun._MICE_CAGE_LOC)) {
trace("<FunctionLog> Machine Prop_1-{0} executing Function MICE_CAGE_LOC\n", myHandle.instance);
locals = null;
myHandle.cont.PushReturnTo(0, locals, myHandle.currentEvent, myHandle.currentArg);
goto execute_MICE_CAGE_LOC;
}
if ((actionFun == ActionOrFun._BATTERY_THRESHOLD)) {
trace("<FunctionLog> Machine Prop_1-{0} executing Function BATTERY_THRESHOLD\n", myHandle.instance);
locals = null;
myHandle.cont.PushReturnTo(0, locals, myHandle.currentEvent, myHandle.currentArg);
goto execute_BATTERY_THRESHOLD;
}
if ((actionFun == ActionOrFun._DOG)) {
trace("<FunctionLog> Machine Prop_1-{0} executing Function DOG\n", myHandle.instance);
locals = null;
myHandle.cont.PushReturnTo(0, locals, myHandle.currentEvent, myHandle.currentArg);
goto execute_DOG;
}
if ((actionFun == ActionOrFun._CAT)) {
trace("<FunctionLog> Machine Prop_1-{0} executing Function CAT\n", myHandle.instance);
locals = null;
myHandle.cont.PushReturnTo(0, locals, myHandle.currentEvent, myHandle.currentArg);
goto execute_CAT;
}
if ((actionFun == ActionOrFun._MICE)) {
trace("<FunctionLog> Machine Prop_1-{0} executing Function MICE\n", myHandle.instance);
locals = null;
myHandle.cont.PushReturnTo(0, locals, myHandle.currentEvent, myHandle.currentArg);
goto execute_MICE;
}
if ((actionFun == ActionOrFun._BATTERY_CHARGE_LOCATION)) {
trace("<FunctionLog> Machine Prop_1-{0} executing Function BATTERY_CHARGE_LOCATION\n", myHandle.instance);
locals = null;
myHandle.cont.PushReturnTo(0, locals, myHandle.currentEvent, myHandle.currentArg);
goto execute_BATTERY_CHARGE_LOCATION;
}
if ((actionFun == ActionOrFun._ROBOT_START_STATE)) {
trace("<FunctionLog> Machine Prop_1-{0} executing Function ROBOT_START_STATE\n", myHandle.instance);
locals = null;
myHandle.cont.PushReturnTo(0, locals, myHandle.currentEvent, myHandle.currentArg);
goto execute_ROBOT_START_STATE;
}
if ((actionFun == ActionOrFun._SIZE_OF_GRID)) {
trace("<FunctionLog> Machine Prop_1-{0} executing Function SIZE_OF_GRID\n", myHandle.instance);
locals = null;
myHandle.cont.PushReturnTo(0, locals, myHandle.currentEvent, myHandle.currentArg);
goto execute_SIZE_OF_GRID;
}
if ((actionFun == ActionOrFun._ROBOT_SCAN_LOCATIONS)) {
trace("<FunctionLog> Machine Prop_1-{0} executing Function ROBOT_SCAN_LOCATIONS\n", myHandle.instance);
locals = new PRT_VALUE_ARRAY[3];
locals[2] = PRT_VALUE.PrtMkDefaultValue(Main.type_2_PRT_TYPE);
locals[1] = PRT_VALUE.PrtMkDefaultValue(Main.type_2_PRT_TYPE);
locals[0] = PRT_VALUE.PrtMkDefaultValue(Main.type_1_PRT_TYPE);
myHandle.cont.PushReturnTo(0, locals, myHandle.currentEvent, myHandle.currentArg);
goto execute_ROBOT_SCAN_LOCATIONS;
}
if ((actionFun == ActionOrFun._GetStaticGoals)) {
trace("<FunctionLog> Machine Prop_1-{0} executing Function GetStaticGoals\n", myHandle.instance);
locals = new PRT_VALUE_ARRAY[1];
locals[0] = PRT_VALUE.PrtMkDefaultValue(Main.type_7_PRT_TYPE);
myHandle.cont.PushReturnTo(0, locals, myHandle.currentEvent, myHandle.currentArg);
goto execute_GetStaticGoals;
}
if ((actionFun == ActionOrFun._GetStaticObstacles)) {
trace("<FunctionLog> Machine Prop_1-{0} executing Function GetStaticObstacles\n", myHandle.instance);
locals = new PRT_VALUE_ARRAY[1];
locals[0] = PRT_VALUE.PrtMkDefaultValue(Main.type_2_PRT_TYPE);
myHandle.cont.PushReturnTo(0, locals, myHandle.currentEvent, myHandle.currentArg);
goto execute_GetStaticObstacles;
}
if ((actionFun == ActionOrFun._Prop_1_ignore)) {
trace("<FunctionLog> Machine Prop_1-{0} executing Function ignore\n", myHandle.instance);
locals = null;
myHandle.cont.PushReturnTo(0, locals, myHandle.currentEvent, myHandle.currentArg);
goto execute_ignore;
}
if ((actionFun == ActionOrFun._Prop_1_AnonFun0)) {
locals = null;
myHandle.cont.PushReturnTo(0, locals, myHandle.currentEvent, myHandle.currentArg);
goto execute_AnonFun0;
}
if ((actionFun == ActionOrFun._Prop_1_AnonFun1)) {
locals = null;
myHandle.cont.PushReturnTo(0, locals, myHandle.currentEvent, myHandle.currentArg);
goto execute_AnonFun1;
}
if ((actionFun == ActionOrFun._Prop_1_AnonFun2)) {
locals = null;
myHandle.cont.PushReturnTo(0, locals, myHandle.currentEvent, myHandle.currentArg);
goto execute_AnonFun2;
}
if ((actionFun == ActionOrFun._Prop_1_AnonFun3)) {
locals = null;
myHandle.cont.PushReturnTo(0, locals, myHandle.currentEvent, myHandle.currentArg);
goto execute_AnonFun3;
}
if ((actionFun == ActionOrFun._Prop_1_AnonFun4)) {
locals = null;
myHandle.cont.PushReturnTo(0, locals, myHandle.currentEvent, myHandle.currentArg);
goto execute_AnonFun4;
}
if ((actionFun == ActionOrFun._Prop_1_AnonFun5)) {
locals = null;
myHandle.cont.PushReturnTo(0, locals, myHandle.currentEvent, myHandle.currentArg);
goto execute_AnonFun5;
}
assert(false, "Internal error");

;


execute_ResetObstacle:
while (!doPop) {
Main.ResetObstacle(myHandle, myHandle.cont);
doPop = ProcessContinuation();

}
return;

;


execute_Seal:
while (!doPop) {
Main.Seal(myHandle, myHandle.cont);
doPop = ProcessContinuation();

}
return;

;


execute_Unseal:
while (!doPop) {
Main.Unseal(myHandle, myHandle.cont);
doPop = ProcessContinuation();

}
return;

;


execute_InitializeMotionPlanning:
while (!doPop) {
Main.InitializeMotionPlanning(myHandle, myHandle.cont);
doPop = ProcessContinuation();

}
return;

;


execute_CAT_CAGE_LOC:
while (!doPop) {
Main.CAT_CAGE_LOC(myHandle, myHandle.cont);
doPop = ProcessContinuation();

}
return;

;


execute_DOG_CAGE_LOC:
while (!doPop) {
Main.DOG_CAGE_LOC(myHandle, myHandle.cont);
doPop = ProcessContinuation();

}
return;

;


execute_MICE_CAGE_LOC:
while (!doPop) {
Main.MICE_CAGE_LOC(myHandle, myHandle.cont);
doPop = ProcessContinuation();

}
return;

;


execute_BATTERY_THRESHOLD:
while (!doPop) {
Main.BATTERY_THRESHOLD(myHandle, myHandle.cont);
doPop = ProcessContinuation();

}
return;

;


execute_DOG:
while (!doPop) {
Main.DOG(myHandle, myHandle.cont);
doPop = ProcessContinuation();

}
return;

;


execute_CAT:
while (!doPop) {
Main.CAT(myHandle, myHandle.cont);
doPop = ProcessContinuation();

}
return;

;


execute_MICE:
while (!doPop) {
Main.MICE(myHandle, myHandle.cont);
doPop = ProcessContinuation();

}
return;

;


execute_BATTERY_CHARGE_LOCATION:
while (!doPop) {
Main.BATTERY_CHARGE_LOCATION(myHandle, myHandle.cont);
doPop = ProcessContinuation();

}
return;

;


execute_ROBOT_START_STATE:
while (!doPop) {
Main.ROBOT_START_STATE(myHandle, myHandle.cont);
doPop = ProcessContinuation();

}
return;

;


execute_SIZE_OF_GRID:
while (!doPop) {
Main.SIZE_OF_GRID(myHandle, myHandle.cont);
doPop = ProcessContinuation();

}
return;

;


execute_ROBOT_SCAN_LOCATIONS:
while (!doPop) {
Main.ROBOT_SCAN_LOCATIONS(myHandle, myHandle.cont);
doPop = ProcessContinuation();

}
return;

;


execute_GetStaticGoals:
while (!doPop) {
Main.GetStaticGoals(myHandle, myHandle.cont);
doPop = ProcessContinuation();

}
return;

;


execute_GetStaticObstacles:
while (!doPop) {
Main.GetStaticObstacles(myHandle, myHandle.cont);
doPop = ProcessContinuation();

}
return;

;


execute_ignore:
while (!doPop) {
ignore(myHandle.cont);
doPop = ProcessContinuation();

}
return;

;


execute_AnonFun0:
while (!doPop) {
AnonFun0(myHandle.cont);
doPop = ProcessContinuation();

}
return;

;


execute_AnonFun1:
while (!doPop) {
AnonFun1(myHandle.cont);
doPop = ProcessContinuation();

}
return;

;


execute_AnonFun2:
while (!doPop) {
AnonFun2(myHandle.cont);
doPop = ProcessContinuation();

}
return;

;


execute_AnonFun3:
while (!doPop) {
AnonFun3(myHandle.cont);
doPop = ProcessContinuation();

}
return;

;


execute_AnonFun4:
while (!doPop) {
AnonFun4(myHandle.cont);
doPop = ProcessContinuation();

}
return;

;


execute_AnonFun5:
while (!doPop) {
AnonFun5(myHandle.cont);
doPop = ProcessContinuation();

}
return;

;

}
void ignore(Continuation entryCtxt) {
PRT_VALUE_ARRAY locals;
SM_EVENT currentEvent;
PRT_VALUE currentArg;
StackFrame retTo_58;

dummy:
retTo_58 = entryCtxt.PopReturnTo();
locals = retTo_58.locals;
currentEvent = retTo_58.currentEvent;
currentArg = retTo_58.currentArg;
if ((retTo_58.pc == 0)) {
goto start;
}
assert(false, "Internal error");

start:

;
entryCtxt.Return();
return;

;

}
void AnonFun0(Continuation entryCtxt) {
PRT_VALUE_ARRAY locals;
SM_EVENT currentEvent;
PRT_VALUE currentArg;
StackFrame retTo_59;

dummy:
retTo_59 = entryCtxt.PopReturnTo();
locals = retTo_59.locals;
currentEvent = retTo_59.currentEvent;
currentArg = retTo_59.currentArg;
if ((retTo_59.pc == 0)) {
goto start;
}
assert(false, "Internal error");

start:

;
entryCtxt.Return();
return;

;

}
void AnonFun1(Continuation entryCtxt) {
PRT_VALUE_ARRAY locals;
SM_EVENT currentEvent;
PRT_VALUE currentArg;
PRT_VALUE tmp_111;
PRT_VALUE tmp_112;
StackFrame retTo_60;

dummy:
retTo_60 = entryCtxt.PopReturnTo();
locals = retTo_60.locals;
currentEvent = retTo_60.currentEvent;
currentArg = retTo_60.currentArg;
if ((retTo_60.pc == 0)) {
goto start;
}
assert(false, "Internal error");

start:
tmp_111 = PRT_VALUE.PrtMkDefaultValue(Main.type_5_PRT_TYPE);
PRT_VALUE.PrtPrimSetBool(tmp_111, false);
hCat = PRT_VALUE.PrtCloneValue(tmp_111);
tmp_112 = PRT_VALUE.PrtMkDefaultValue(Main.type_5_PRT_TYPE);
PRT_VALUE.PrtPrimSetBool(tmp_112, false);
hDog = PRT_VALUE.PrtCloneValue(tmp_112);

;
entryCtxt.Return();
return;

;

}
void AnonFun2(Continuation entryCtxt) {
PRT_VALUE_ARRAY locals;
SM_EVENT currentEvent;
PRT_VALUE currentArg;
PRT_VALUE tmp_113;
PRT_VALUE tmpVar_86;
PRT_VALUE tmpVar_87;
StackFrame retTo_61;

dummy:
retTo_61 = entryCtxt.PopReturnTo();
locals = retTo_61.locals;
currentEvent = retTo_61.currentEvent;
currentArg = retTo_61.currentArg;
if ((retTo_61.pc == 0)) {
goto start;
}
assert(false, "Internal error");

start:
tmp_113 = PRT_VALUE.PrtMkDefaultValue(Main.type_5_PRT_TYPE);
PRT_VALUE.PrtPrimSetBool(tmp_113, true);
hDog = PRT_VALUE.PrtCloneValue(tmp_113);
if (hDog.bl) {

}
tmpVar_86 = PRT_VALUE.PrtMkDefaultValue(Main.type_5_PRT_TYPE);
PRT_VALUE.PrtPrimSetBool(tmpVar_86, (hDog.bl && hCat.bl));
tmpVar_87 = PRT_VALUE.PrtMkDefaultValue(Main.type_5_PRT_TYPE);
PRT_VALUE.PrtPrimSetBool(tmpVar_87, !tmpVar_86.bl);
assert(tmpVar_87.bl, "(50, 31): Assert failed");

;
entryCtxt.Return();
return;

;

}
void AnonFun3(Continuation entryCtxt) {
PRT_VALUE_ARRAY locals;
SM_EVENT currentEvent;
PRT_VALUE currentArg;
PRT_VALUE tmp_114;
PRT_VALUE tmpVar_88;
PRT_VALUE tmpVar_89;
StackFrame retTo_62;

dummy:
retTo_62 = entryCtxt.PopReturnTo();
locals = retTo_62.locals;
currentEvent = retTo_62.currentEvent;
currentArg = retTo_62.currentArg;
if ((retTo_62.pc == 0)) {
goto start;
}
assert(false, "Internal error");

start:
tmp_114 = PRT_VALUE.PrtMkDefaultValue(Main.type_5_PRT_TYPE);
PRT_VALUE.PrtPrimSetBool(tmp_114, true);
hCat = PRT_VALUE.PrtCloneValue(tmp_114);
if (hDog.bl) {

}
tmpVar_88 = PRT_VALUE.PrtMkDefaultValue(Main.type_5_PRT_TYPE);
PRT_VALUE.PrtPrimSetBool(tmpVar_88, (hDog.bl && hCat.bl));
tmpVar_89 = PRT_VALUE.PrtMkDefaultValue(Main.type_5_PRT_TYPE);
PRT_VALUE.PrtPrimSetBool(tmpVar_89, !tmpVar_88.bl);
assert(tmpVar_89.bl, "(51, 31): Assert failed");

;
entryCtxt.Return();
return;

;

}
void AnonFun4(Continuation entryCtxt) {
PRT_VALUE_ARRAY locals;
SM_EVENT currentEvent;
PRT_VALUE currentArg;
PRT_VALUE tmp_115;
StackFrame retTo_63;

dummy:
retTo_63 = entryCtxt.PopReturnTo();
locals = retTo_63.locals;
currentEvent = retTo_63.currentEvent;
currentArg = retTo_63.currentArg;
if ((retTo_63.pc == 0)) {
goto start;
}
assert(false, "Internal error");

start:
tmp_115 = PRT_VALUE.PrtMkDefaultValue(Main.type_5_PRT_TYPE);
PRT_VALUE.PrtPrimSetBool(tmp_115, false);
hDog = PRT_VALUE.PrtCloneValue(tmp_115);

;
entryCtxt.Return();
return;

;

}
void AnonFun5(Continuation entryCtxt) {
PRT_VALUE_ARRAY locals;
SM_EVENT currentEvent;
PRT_VALUE currentArg;
PRT_VALUE tmp_116;
StackFrame retTo_64;

dummy:
retTo_64 = entryCtxt.PopReturnTo();
locals = retTo_64.locals;
currentEvent = retTo_64.currentEvent;
currentArg = retTo_64.currentArg;
if ((retTo_64.pc == 0)) {
goto start;
}
assert(false, "Internal error");

start:
tmp_116 = PRT_VALUE.PrtMkDefaultValue(Main.type_5_PRT_TYPE);
PRT_VALUE.PrtPrimSetBool(tmp_116, false);
hCat = PRT_VALUE.PrtCloneValue(tmp_116);

;
entryCtxt.Return();
return;

;

}
};

class MACHINE_Prop_2{
PRT_VALUE hCat;
PRT_VALUE hMice;
SM_HANDLE myHandle;
void Prop_2_Init_CalculateDeferredAndActionSet() {

dummy:
myHandle.stack.deferredSet = new SM_EVENT_SET;
myHandle.stack.actionSet = new SM_EVENT_SET;
myHandle.stack.AddStackDeferredSet(myHandle.stack.deferredSet);
myHandle.stack.deferredSet = (myHandle.stack.deferredSet - Main.M_hMice_SM_EVENT);
myHandle.stack.deferredSet = (myHandle.stack.deferredSet - Main.M_hCat_SM_EVENT);
myHandle.stack.deferredSet = (myHandle.stack.deferredSet - Main.M_rMice_SM_EVENT);
myHandle.stack.deferredSet = (myHandle.stack.deferredSet - Main.M_rCat_SM_EVENT);
myHandle.stack.AddStackActionSet(myHandle.stack.actionSet);
myHandle.stack.actionSet = (myHandle.stack.actionSet + Main.M_hMice_SM_EVENT);
myHandle.stack.actionSet = (myHandle.stack.actionSet + Main.M_hCat_SM_EVENT);
myHandle.stack.actionSet = (myHandle.stack.actionSet + Main.M_rMice_SM_EVENT);
myHandle.stack.actionSet = (myHandle.stack.actionSet + Main.M_rCat_SM_EVENT);
myHandle.stack.es = new SM_EVENT_ARRAY[4];
myHandle.stack.as = new ActionOrFun_ARRAY[4];
myHandle.stack.es[0] = Main.M_hMice_SM_EVENT;
myHandle.stack.as[0] = ActionOrFun._Prop_2_AnonFun2;
myHandle.stack.es[1] = Main.M_hCat_SM_EVENT;
myHandle.stack.as[1] = ActionOrFun._Prop_2_AnonFun3;
myHandle.stack.es[2] = Main.M_rMice_SM_EVENT;
myHandle.stack.as[2] = ActionOrFun._Prop_2_AnonFun4;
myHandle.stack.es[3] = Main.M_rCat_SM_EVENT;
myHandle.stack.as[3] = ActionOrFun._Prop_2_AnonFun5;

;

}
void Start() {

dummy:
Run(Main.Prop_2_Init_SM_STATE);
if ((myHandle.currentEvent == Main.halt_SM_EVENT)) {
myHandle.stack = null;
myHandle.buffer = null;
myHandle.currentArg = null;
SM_HANDLE.halted = (SM_HANDLE.halted + myHandle);
SM_HANDLE.enabled = (SM_HANDLE.enabled - myHandle);
return;

}
trace("<StateLog> Unhandled event exception by machine Prop_2-{0}\n", myHandle.instance);
assert(false, "Unhandled event exception by machine Prop_2");

;

}
void Run(SM_STATE state) {
bool doPop;
bool hasNullTransitionOrAction;

init:
myHandle.Push();
myHandle.stack.state = state;
doPop = RunHelper(true);
while (!doPop) {
hasNullTransitionOrAction = myHandle.stack.HasNullTransitionOrAction();
myHandle.DequeueEvent(hasNullTransitionOrAction);
doPop = RunHelper(false);

}
myHandle.Pop();

;

}
void TraceEnterState(SM_STATE state) {

init:
if ((state == Main.Prop_2_Init_SM_STATE)) {
trace("<StateLog> Machine Prop_2-{0} entering State Init\n", myHandle.instance);
return;

}
assert(false, "Internal error");

;

}
void TraceExitState(SM_STATE state) {

init:
if ((state == Main.Prop_2_Init_SM_STATE)) {
trace("<StateLog> Machine Prop_2-{0} exiting State Init\n", myHandle.instance);
return;

}
assert(false, "Internal error");

;

}
void CalculateDeferredAndActionSet(SM_STATE state) {

init:
if ((state == Main.Prop_2_Init_SM_STATE)) {
Prop_2_Init_CalculateDeferredAndActionSet();
return;

}
assert(false, "Internal error");

;

}
bool RunHelper(bool start) {
SM_STATE state;
SM_TRANSITION transition;
ActionOrFun actionFun;

init:
state = myHandle.stack.state;
if (start) {
goto enter;
} else {
goto handle;
}

;


enter:
state = myHandle.stack.state;
TraceEnterState(state);
if ((state.temperature == StateTemperature.Hot)) {
SM_HANDLE.hot = (SM_HANDLE.hot + myHandle);

} else {
SM_HANDLE.hot = (SM_HANDLE.hot - myHandle);

}
CalculateDeferredAndActionSet(state);
actionFun = state.entryFun;

;


execute:
ReentrancyHelper(actionFun);
if ((myHandle.cont.reason == ContinuationReason.Raise)) {
goto handle;
}
myHandle.currentEvent = null;
myHandle.currentArg = PRT_VALUE.PrtMkDefaultValue(Main.type_0_PRT_TYPE);
if ((myHandle.cont.reason != ContinuationReason.Pop)) {
return false;

}
TraceExitState(state);
ReentrancyHelper(state.exitFun);
return true;

;


handle:
if ((myHandle.currentEvent in myHandle.stack.actionSet)) {
actionFun = myHandle.stack.Find(myHandle.currentEvent);
goto execute;
}
transition = state.FindPushTransition(myHandle.currentEvent);
if ((transition != null)) {
Run(transition.to);
if ((myHandle.currentEvent == null)) {
return false;

} else {
goto handle;
}

}
TraceExitState(state);
ReentrancyHelper(state.exitFun);
transition = state.FindTransition(myHandle.currentEvent);
if ((transition == null)) {
return true;

}
ReentrancyHelper(transition.fun);
myHandle.stack.state = transition.to;
state = myHandle.stack.state;
goto enter;
;

}
bool ProcessContinuation() {
bool doPop;

init:
if ((myHandle.cont.reason == ContinuationReason.Return)) {
return true;

}
if ((myHandle.cont.reason == ContinuationReason.Pop)) {
return true;

}
if ((myHandle.cont.reason == ContinuationReason.Raise)) {
return true;

}
if ((myHandle.cont.reason == ContinuationReason.Receive)) {
myHandle.DequeueEvent(false);
return false;

}
if ((myHandle.cont.reason == ContinuationReason.Nondet)) {
myHandle.cont.nondet = choose(bool);
return false;

}
if ((myHandle.cont.reason == ContinuationReason.NewMachine)) {
yield;
return false;

}
if ((myHandle.cont.reason == ContinuationReason.Send)) {
yield;
return false;

}

;

}
void ReentrancyHelper(ActionOrFun actionFun) {
PRT_VALUE_ARRAY locals;
bool doPop;

init:
doPop = false;
myHandle.cont.Reset();
if ((actionFun == ActionOrFun._ResetObstacle)) {
trace("<FunctionLog> Machine Prop_2-{0} executing Function ResetObstacle\n", myHandle.instance);
locals = null;
myHandle.cont.PushReturnTo(0, locals, myHandle.currentEvent, myHandle.currentArg);
goto execute_ResetObstacle;
}
if ((actionFun == ActionOrFun._Seal)) {
trace("<FunctionLog> Machine Prop_2-{0} executing Function Seal\n", myHandle.instance);
locals = null;
myHandle.cont.PushReturnTo(0, locals, myHandle.currentEvent, myHandle.currentArg);
goto execute_Seal;
}
if ((actionFun == ActionOrFun._Unseal)) {
trace("<FunctionLog> Machine Prop_2-{0} executing Function Unseal\n", myHandle.instance);
locals = null;
myHandle.cont.PushReturnTo(0, locals, myHandle.currentEvent, myHandle.currentArg);
goto execute_Unseal;
}
if ((actionFun == ActionOrFun._InitializeMotionPlanning)) {
trace("<FunctionLog> Machine Prop_2-{0} executing Function InitializeMotionPlanning\n", myHandle.instance);
locals = new PRT_VALUE_ARRAY[4];
locals[3] = PRT_VALUE.PrtMkDefaultValue(Main.type_1_PRT_TYPE);
locals[2] = PRT_VALUE.PrtMkDefaultValue(Main.type_2_PRT_TYPE);
locals[1] = PRT_VALUE.PrtMkDefaultValue(Main.type_2_PRT_TYPE);
locals[0] = PRT_VALUE.PrtMkDefaultValue(Main.type_4_PRT_TYPE);
myHandle.cont.PushReturnTo(0, locals, myHandle.currentEvent, myHandle.currentArg);
goto execute_InitializeMotionPlanning;
}
if ((actionFun == ActionOrFun._CAT_CAGE_LOC)) {
trace("<FunctionLog> Machine Prop_2-{0} executing Function CAT_CAGE_LOC\n", myHandle.instance);
locals = null;
myHandle.cont.PushReturnTo(0, locals, myHandle.currentEvent, myHandle.currentArg);
goto execute_CAT_CAGE_LOC;
}
if ((actionFun == ActionOrFun._DOG_CAGE_LOC)) {
trace("<FunctionLog> Machine Prop_2-{0} executing Function DOG_CAGE_LOC\n", myHandle.instance);
locals = null;
myHandle.cont.PushReturnTo(0, locals, myHandle.currentEvent, myHandle.currentArg);
goto execute_DOG_CAGE_LOC;
}
if ((actionFun == ActionOrFun._MICE_CAGE_LOC)) {
trace("<FunctionLog> Machine Prop_2-{0} executing Function MICE_CAGE_LOC\n", myHandle.instance);
locals = null;
myHandle.cont.PushReturnTo(0, locals, myHandle.currentEvent, myHandle.currentArg);
goto execute_MICE_CAGE_LOC;
}
if ((actionFun == ActionOrFun._BATTERY_THRESHOLD)) {
trace("<FunctionLog> Machine Prop_2-{0} executing Function BATTERY_THRESHOLD\n", myHandle.instance);
locals = null;
myHandle.cont.PushReturnTo(0, locals, myHandle.currentEvent, myHandle.currentArg);
goto execute_BATTERY_THRESHOLD;
}
if ((actionFun == ActionOrFun._DOG)) {
trace("<FunctionLog> Machine Prop_2-{0} executing Function DOG\n", myHandle.instance);
locals = null;
myHandle.cont.PushReturnTo(0, locals, myHandle.currentEvent, myHandle.currentArg);
goto execute_DOG;
}
if ((actionFun == ActionOrFun._CAT)) {
trace("<FunctionLog> Machine Prop_2-{0} executing Function CAT\n", myHandle.instance);
locals = null;
myHandle.cont.PushReturnTo(0, locals, myHandle.currentEvent, myHandle.currentArg);
goto execute_CAT;
}
if ((actionFun == ActionOrFun._MICE)) {
trace("<FunctionLog> Machine Prop_2-{0} executing Function MICE\n", myHandle.instance);
locals = null;
myHandle.cont.PushReturnTo(0, locals, myHandle.currentEvent, myHandle.currentArg);
goto execute_MICE;
}
if ((actionFun == ActionOrFun._BATTERY_CHARGE_LOCATION)) {
trace("<FunctionLog> Machine Prop_2-{0} executing Function BATTERY_CHARGE_LOCATION\n", myHandle.instance);
locals = null;
myHandle.cont.PushReturnTo(0, locals, myHandle.currentEvent, myHandle.currentArg);
goto execute_BATTERY_CHARGE_LOCATION;
}
if ((actionFun == ActionOrFun._ROBOT_START_STATE)) {
trace("<FunctionLog> Machine Prop_2-{0} executing Function ROBOT_START_STATE\n", myHandle.instance);
locals = null;
myHandle.cont.PushReturnTo(0, locals, myHandle.currentEvent, myHandle.currentArg);
goto execute_ROBOT_START_STATE;
}
if ((actionFun == ActionOrFun._SIZE_OF_GRID)) {
trace("<FunctionLog> Machine Prop_2-{0} executing Function SIZE_OF_GRID\n", myHandle.instance);
locals = null;
myHandle.cont.PushReturnTo(0, locals, myHandle.currentEvent, myHandle.currentArg);
goto execute_SIZE_OF_GRID;
}
if ((actionFun == ActionOrFun._ROBOT_SCAN_LOCATIONS)) {
trace("<FunctionLog> Machine Prop_2-{0} executing Function ROBOT_SCAN_LOCATIONS\n", myHandle.instance);
locals = new PRT_VALUE_ARRAY[3];
locals[2] = PRT_VALUE.PrtMkDefaultValue(Main.type_2_PRT_TYPE);
locals[1] = PRT_VALUE.PrtMkDefaultValue(Main.type_2_PRT_TYPE);
locals[0] = PRT_VALUE.PrtMkDefaultValue(Main.type_1_PRT_TYPE);
myHandle.cont.PushReturnTo(0, locals, myHandle.currentEvent, myHandle.currentArg);
goto execute_ROBOT_SCAN_LOCATIONS;
}
if ((actionFun == ActionOrFun._GetStaticGoals)) {
trace("<FunctionLog> Machine Prop_2-{0} executing Function GetStaticGoals\n", myHandle.instance);
locals = new PRT_VALUE_ARRAY[1];
locals[0] = PRT_VALUE.PrtMkDefaultValue(Main.type_7_PRT_TYPE);
myHandle.cont.PushReturnTo(0, locals, myHandle.currentEvent, myHandle.currentArg);
goto execute_GetStaticGoals;
}
if ((actionFun == ActionOrFun._GetStaticObstacles)) {
trace("<FunctionLog> Machine Prop_2-{0} executing Function GetStaticObstacles\n", myHandle.instance);
locals = new PRT_VALUE_ARRAY[1];
locals[0] = PRT_VALUE.PrtMkDefaultValue(Main.type_2_PRT_TYPE);
myHandle.cont.PushReturnTo(0, locals, myHandle.currentEvent, myHandle.currentArg);
goto execute_GetStaticObstacles;
}
if ((actionFun == ActionOrFun._Prop_2_ignore)) {
trace("<FunctionLog> Machine Prop_2-{0} executing Function ignore\n", myHandle.instance);
locals = null;
myHandle.cont.PushReturnTo(0, locals, myHandle.currentEvent, myHandle.currentArg);
goto execute_ignore;
}
if ((actionFun == ActionOrFun._Prop_2_AnonFun0)) {
locals = null;
myHandle.cont.PushReturnTo(0, locals, myHandle.currentEvent, myHandle.currentArg);
goto execute_AnonFun0;
}
if ((actionFun == ActionOrFun._Prop_2_AnonFun1)) {
locals = null;
myHandle.cont.PushReturnTo(0, locals, myHandle.currentEvent, myHandle.currentArg);
goto execute_AnonFun1;
}
if ((actionFun == ActionOrFun._Prop_2_AnonFun2)) {
locals = null;
myHandle.cont.PushReturnTo(0, locals, myHandle.currentEvent, myHandle.currentArg);
goto execute_AnonFun2;
}
if ((actionFun == ActionOrFun._Prop_2_AnonFun3)) {
locals = null;
myHandle.cont.PushReturnTo(0, locals, myHandle.currentEvent, myHandle.currentArg);
goto execute_AnonFun3;
}
if ((actionFun == ActionOrFun._Prop_2_AnonFun4)) {
locals = null;
myHandle.cont.PushReturnTo(0, locals, myHandle.currentEvent, myHandle.currentArg);
goto execute_AnonFun4;
}
if ((actionFun == ActionOrFun._Prop_2_AnonFun5)) {
locals = null;
myHandle.cont.PushReturnTo(0, locals, myHandle.currentEvent, myHandle.currentArg);
goto execute_AnonFun5;
}
assert(false, "Internal error");

;


execute_ResetObstacle:
while (!doPop) {
Main.ResetObstacle(myHandle, myHandle.cont);
doPop = ProcessContinuation();

}
return;

;


execute_Seal:
while (!doPop) {
Main.Seal(myHandle, myHandle.cont);
doPop = ProcessContinuation();

}
return;

;


execute_Unseal:
while (!doPop) {
Main.Unseal(myHandle, myHandle.cont);
doPop = ProcessContinuation();

}
return;

;


execute_InitializeMotionPlanning:
while (!doPop) {
Main.InitializeMotionPlanning(myHandle, myHandle.cont);
doPop = ProcessContinuation();

}
return;

;


execute_CAT_CAGE_LOC:
while (!doPop) {
Main.CAT_CAGE_LOC(myHandle, myHandle.cont);
doPop = ProcessContinuation();

}
return;

;


execute_DOG_CAGE_LOC:
while (!doPop) {
Main.DOG_CAGE_LOC(myHandle, myHandle.cont);
doPop = ProcessContinuation();

}
return;

;


execute_MICE_CAGE_LOC:
while (!doPop) {
Main.MICE_CAGE_LOC(myHandle, myHandle.cont);
doPop = ProcessContinuation();

}
return;

;


execute_BATTERY_THRESHOLD:
while (!doPop) {
Main.BATTERY_THRESHOLD(myHandle, myHandle.cont);
doPop = ProcessContinuation();

}
return;

;


execute_DOG:
while (!doPop) {
Main.DOG(myHandle, myHandle.cont);
doPop = ProcessContinuation();

}
return;

;


execute_CAT:
while (!doPop) {
Main.CAT(myHandle, myHandle.cont);
doPop = ProcessContinuation();

}
return;

;


execute_MICE:
while (!doPop) {
Main.MICE(myHandle, myHandle.cont);
doPop = ProcessContinuation();

}
return;

;


execute_BATTERY_CHARGE_LOCATION:
while (!doPop) {
Main.BATTERY_CHARGE_LOCATION(myHandle, myHandle.cont);
doPop = ProcessContinuation();

}
return;

;


execute_ROBOT_START_STATE:
while (!doPop) {
Main.ROBOT_START_STATE(myHandle, myHandle.cont);
doPop = ProcessContinuation();

}
return;

;


execute_SIZE_OF_GRID:
while (!doPop) {
Main.SIZE_OF_GRID(myHandle, myHandle.cont);
doPop = ProcessContinuation();

}
return;

;


execute_ROBOT_SCAN_LOCATIONS:
while (!doPop) {
Main.ROBOT_SCAN_LOCATIONS(myHandle, myHandle.cont);
doPop = ProcessContinuation();

}
return;

;


execute_GetStaticGoals:
while (!doPop) {
Main.GetStaticGoals(myHandle, myHandle.cont);
doPop = ProcessContinuation();

}
return;

;


execute_GetStaticObstacles:
while (!doPop) {
Main.GetStaticObstacles(myHandle, myHandle.cont);
doPop = ProcessContinuation();

}
return;

;


execute_ignore:
while (!doPop) {
ignore(myHandle.cont);
doPop = ProcessContinuation();

}
return;

;


execute_AnonFun0:
while (!doPop) {
AnonFun0(myHandle.cont);
doPop = ProcessContinuation();

}
return;

;


execute_AnonFun1:
while (!doPop) {
AnonFun1(myHandle.cont);
doPop = ProcessContinuation();

}
return;

;


execute_AnonFun2:
while (!doPop) {
AnonFun2(myHandle.cont);
doPop = ProcessContinuation();

}
return;

;


execute_AnonFun3:
while (!doPop) {
AnonFun3(myHandle.cont);
doPop = ProcessContinuation();

}
return;

;


execute_AnonFun4:
while (!doPop) {
AnonFun4(myHandle.cont);
doPop = ProcessContinuation();

}
return;

;


execute_AnonFun5:
while (!doPop) {
AnonFun5(myHandle.cont);
doPop = ProcessContinuation();

}
return;

;

}
void ignore(Continuation entryCtxt) {
PRT_VALUE_ARRAY locals;
SM_EVENT currentEvent;
PRT_VALUE currentArg;
StackFrame retTo_65;

dummy:
retTo_65 = entryCtxt.PopReturnTo();
locals = retTo_65.locals;
currentEvent = retTo_65.currentEvent;
currentArg = retTo_65.currentArg;
if ((retTo_65.pc == 0)) {
goto start;
}
assert(false, "Internal error");

start:

;
entryCtxt.Return();
return;

;

}
void AnonFun0(Continuation entryCtxt) {
PRT_VALUE_ARRAY locals;
SM_EVENT currentEvent;
PRT_VALUE currentArg;
StackFrame retTo_66;

dummy:
retTo_66 = entryCtxt.PopReturnTo();
locals = retTo_66.locals;
currentEvent = retTo_66.currentEvent;
currentArg = retTo_66.currentArg;
if ((retTo_66.pc == 0)) {
goto start;
}
assert(false, "Internal error");

start:

;
entryCtxt.Return();
return;

;

}
void AnonFun1(Continuation entryCtxt) {
PRT_VALUE_ARRAY locals;
SM_EVENT currentEvent;
PRT_VALUE currentArg;
PRT_VALUE tmp_117;
PRT_VALUE tmp_118;
StackFrame retTo_67;

dummy:
retTo_67 = entryCtxt.PopReturnTo();
locals = retTo_67.locals;
currentEvent = retTo_67.currentEvent;
currentArg = retTo_67.currentArg;
if ((retTo_67.pc == 0)) {
goto start;
}
assert(false, "Internal error");

start:
tmp_117 = PRT_VALUE.PrtMkDefaultValue(Main.type_5_PRT_TYPE);
PRT_VALUE.PrtPrimSetBool(tmp_117, false);
hCat = PRT_VALUE.PrtCloneValue(tmp_117);
tmp_118 = PRT_VALUE.PrtMkDefaultValue(Main.type_5_PRT_TYPE);
PRT_VALUE.PrtPrimSetBool(tmp_118, false);
hMice = PRT_VALUE.PrtCloneValue(tmp_118);

;
entryCtxt.Return();
return;

;

}
void AnonFun2(Continuation entryCtxt) {
PRT_VALUE_ARRAY locals;
SM_EVENT currentEvent;
PRT_VALUE currentArg;
PRT_VALUE tmp_119;
PRT_VALUE tmpVar_90;
PRT_VALUE tmpVar_91;
StackFrame retTo_68;

dummy:
retTo_68 = entryCtxt.PopReturnTo();
locals = retTo_68.locals;
currentEvent = retTo_68.currentEvent;
currentArg = retTo_68.currentArg;
if ((retTo_68.pc == 0)) {
goto start;
}
assert(false, "Internal error");

start:
tmp_119 = PRT_VALUE.PrtMkDefaultValue(Main.type_5_PRT_TYPE);
PRT_VALUE.PrtPrimSetBool(tmp_119, true);
hMice = PRT_VALUE.PrtCloneValue(tmp_119);
if (hMice.bl) {

}
tmpVar_90 = PRT_VALUE.PrtMkDefaultValue(Main.type_5_PRT_TYPE);
PRT_VALUE.PrtPrimSetBool(tmpVar_90, (hMice.bl && hCat.bl));
tmpVar_91 = PRT_VALUE.PrtMkDefaultValue(Main.type_5_PRT_TYPE);
PRT_VALUE.PrtPrimSetBool(tmpVar_91, !tmpVar_90.bl);
assert(tmpVar_91.bl, "(66, 33): Assert failed");

;
entryCtxt.Return();
return;

;

}
void AnonFun3(Continuation entryCtxt) {
PRT_VALUE_ARRAY locals;
SM_EVENT currentEvent;
PRT_VALUE currentArg;
PRT_VALUE tmp_120;
PRT_VALUE tmpVar_92;
PRT_VALUE tmpVar_93;
StackFrame retTo_69;

dummy:
retTo_69 = entryCtxt.PopReturnTo();
locals = retTo_69.locals;
currentEvent = retTo_69.currentEvent;
currentArg = retTo_69.currentArg;
if ((retTo_69.pc == 0)) {
goto start;
}
assert(false, "Internal error");

start:
tmp_120 = PRT_VALUE.PrtMkDefaultValue(Main.type_5_PRT_TYPE);
PRT_VALUE.PrtPrimSetBool(tmp_120, true);
hCat = PRT_VALUE.PrtCloneValue(tmp_120);
if (hMice.bl) {

}
tmpVar_92 = PRT_VALUE.PrtMkDefaultValue(Main.type_5_PRT_TYPE);
PRT_VALUE.PrtPrimSetBool(tmpVar_92, (hMice.bl && hCat.bl));
tmpVar_93 = PRT_VALUE.PrtMkDefaultValue(Main.type_5_PRT_TYPE);
PRT_VALUE.PrtPrimSetBool(tmpVar_93, !tmpVar_92.bl);
assert(tmpVar_93.bl, "(67, 31): Assert failed");

;
entryCtxt.Return();
return;

;

}
void AnonFun4(Continuation entryCtxt) {
PRT_VALUE_ARRAY locals;
SM_EVENT currentEvent;
PRT_VALUE currentArg;
PRT_VALUE tmp_121;
StackFrame retTo_70;

dummy:
retTo_70 = entryCtxt.PopReturnTo();
locals = retTo_70.locals;
currentEvent = retTo_70.currentEvent;
currentArg = retTo_70.currentArg;
if ((retTo_70.pc == 0)) {
goto start;
}
assert(false, "Internal error");

start:
tmp_121 = PRT_VALUE.PrtMkDefaultValue(Main.type_5_PRT_TYPE);
PRT_VALUE.PrtPrimSetBool(tmp_121, false);
hMice = PRT_VALUE.PrtCloneValue(tmp_121);

;
entryCtxt.Return();
return;

;

}
void AnonFun5(Continuation entryCtxt) {
PRT_VALUE_ARRAY locals;
SM_EVENT currentEvent;
PRT_VALUE currentArg;
PRT_VALUE tmp_122;
StackFrame retTo_71;

dummy:
retTo_71 = entryCtxt.PopReturnTo();
locals = retTo_71.locals;
currentEvent = retTo_71.currentEvent;
currentArg = retTo_71.currentArg;
if ((retTo_71.pc == 0)) {
goto start;
}
assert(false, "Internal error");

start:
tmp_122 = PRT_VALUE.PrtMkDefaultValue(Main.type_5_PRT_TYPE);
PRT_VALUE.PrtPrimSetBool(tmp_122, false);
hCat = PRT_VALUE.PrtCloneValue(tmp_122);

;
entryCtxt.Return();
return;

;

}
};

class MACHINE_Prop_6{
PRT_VALUE hCat;
SM_HANDLE myHandle;
void Prop_6_Init_CalculateDeferredAndActionSet() {

dummy:
myHandle.stack.deferredSet = new SM_EVENT_SET;
myHandle.stack.actionSet = new SM_EVENT_SET;
myHandle.stack.AddStackDeferredSet(myHandle.stack.deferredSet);
myHandle.stack.deferredSet = (myHandle.stack.deferredSet - Main.local_SM_EVENT);
myHandle.stack.AddStackActionSet(myHandle.stack.actionSet);
myHandle.stack.actionSet = (myHandle.stack.actionSet - Main.local_SM_EVENT);
myHandle.stack.es = new SM_EVENT_ARRAY[0];
myHandle.stack.as = new ActionOrFun_ARRAY[0];

;

}
void Prop_6_Wait_CalculateDeferredAndActionSet() {

dummy:
myHandle.stack.deferredSet = new SM_EVENT_SET;
myHandle.stack.actionSet = new SM_EVENT_SET;
myHandle.stack.AddStackDeferredSet(myHandle.stack.deferredSet);
myHandle.stack.deferredSet = (myHandle.stack.deferredSet - Main.M_sDog_SM_EVENT);
myHandle.stack.deferredSet = (myHandle.stack.deferredSet - Main.M_hCat_SM_EVENT);
myHandle.stack.deferredSet = (myHandle.stack.deferredSet - Main.M_rCat_SM_EVENT);
myHandle.stack.deferredSet = (myHandle.stack.deferredSet - Main.local_SM_EVENT);
myHandle.stack.AddStackActionSet(myHandle.stack.actionSet);
myHandle.stack.actionSet = (myHandle.stack.actionSet + Main.M_sDog_SM_EVENT);
myHandle.stack.actionSet = (myHandle.stack.actionSet + Main.M_hCat_SM_EVENT);
myHandle.stack.actionSet = (myHandle.stack.actionSet + Main.M_rCat_SM_EVENT);
myHandle.stack.actionSet = (myHandle.stack.actionSet - Main.local_SM_EVENT);
myHandle.stack.es = new SM_EVENT_ARRAY[3];
myHandle.stack.as = new ActionOrFun_ARRAY[3];
myHandle.stack.es[0] = Main.M_sDog_SM_EVENT;
myHandle.stack.as[0] = ActionOrFun._Prop_6_AnonFun2;
myHandle.stack.es[1] = Main.M_hCat_SM_EVENT;
myHandle.stack.as[1] = ActionOrFun._Prop_6_AnonFun3;
myHandle.stack.es[2] = Main.M_rCat_SM_EVENT;
myHandle.stack.as[2] = ActionOrFun._Prop_6_AnonFun4;

;

}
void Prop_6_Wait_M_hDog_CalculateDeferredAndActionSet() {

dummy:
myHandle.stack.deferredSet = new SM_EVENT_SET;
myHandle.stack.actionSet = new SM_EVENT_SET;
myHandle.stack.AddStackDeferredSet(myHandle.stack.deferredSet);
myHandle.stack.deferredSet = (myHandle.stack.deferredSet - Main.M_hDog_SM_EVENT);
myHandle.stack.AddStackActionSet(myHandle.stack.actionSet);
myHandle.stack.actionSet = (myHandle.stack.actionSet - Main.M_hDog_SM_EVENT);
myHandle.stack.es = new SM_EVENT_ARRAY[0];
myHandle.stack.as = new ActionOrFun_ARRAY[0];

;

}
void Start() {

dummy:
Run(Main.Prop_6_Init_SM_STATE);
if ((myHandle.currentEvent == Main.halt_SM_EVENT)) {
myHandle.stack = null;
myHandle.buffer = null;
myHandle.currentArg = null;
SM_HANDLE.halted = (SM_HANDLE.halted + myHandle);
SM_HANDLE.enabled = (SM_HANDLE.enabled - myHandle);
return;

}
trace("<StateLog> Unhandled event exception by machine Prop_6-{0}\n", myHandle.instance);
assert(false, "Unhandled event exception by machine Prop_6");

;

}
void Run(SM_STATE state) {
bool doPop;
bool hasNullTransitionOrAction;

init:
myHandle.Push();
myHandle.stack.state = state;
doPop = RunHelper(true);
while (!doPop) {
hasNullTransitionOrAction = myHandle.stack.HasNullTransitionOrAction();
myHandle.DequeueEvent(hasNullTransitionOrAction);
doPop = RunHelper(false);

}
myHandle.Pop();

;

}
void TraceEnterState(SM_STATE state) {

init:
if ((state == Main.Prop_6_Init_SM_STATE)) {
trace("<StateLog> Machine Prop_6-{0} entering State Init\n", myHandle.instance);
return;

}
if ((state == Main.Prop_6_Wait_SM_STATE)) {
trace("<StateLog> Machine Prop_6-{0} entering State Wait\n", myHandle.instance);
return;

}
if ((state == Main.Prop_6_Wait_M_hDog_SM_STATE)) {
trace("<StateLog> Machine Prop_6-{0} entering State Wait_M_hDog\n", myHandle.instance);
return;

}
assert(false, "Internal error");

;

}
void TraceExitState(SM_STATE state) {

init:
if ((state == Main.Prop_6_Init_SM_STATE)) {
trace("<StateLog> Machine Prop_6-{0} exiting State Init\n", myHandle.instance);
return;

}
if ((state == Main.Prop_6_Wait_SM_STATE)) {
trace("<StateLog> Machine Prop_6-{0} exiting State Wait\n", myHandle.instance);
return;

}
if ((state == Main.Prop_6_Wait_M_hDog_SM_STATE)) {
trace("<StateLog> Machine Prop_6-{0} exiting State Wait_M_hDog\n", myHandle.instance);
return;

}
assert(false, "Internal error");

;

}
void CalculateDeferredAndActionSet(SM_STATE state) {

init:
if ((state == Main.Prop_6_Init_SM_STATE)) {
Prop_6_Init_CalculateDeferredAndActionSet();
return;

}
if ((state == Main.Prop_6_Wait_SM_STATE)) {
Prop_6_Wait_CalculateDeferredAndActionSet();
return;

}
if ((state == Main.Prop_6_Wait_M_hDog_SM_STATE)) {
Prop_6_Wait_M_hDog_CalculateDeferredAndActionSet();
return;

}
assert(false, "Internal error");

;

}
bool RunHelper(bool start) {
SM_STATE state;
SM_TRANSITION transition;
ActionOrFun actionFun;

init:
state = myHandle.stack.state;
if (start) {
goto enter;
} else {
goto handle;
}

;


enter:
state = myHandle.stack.state;
TraceEnterState(state);
if ((state.temperature == StateTemperature.Hot)) {
SM_HANDLE.hot = (SM_HANDLE.hot + myHandle);

} else {
SM_HANDLE.hot = (SM_HANDLE.hot - myHandle);

}
CalculateDeferredAndActionSet(state);
actionFun = state.entryFun;

;


execute:
ReentrancyHelper(actionFun);
if ((myHandle.cont.reason == ContinuationReason.Raise)) {
goto handle;
}
myHandle.currentEvent = null;
myHandle.currentArg = PRT_VALUE.PrtMkDefaultValue(Main.type_0_PRT_TYPE);
if ((myHandle.cont.reason != ContinuationReason.Pop)) {
return false;

}
TraceExitState(state);
ReentrancyHelper(state.exitFun);
return true;

;


handle:
if ((myHandle.currentEvent in myHandle.stack.actionSet)) {
actionFun = myHandle.stack.Find(myHandle.currentEvent);
goto execute;
}
transition = state.FindPushTransition(myHandle.currentEvent);
if ((transition != null)) {
Run(transition.to);
if ((myHandle.currentEvent == null)) {
return false;

} else {
goto handle;
}

}
TraceExitState(state);
ReentrancyHelper(state.exitFun);
transition = state.FindTransition(myHandle.currentEvent);
if ((transition == null)) {
return true;

}
ReentrancyHelper(transition.fun);
myHandle.stack.state = transition.to;
state = myHandle.stack.state;
goto enter;
;

}
bool ProcessContinuation() {
bool doPop;

init:
if ((myHandle.cont.reason == ContinuationReason.Return)) {
return true;

}
if ((myHandle.cont.reason == ContinuationReason.Pop)) {
return true;

}
if ((myHandle.cont.reason == ContinuationReason.Raise)) {
return true;

}
if ((myHandle.cont.reason == ContinuationReason.Receive)) {
myHandle.DequeueEvent(false);
return false;

}
if ((myHandle.cont.reason == ContinuationReason.Nondet)) {
myHandle.cont.nondet = choose(bool);
return false;

}
if ((myHandle.cont.reason == ContinuationReason.NewMachine)) {
yield;
return false;

}
if ((myHandle.cont.reason == ContinuationReason.Send)) {
yield;
return false;

}

;

}
void ReentrancyHelper(ActionOrFun actionFun) {
PRT_VALUE_ARRAY locals;
bool doPop;

init:
doPop = false;
myHandle.cont.Reset();
if ((actionFun == ActionOrFun._ResetObstacle)) {
trace("<FunctionLog> Machine Prop_6-{0} executing Function ResetObstacle\n", myHandle.instance);
locals = null;
myHandle.cont.PushReturnTo(0, locals, myHandle.currentEvent, myHandle.currentArg);
goto execute_ResetObstacle;
}
if ((actionFun == ActionOrFun._Seal)) {
trace("<FunctionLog> Machine Prop_6-{0} executing Function Seal\n", myHandle.instance);
locals = null;
myHandle.cont.PushReturnTo(0, locals, myHandle.currentEvent, myHandle.currentArg);
goto execute_Seal;
}
if ((actionFun == ActionOrFun._Unseal)) {
trace("<FunctionLog> Machine Prop_6-{0} executing Function Unseal\n", myHandle.instance);
locals = null;
myHandle.cont.PushReturnTo(0, locals, myHandle.currentEvent, myHandle.currentArg);
goto execute_Unseal;
}
if ((actionFun == ActionOrFun._InitializeMotionPlanning)) {
trace("<FunctionLog> Machine Prop_6-{0} executing Function InitializeMotionPlanning\n", myHandle.instance);
locals = new PRT_VALUE_ARRAY[4];
locals[3] = PRT_VALUE.PrtMkDefaultValue(Main.type_1_PRT_TYPE);
locals[2] = PRT_VALUE.PrtMkDefaultValue(Main.type_2_PRT_TYPE);
locals[1] = PRT_VALUE.PrtMkDefaultValue(Main.type_2_PRT_TYPE);
locals[0] = PRT_VALUE.PrtMkDefaultValue(Main.type_4_PRT_TYPE);
myHandle.cont.PushReturnTo(0, locals, myHandle.currentEvent, myHandle.currentArg);
goto execute_InitializeMotionPlanning;
}
if ((actionFun == ActionOrFun._CAT_CAGE_LOC)) {
trace("<FunctionLog> Machine Prop_6-{0} executing Function CAT_CAGE_LOC\n", myHandle.instance);
locals = null;
myHandle.cont.PushReturnTo(0, locals, myHandle.currentEvent, myHandle.currentArg);
goto execute_CAT_CAGE_LOC;
}
if ((actionFun == ActionOrFun._DOG_CAGE_LOC)) {
trace("<FunctionLog> Machine Prop_6-{0} executing Function DOG_CAGE_LOC\n", myHandle.instance);
locals = null;
myHandle.cont.PushReturnTo(0, locals, myHandle.currentEvent, myHandle.currentArg);
goto execute_DOG_CAGE_LOC;
}
if ((actionFun == ActionOrFun._MICE_CAGE_LOC)) {
trace("<FunctionLog> Machine Prop_6-{0} executing Function MICE_CAGE_LOC\n", myHandle.instance);
locals = null;
myHandle.cont.PushReturnTo(0, locals, myHandle.currentEvent, myHandle.currentArg);
goto execute_MICE_CAGE_LOC;
}
if ((actionFun == ActionOrFun._BATTERY_THRESHOLD)) {
trace("<FunctionLog> Machine Prop_6-{0} executing Function BATTERY_THRESHOLD\n", myHandle.instance);
locals = null;
myHandle.cont.PushReturnTo(0, locals, myHandle.currentEvent, myHandle.currentArg);
goto execute_BATTERY_THRESHOLD;
}
if ((actionFun == ActionOrFun._DOG)) {
trace("<FunctionLog> Machine Prop_6-{0} executing Function DOG\n", myHandle.instance);
locals = null;
myHandle.cont.PushReturnTo(0, locals, myHandle.currentEvent, myHandle.currentArg);
goto execute_DOG;
}
if ((actionFun == ActionOrFun._CAT)) {
trace("<FunctionLog> Machine Prop_6-{0} executing Function CAT\n", myHandle.instance);
locals = null;
myHandle.cont.PushReturnTo(0, locals, myHandle.currentEvent, myHandle.currentArg);
goto execute_CAT;
}
if ((actionFun == ActionOrFun._MICE)) {
trace("<FunctionLog> Machine Prop_6-{0} executing Function MICE\n", myHandle.instance);
locals = null;
myHandle.cont.PushReturnTo(0, locals, myHandle.currentEvent, myHandle.currentArg);
goto execute_MICE;
}
if ((actionFun == ActionOrFun._BATTERY_CHARGE_LOCATION)) {
trace("<FunctionLog> Machine Prop_6-{0} executing Function BATTERY_CHARGE_LOCATION\n", myHandle.instance);
locals = null;
myHandle.cont.PushReturnTo(0, locals, myHandle.currentEvent, myHandle.currentArg);
goto execute_BATTERY_CHARGE_LOCATION;
}
if ((actionFun == ActionOrFun._ROBOT_START_STATE)) {
trace("<FunctionLog> Machine Prop_6-{0} executing Function ROBOT_START_STATE\n", myHandle.instance);
locals = null;
myHandle.cont.PushReturnTo(0, locals, myHandle.currentEvent, myHandle.currentArg);
goto execute_ROBOT_START_STATE;
}
if ((actionFun == ActionOrFun._SIZE_OF_GRID)) {
trace("<FunctionLog> Machine Prop_6-{0} executing Function SIZE_OF_GRID\n", myHandle.instance);
locals = null;
myHandle.cont.PushReturnTo(0, locals, myHandle.currentEvent, myHandle.currentArg);
goto execute_SIZE_OF_GRID;
}
if ((actionFun == ActionOrFun._ROBOT_SCAN_LOCATIONS)) {
trace("<FunctionLog> Machine Prop_6-{0} executing Function ROBOT_SCAN_LOCATIONS\n", myHandle.instance);
locals = new PRT_VALUE_ARRAY[3];
locals[2] = PRT_VALUE.PrtMkDefaultValue(Main.type_2_PRT_TYPE);
locals[1] = PRT_VALUE.PrtMkDefaultValue(Main.type_2_PRT_TYPE);
locals[0] = PRT_VALUE.PrtMkDefaultValue(Main.type_1_PRT_TYPE);
myHandle.cont.PushReturnTo(0, locals, myHandle.currentEvent, myHandle.currentArg);
goto execute_ROBOT_SCAN_LOCATIONS;
}
if ((actionFun == ActionOrFun._GetStaticGoals)) {
trace("<FunctionLog> Machine Prop_6-{0} executing Function GetStaticGoals\n", myHandle.instance);
locals = new PRT_VALUE_ARRAY[1];
locals[0] = PRT_VALUE.PrtMkDefaultValue(Main.type_7_PRT_TYPE);
myHandle.cont.PushReturnTo(0, locals, myHandle.currentEvent, myHandle.currentArg);
goto execute_GetStaticGoals;
}
if ((actionFun == ActionOrFun._GetStaticObstacles)) {
trace("<FunctionLog> Machine Prop_6-{0} executing Function GetStaticObstacles\n", myHandle.instance);
locals = new PRT_VALUE_ARRAY[1];
locals[0] = PRT_VALUE.PrtMkDefaultValue(Main.type_2_PRT_TYPE);
myHandle.cont.PushReturnTo(0, locals, myHandle.currentEvent, myHandle.currentArg);
goto execute_GetStaticObstacles;
}
if ((actionFun == ActionOrFun._Prop_6_ignore)) {
trace("<FunctionLog> Machine Prop_6-{0} executing Function ignore\n", myHandle.instance);
locals = null;
myHandle.cont.PushReturnTo(0, locals, myHandle.currentEvent, myHandle.currentArg);
goto execute_ignore;
}
if ((actionFun == ActionOrFun._Prop_6_AnonFun0)) {
locals = null;
myHandle.cont.PushReturnTo(0, locals, myHandle.currentEvent, myHandle.currentArg);
goto execute_AnonFun0;
}
if ((actionFun == ActionOrFun._Prop_6_AnonFun1)) {
locals = null;
myHandle.cont.PushReturnTo(0, locals, myHandle.currentEvent, myHandle.currentArg);
goto execute_AnonFun1;
}
if ((actionFun == ActionOrFun._Prop_6_AnonFun2)) {
locals = null;
myHandle.cont.PushReturnTo(0, locals, myHandle.currentEvent, myHandle.currentArg);
goto execute_AnonFun2;
}
if ((actionFun == ActionOrFun._Prop_6_AnonFun3)) {
locals = null;
myHandle.cont.PushReturnTo(0, locals, myHandle.currentEvent, myHandle.currentArg);
goto execute_AnonFun3;
}
if ((actionFun == ActionOrFun._Prop_6_AnonFun4)) {
locals = null;
myHandle.cont.PushReturnTo(0, locals, myHandle.currentEvent, myHandle.currentArg);
goto execute_AnonFun4;
}
assert(false, "Internal error");

;


execute_ResetObstacle:
while (!doPop) {
Main.ResetObstacle(myHandle, myHandle.cont);
doPop = ProcessContinuation();

}
return;

;


execute_Seal:
while (!doPop) {
Main.Seal(myHandle, myHandle.cont);
doPop = ProcessContinuation();

}
return;

;


execute_Unseal:
while (!doPop) {
Main.Unseal(myHandle, myHandle.cont);
doPop = ProcessContinuation();

}
return;

;


execute_InitializeMotionPlanning:
while (!doPop) {
Main.InitializeMotionPlanning(myHandle, myHandle.cont);
doPop = ProcessContinuation();

}
return;

;


execute_CAT_CAGE_LOC:
while (!doPop) {
Main.CAT_CAGE_LOC(myHandle, myHandle.cont);
doPop = ProcessContinuation();

}
return;

;


execute_DOG_CAGE_LOC:
while (!doPop) {
Main.DOG_CAGE_LOC(myHandle, myHandle.cont);
doPop = ProcessContinuation();

}
return;

;


execute_MICE_CAGE_LOC:
while (!doPop) {
Main.MICE_CAGE_LOC(myHandle, myHandle.cont);
doPop = ProcessContinuation();

}
return;

;


execute_BATTERY_THRESHOLD:
while (!doPop) {
Main.BATTERY_THRESHOLD(myHandle, myHandle.cont);
doPop = ProcessContinuation();

}
return;

;


execute_DOG:
while (!doPop) {
Main.DOG(myHandle, myHandle.cont);
doPop = ProcessContinuation();

}
return;

;


execute_CAT:
while (!doPop) {
Main.CAT(myHandle, myHandle.cont);
doPop = ProcessContinuation();

}
return;

;


execute_MICE:
while (!doPop) {
Main.MICE(myHandle, myHandle.cont);
doPop = ProcessContinuation();

}
return;

;


execute_BATTERY_CHARGE_LOCATION:
while (!doPop) {
Main.BATTERY_CHARGE_LOCATION(myHandle, myHandle.cont);
doPop = ProcessContinuation();

}
return;

;


execute_ROBOT_START_STATE:
while (!doPop) {
Main.ROBOT_START_STATE(myHandle, myHandle.cont);
doPop = ProcessContinuation();

}
return;

;


execute_SIZE_OF_GRID:
while (!doPop) {
Main.SIZE_OF_GRID(myHandle, myHandle.cont);
doPop = ProcessContinuation();

}
return;

;


execute_ROBOT_SCAN_LOCATIONS:
while (!doPop) {
Main.ROBOT_SCAN_LOCATIONS(myHandle, myHandle.cont);
doPop = ProcessContinuation();

}
return;

;


execute_GetStaticGoals:
while (!doPop) {
Main.GetStaticGoals(myHandle, myHandle.cont);
doPop = ProcessContinuation();

}
return;

;


execute_GetStaticObstacles:
while (!doPop) {
Main.GetStaticObstacles(myHandle, myHandle.cont);
doPop = ProcessContinuation();

}
return;

;


execute_ignore:
while (!doPop) {
ignore(myHandle.cont);
doPop = ProcessContinuation();

}
return;

;


execute_AnonFun0:
while (!doPop) {
AnonFun0(myHandle.cont);
doPop = ProcessContinuation();

}
return;

;


execute_AnonFun1:
while (!doPop) {
AnonFun1(myHandle.cont);
doPop = ProcessContinuation();

}
return;

;


execute_AnonFun2:
while (!doPop) {
AnonFun2(myHandle.cont);
doPop = ProcessContinuation();

}
return;

;


execute_AnonFun3:
while (!doPop) {
AnonFun3(myHandle.cont);
doPop = ProcessContinuation();

}
return;

;


execute_AnonFun4:
while (!doPop) {
AnonFun4(myHandle.cont);
doPop = ProcessContinuation();

}
return;

;

}
void ignore(Continuation entryCtxt) {
PRT_VALUE_ARRAY locals;
SM_EVENT currentEvent;
PRT_VALUE currentArg;
StackFrame retTo_72;

dummy:
retTo_72 = entryCtxt.PopReturnTo();
locals = retTo_72.locals;
currentEvent = retTo_72.currentEvent;
currentArg = retTo_72.currentArg;
if ((retTo_72.pc == 0)) {
goto start;
}
assert(false, "Internal error");

start:

;
entryCtxt.Return();
return;

;

}
void AnonFun0(Continuation entryCtxt) {
PRT_VALUE_ARRAY locals;
SM_EVENT currentEvent;
PRT_VALUE currentArg;
StackFrame retTo_73;

dummy:
retTo_73 = entryCtxt.PopReturnTo();
locals = retTo_73.locals;
currentEvent = retTo_73.currentEvent;
currentArg = retTo_73.currentArg;
if ((retTo_73.pc == 0)) {
goto start;
}
assert(false, "Internal error");

start:

;
entryCtxt.Return();
return;

;

}
void AnonFun1(Continuation entryCtxt) {
PRT_VALUE_ARRAY locals;
SM_EVENT currentEvent;
PRT_VALUE currentArg;
PRT_VALUE tmp_123;
PRT_VALUE tmp_124;
PRT_VALUE tmpPayload_41;
StackFrame retTo_74;

dummy:
retTo_74 = entryCtxt.PopReturnTo();
locals = retTo_74.locals;
currentEvent = retTo_74.currentEvent;
currentArg = retTo_74.currentArg;
if ((retTo_74.pc == 0)) {
goto start;
}
assert(false, "Internal error");

start:
tmp_123 = PRT_VALUE.PrtMkDefaultValue(Main.type_5_PRT_TYPE);
PRT_VALUE.PrtPrimSetBool(tmp_123, false);
hCat = PRT_VALUE.PrtCloneValue(tmp_123);
tmp_124 = PRT_VALUE.PrtMkDefaultValue(Main.type_12_PRT_TYPE);
PRT_VALUE.PrtPrimSetEvent(tmp_124, Main.local_SM_EVENT);
tmpPayload_41 = PRT_VALUE.PrtMkDefaultValue(Main.type_0_PRT_TYPE);
assert((tmp_124.ev != null), "(79, 4): Raised event must be non-null");
trace("<RaiseLog> Machine Prop_6-{0} raised Event {1}\n", myHandle.instance, tmp_124.ev.name);
myHandle.currentEvent = tmp_124.ev;
myHandle.currentArg = tmpPayload_41;
entryCtxt.Raise();
return;

;
entryCtxt.Return();
return;

;

}
void AnonFun2(Continuation entryCtxt) {
PRT_VALUE_ARRAY locals;
SM_EVENT currentEvent;
PRT_VALUE currentArg;
PRT_VALUE tmpVar_94;
PRT_VALUE tmp_125;
PRT_VALUE tmpPayload_42;
StackFrame retTo_75;

dummy:
retTo_75 = entryCtxt.PopReturnTo();
locals = retTo_75.locals;
currentEvent = retTo_75.currentEvent;
currentArg = retTo_75.currentArg;
if ((retTo_75.pc == 0)) {
goto start;
}
assert(false, "Internal error");

start:
tmpVar_94 = PRT_VALUE.PrtMkDefaultValue(Main.type_5_PRT_TYPE);
PRT_VALUE.PrtPrimSetBool(tmpVar_94, !hCat.bl);
if (!tmpVar_94.bl) {
goto AnonFun2_if_1_else;
}
tmp_125 = PRT_VALUE.PrtMkDefaultValue(Main.type_12_PRT_TYPE);
PRT_VALUE.PrtPrimSetEvent(tmp_125, Main.local_SM_EVENT);
tmpPayload_42 = PRT_VALUE.PrtMkDefaultValue(Main.type_0_PRT_TYPE);
assert((tmp_125.ev != null), "(85, 27): Raised event must be non-null");
trace("<RaiseLog> Machine Prop_6-{0} raised Event {1}\n", myHandle.instance, tmp_125.ev.name);
myHandle.currentEvent = tmp_125.ev;
myHandle.currentArg = tmpPayload_42;
entryCtxt.Raise();
return;
goto AnonFun2_if_1_end;
AnonFun2_if_1_else:

;

AnonFun2_if_1_end:

;

;
entryCtxt.Return();
return;

;

}
void AnonFun3(Continuation entryCtxt) {
PRT_VALUE_ARRAY locals;
SM_EVENT currentEvent;
PRT_VALUE currentArg;
PRT_VALUE tmp_126;
StackFrame retTo_76;

dummy:
retTo_76 = entryCtxt.PopReturnTo();
locals = retTo_76.locals;
currentEvent = retTo_76.currentEvent;
currentArg = retTo_76.currentArg;
if ((retTo_76.pc == 0)) {
goto start;
}
assert(false, "Internal error");

start:
tmp_126 = PRT_VALUE.PrtMkDefaultValue(Main.type_5_PRT_TYPE);
PRT_VALUE.PrtPrimSetBool(tmp_126, true);
hCat = PRT_VALUE.PrtCloneValue(tmp_126);

;
entryCtxt.Return();
return;

;

}
void AnonFun4(Continuation entryCtxt) {
PRT_VALUE_ARRAY locals;
SM_EVENT currentEvent;
PRT_VALUE currentArg;
PRT_VALUE tmp_127;
StackFrame retTo_77;

dummy:
retTo_77 = entryCtxt.PopReturnTo();
locals = retTo_77.locals;
currentEvent = retTo_77.currentEvent;
currentArg = retTo_77.currentArg;
if ((retTo_77.pc == 0)) {
goto start;
}
assert(false, "Internal error");

start:
tmp_127 = PRT_VALUE.PrtMkDefaultValue(Main.type_5_PRT_TYPE);
PRT_VALUE.PrtPrimSetBool(tmp_127, false);
hCat = PRT_VALUE.PrtCloneValue(tmp_127);

;
entryCtxt.Return();
return;

;

}
};

class MACHINE_Prop_7{
SM_HANDLE myHandle;
void Prop_7_Init_CalculateDeferredAndActionSet() {

dummy:
myHandle.stack.deferredSet = new SM_EVENT_SET;
myHandle.stack.actionSet = new SM_EVENT_SET;
myHandle.stack.AddStackDeferredSet(myHandle.stack.deferredSet);
myHandle.stack.deferredSet = (myHandle.stack.deferredSet - Main.local_SM_EVENT);
myHandle.stack.AddStackActionSet(myHandle.stack.actionSet);
myHandle.stack.actionSet = (myHandle.stack.actionSet - Main.local_SM_EVENT);
myHandle.stack.es = new SM_EVENT_ARRAY[0];
myHandle.stack.as = new ActionOrFun_ARRAY[0];

;

}
void Prop_7_Wait_CalculateDeferredAndActionSet() {

dummy:
myHandle.stack.deferredSet = new SM_EVENT_SET;
myHandle.stack.actionSet = new SM_EVENT_SET;
myHandle.stack.AddStackDeferredSet(myHandle.stack.deferredSet);
myHandle.stack.deferredSet = (myHandle.stack.deferredSet - Main.M_sDog_SM_EVENT);
myHandle.stack.deferredSet = (myHandle.stack.deferredSet - Main.M_sCat_SM_EVENT);
myHandle.stack.AddStackActionSet(myHandle.stack.actionSet);
myHandle.stack.actionSet = (myHandle.stack.actionSet - Main.M_sDog_SM_EVENT);
myHandle.stack.actionSet = (myHandle.stack.actionSet - Main.M_sCat_SM_EVENT);
myHandle.stack.es = new SM_EVENT_ARRAY[0];
myHandle.stack.as = new ActionOrFun_ARRAY[0];

;

}
void Prop_7_WaitHDog_CalculateDeferredAndActionSet() {

dummy:
myHandle.stack.deferredSet = new SM_EVENT_SET;
myHandle.stack.actionSet = new SM_EVENT_SET;
myHandle.stack.AddStackDeferredSet(myHandle.stack.deferredSet);
myHandle.stack.deferredSet = (myHandle.stack.deferredSet - Main.M_sCat_SM_EVENT);
myHandle.stack.deferredSet = (myHandle.stack.deferredSet - Main.M_hDog_SM_EVENT);
myHandle.stack.AddStackActionSet(myHandle.stack.actionSet);
myHandle.stack.actionSet = (myHandle.stack.actionSet + Main.M_sCat_SM_EVENT);
myHandle.stack.actionSet = (myHandle.stack.actionSet - Main.M_hDog_SM_EVENT);
myHandle.stack.es = new SM_EVENT_ARRAY[1];
myHandle.stack.as = new ActionOrFun_ARRAY[1];
myHandle.stack.es[0] = Main.M_sCat_SM_EVENT;
myHandle.stack.as[0] = ActionOrFun._Prop_7_ignore;

;

}
void Prop_7_WaitHCat_CalculateDeferredAndActionSet() {

dummy:
myHandle.stack.deferredSet = new SM_EVENT_SET;
myHandle.stack.actionSet = new SM_EVENT_SET;
myHandle.stack.AddStackDeferredSet(myHandle.stack.deferredSet);
myHandle.stack.deferredSet = (myHandle.stack.deferredSet - Main.M_hCat_SM_EVENT);
myHandle.stack.deferredSet = (myHandle.stack.deferredSet - Main.M_sDog_SM_EVENT);
myHandle.stack.AddStackActionSet(myHandle.stack.actionSet);
myHandle.stack.actionSet = (myHandle.stack.actionSet - Main.M_hCat_SM_EVENT);
myHandle.stack.actionSet = (myHandle.stack.actionSet - Main.M_sDog_SM_EVENT);
myHandle.stack.es = new SM_EVENT_ARRAY[0];
myHandle.stack.as = new ActionOrFun_ARRAY[0];

;

}
void Start() {

dummy:
Run(Main.Prop_7_Init_SM_STATE);
if ((myHandle.currentEvent == Main.halt_SM_EVENT)) {
myHandle.stack = null;
myHandle.buffer = null;
myHandle.currentArg = null;
SM_HANDLE.halted = (SM_HANDLE.halted + myHandle);
SM_HANDLE.enabled = (SM_HANDLE.enabled - myHandle);
return;

}
trace("<StateLog> Unhandled event exception by machine Prop_7-{0}\n", myHandle.instance);
assert(false, "Unhandled event exception by machine Prop_7");

;

}
void Run(SM_STATE state) {
bool doPop;
bool hasNullTransitionOrAction;

init:
myHandle.Push();
myHandle.stack.state = state;
doPop = RunHelper(true);
while (!doPop) {
hasNullTransitionOrAction = myHandle.stack.HasNullTransitionOrAction();
myHandle.DequeueEvent(hasNullTransitionOrAction);
doPop = RunHelper(false);

}
myHandle.Pop();

;

}
void TraceEnterState(SM_STATE state) {

init:
if ((state == Main.Prop_7_Init_SM_STATE)) {
trace("<StateLog> Machine Prop_7-{0} entering State Init\n", myHandle.instance);
return;

}
if ((state == Main.Prop_7_Wait_SM_STATE)) {
trace("<StateLog> Machine Prop_7-{0} entering State Wait\n", myHandle.instance);
return;

}
if ((state == Main.Prop_7_WaitHDog_SM_STATE)) {
trace("<StateLog> Machine Prop_7-{0} entering State WaitHDog\n", myHandle.instance);
return;

}
if ((state == Main.Prop_7_WaitHCat_SM_STATE)) {
trace("<StateLog> Machine Prop_7-{0} entering State WaitHCat\n", myHandle.instance);
return;

}
assert(false, "Internal error");

;

}
void TraceExitState(SM_STATE state) {

init:
if ((state == Main.Prop_7_Init_SM_STATE)) {
trace("<StateLog> Machine Prop_7-{0} exiting State Init\n", myHandle.instance);
return;

}
if ((state == Main.Prop_7_Wait_SM_STATE)) {
trace("<StateLog> Machine Prop_7-{0} exiting State Wait\n", myHandle.instance);
return;

}
if ((state == Main.Prop_7_WaitHDog_SM_STATE)) {
trace("<StateLog> Machine Prop_7-{0} exiting State WaitHDog\n", myHandle.instance);
return;

}
if ((state == Main.Prop_7_WaitHCat_SM_STATE)) {
trace("<StateLog> Machine Prop_7-{0} exiting State WaitHCat\n", myHandle.instance);
return;

}
assert(false, "Internal error");

;

}
void CalculateDeferredAndActionSet(SM_STATE state) {

init:
if ((state == Main.Prop_7_Init_SM_STATE)) {
Prop_7_Init_CalculateDeferredAndActionSet();
return;

}
if ((state == Main.Prop_7_Wait_SM_STATE)) {
Prop_7_Wait_CalculateDeferredAndActionSet();
return;

}
if ((state == Main.Prop_7_WaitHDog_SM_STATE)) {
Prop_7_WaitHDog_CalculateDeferredAndActionSet();
return;

}
if ((state == Main.Prop_7_WaitHCat_SM_STATE)) {
Prop_7_WaitHCat_CalculateDeferredAndActionSet();
return;

}
assert(false, "Internal error");

;

}
bool RunHelper(bool start) {
SM_STATE state;
SM_TRANSITION transition;
ActionOrFun actionFun;

init:
state = myHandle.stack.state;
if (start) {
goto enter;
} else {
goto handle;
}

;


enter:
state = myHandle.stack.state;
TraceEnterState(state);
if ((state.temperature == StateTemperature.Hot)) {
SM_HANDLE.hot = (SM_HANDLE.hot + myHandle);

} else {
SM_HANDLE.hot = (SM_HANDLE.hot - myHandle);

}
CalculateDeferredAndActionSet(state);
actionFun = state.entryFun;

;


execute:
ReentrancyHelper(actionFun);
if ((myHandle.cont.reason == ContinuationReason.Raise)) {
goto handle;
}
myHandle.currentEvent = null;
myHandle.currentArg = PRT_VALUE.PrtMkDefaultValue(Main.type_0_PRT_TYPE);
if ((myHandle.cont.reason != ContinuationReason.Pop)) {
return false;

}
TraceExitState(state);
ReentrancyHelper(state.exitFun);
return true;

;


handle:
if ((myHandle.currentEvent in myHandle.stack.actionSet)) {
actionFun = myHandle.stack.Find(myHandle.currentEvent);
goto execute;
}
transition = state.FindPushTransition(myHandle.currentEvent);
if ((transition != null)) {
Run(transition.to);
if ((myHandle.currentEvent == null)) {
return false;

} else {
goto handle;
}

}
TraceExitState(state);
ReentrancyHelper(state.exitFun);
transition = state.FindTransition(myHandle.currentEvent);
if ((transition == null)) {
return true;

}
ReentrancyHelper(transition.fun);
myHandle.stack.state = transition.to;
state = myHandle.stack.state;
goto enter;
;

}
bool ProcessContinuation() {
bool doPop;

init:
if ((myHandle.cont.reason == ContinuationReason.Return)) {
return true;

}
if ((myHandle.cont.reason == ContinuationReason.Pop)) {
return true;

}
if ((myHandle.cont.reason == ContinuationReason.Raise)) {
return true;

}
if ((myHandle.cont.reason == ContinuationReason.Receive)) {
myHandle.DequeueEvent(false);
return false;

}
if ((myHandle.cont.reason == ContinuationReason.Nondet)) {
myHandle.cont.nondet = choose(bool);
return false;

}
if ((myHandle.cont.reason == ContinuationReason.NewMachine)) {
yield;
return false;

}
if ((myHandle.cont.reason == ContinuationReason.Send)) {
yield;
return false;

}

;

}
void ReentrancyHelper(ActionOrFun actionFun) {
PRT_VALUE_ARRAY locals;
bool doPop;

init:
doPop = false;
myHandle.cont.Reset();
if ((actionFun == ActionOrFun._ResetObstacle)) {
trace("<FunctionLog> Machine Prop_7-{0} executing Function ResetObstacle\n", myHandle.instance);
locals = null;
myHandle.cont.PushReturnTo(0, locals, myHandle.currentEvent, myHandle.currentArg);
goto execute_ResetObstacle;
}
if ((actionFun == ActionOrFun._Seal)) {
trace("<FunctionLog> Machine Prop_7-{0} executing Function Seal\n", myHandle.instance);
locals = null;
myHandle.cont.PushReturnTo(0, locals, myHandle.currentEvent, myHandle.currentArg);
goto execute_Seal;
}
if ((actionFun == ActionOrFun._Unseal)) {
trace("<FunctionLog> Machine Prop_7-{0} executing Function Unseal\n", myHandle.instance);
locals = null;
myHandle.cont.PushReturnTo(0, locals, myHandle.currentEvent, myHandle.currentArg);
goto execute_Unseal;
}
if ((actionFun == ActionOrFun._InitializeMotionPlanning)) {
trace("<FunctionLog> Machine Prop_7-{0} executing Function InitializeMotionPlanning\n", myHandle.instance);
locals = new PRT_VALUE_ARRAY[4];
locals[3] = PRT_VALUE.PrtMkDefaultValue(Main.type_1_PRT_TYPE);
locals[2] = PRT_VALUE.PrtMkDefaultValue(Main.type_2_PRT_TYPE);
locals[1] = PRT_VALUE.PrtMkDefaultValue(Main.type_2_PRT_TYPE);
locals[0] = PRT_VALUE.PrtMkDefaultValue(Main.type_4_PRT_TYPE);
myHandle.cont.PushReturnTo(0, locals, myHandle.currentEvent, myHandle.currentArg);
goto execute_InitializeMotionPlanning;
}
if ((actionFun == ActionOrFun._CAT_CAGE_LOC)) {
trace("<FunctionLog> Machine Prop_7-{0} executing Function CAT_CAGE_LOC\n", myHandle.instance);
locals = null;
myHandle.cont.PushReturnTo(0, locals, myHandle.currentEvent, myHandle.currentArg);
goto execute_CAT_CAGE_LOC;
}
if ((actionFun == ActionOrFun._DOG_CAGE_LOC)) {
trace("<FunctionLog> Machine Prop_7-{0} executing Function DOG_CAGE_LOC\n", myHandle.instance);
locals = null;
myHandle.cont.PushReturnTo(0, locals, myHandle.currentEvent, myHandle.currentArg);
goto execute_DOG_CAGE_LOC;
}
if ((actionFun == ActionOrFun._MICE_CAGE_LOC)) {
trace("<FunctionLog> Machine Prop_7-{0} executing Function MICE_CAGE_LOC\n", myHandle.instance);
locals = null;
myHandle.cont.PushReturnTo(0, locals, myHandle.currentEvent, myHandle.currentArg);
goto execute_MICE_CAGE_LOC;
}
if ((actionFun == ActionOrFun._BATTERY_THRESHOLD)) {
trace("<FunctionLog> Machine Prop_7-{0} executing Function BATTERY_THRESHOLD\n", myHandle.instance);
locals = null;
myHandle.cont.PushReturnTo(0, locals, myHandle.currentEvent, myHandle.currentArg);
goto execute_BATTERY_THRESHOLD;
}
if ((actionFun == ActionOrFun._DOG)) {
trace("<FunctionLog> Machine Prop_7-{0} executing Function DOG\n", myHandle.instance);
locals = null;
myHandle.cont.PushReturnTo(0, locals, myHandle.currentEvent, myHandle.currentArg);
goto execute_DOG;
}
if ((actionFun == ActionOrFun._CAT)) {
trace("<FunctionLog> Machine Prop_7-{0} executing Function CAT\n", myHandle.instance);
locals = null;
myHandle.cont.PushReturnTo(0, locals, myHandle.currentEvent, myHandle.currentArg);
goto execute_CAT;
}
if ((actionFun == ActionOrFun._MICE)) {
trace("<FunctionLog> Machine Prop_7-{0} executing Function MICE\n", myHandle.instance);
locals = null;
myHandle.cont.PushReturnTo(0, locals, myHandle.currentEvent, myHandle.currentArg);
goto execute_MICE;
}
if ((actionFun == ActionOrFun._BATTERY_CHARGE_LOCATION)) {
trace("<FunctionLog> Machine Prop_7-{0} executing Function BATTERY_CHARGE_LOCATION\n", myHandle.instance);
locals = null;
myHandle.cont.PushReturnTo(0, locals, myHandle.currentEvent, myHandle.currentArg);
goto execute_BATTERY_CHARGE_LOCATION;
}
if ((actionFun == ActionOrFun._ROBOT_START_STATE)) {
trace("<FunctionLog> Machine Prop_7-{0} executing Function ROBOT_START_STATE\n", myHandle.instance);
locals = null;
myHandle.cont.PushReturnTo(0, locals, myHandle.currentEvent, myHandle.currentArg);
goto execute_ROBOT_START_STATE;
}
if ((actionFun == ActionOrFun._SIZE_OF_GRID)) {
trace("<FunctionLog> Machine Prop_7-{0} executing Function SIZE_OF_GRID\n", myHandle.instance);
locals = null;
myHandle.cont.PushReturnTo(0, locals, myHandle.currentEvent, myHandle.currentArg);
goto execute_SIZE_OF_GRID;
}
if ((actionFun == ActionOrFun._ROBOT_SCAN_LOCATIONS)) {
trace("<FunctionLog> Machine Prop_7-{0} executing Function ROBOT_SCAN_LOCATIONS\n", myHandle.instance);
locals = new PRT_VALUE_ARRAY[3];
locals[2] = PRT_VALUE.PrtMkDefaultValue(Main.type_2_PRT_TYPE);
locals[1] = PRT_VALUE.PrtMkDefaultValue(Main.type_2_PRT_TYPE);
locals[0] = PRT_VALUE.PrtMkDefaultValue(Main.type_1_PRT_TYPE);
myHandle.cont.PushReturnTo(0, locals, myHandle.currentEvent, myHandle.currentArg);
goto execute_ROBOT_SCAN_LOCATIONS;
}
if ((actionFun == ActionOrFun._GetStaticGoals)) {
trace("<FunctionLog> Machine Prop_7-{0} executing Function GetStaticGoals\n", myHandle.instance);
locals = new PRT_VALUE_ARRAY[1];
locals[0] = PRT_VALUE.PrtMkDefaultValue(Main.type_7_PRT_TYPE);
myHandle.cont.PushReturnTo(0, locals, myHandle.currentEvent, myHandle.currentArg);
goto execute_GetStaticGoals;
}
if ((actionFun == ActionOrFun._GetStaticObstacles)) {
trace("<FunctionLog> Machine Prop_7-{0} executing Function GetStaticObstacles\n", myHandle.instance);
locals = new PRT_VALUE_ARRAY[1];
locals[0] = PRT_VALUE.PrtMkDefaultValue(Main.type_2_PRT_TYPE);
myHandle.cont.PushReturnTo(0, locals, myHandle.currentEvent, myHandle.currentArg);
goto execute_GetStaticObstacles;
}
if ((actionFun == ActionOrFun._Prop_7_ignore)) {
trace("<FunctionLog> Machine Prop_7-{0} executing Function ignore\n", myHandle.instance);
locals = null;
myHandle.cont.PushReturnTo(0, locals, myHandle.currentEvent, myHandle.currentArg);
goto execute_ignore;
}
if ((actionFun == ActionOrFun._Prop_7_AnonFun0)) {
locals = null;
myHandle.cont.PushReturnTo(0, locals, myHandle.currentEvent, myHandle.currentArg);
goto execute_AnonFun0;
}
if ((actionFun == ActionOrFun._Prop_7_AnonFun1)) {
locals = null;
myHandle.cont.PushReturnTo(0, locals, myHandle.currentEvent, myHandle.currentArg);
goto execute_AnonFun1;
}
assert(false, "Internal error");

;


execute_ResetObstacle:
while (!doPop) {
Main.ResetObstacle(myHandle, myHandle.cont);
doPop = ProcessContinuation();

}
return;

;


execute_Seal:
while (!doPop) {
Main.Seal(myHandle, myHandle.cont);
doPop = ProcessContinuation();

}
return;

;


execute_Unseal:
while (!doPop) {
Main.Unseal(myHandle, myHandle.cont);
doPop = ProcessContinuation();

}
return;

;


execute_InitializeMotionPlanning:
while (!doPop) {
Main.InitializeMotionPlanning(myHandle, myHandle.cont);
doPop = ProcessContinuation();

}
return;

;


execute_CAT_CAGE_LOC:
while (!doPop) {
Main.CAT_CAGE_LOC(myHandle, myHandle.cont);
doPop = ProcessContinuation();

}
return;

;


execute_DOG_CAGE_LOC:
while (!doPop) {
Main.DOG_CAGE_LOC(myHandle, myHandle.cont);
doPop = ProcessContinuation();

}
return;

;


execute_MICE_CAGE_LOC:
while (!doPop) {
Main.MICE_CAGE_LOC(myHandle, myHandle.cont);
doPop = ProcessContinuation();

}
return;

;


execute_BATTERY_THRESHOLD:
while (!doPop) {
Main.BATTERY_THRESHOLD(myHandle, myHandle.cont);
doPop = ProcessContinuation();

}
return;

;


execute_DOG:
while (!doPop) {
Main.DOG(myHandle, myHandle.cont);
doPop = ProcessContinuation();

}
return;

;


execute_CAT:
while (!doPop) {
Main.CAT(myHandle, myHandle.cont);
doPop = ProcessContinuation();

}
return;

;


execute_MICE:
while (!doPop) {
Main.MICE(myHandle, myHandle.cont);
doPop = ProcessContinuation();

}
return;

;


execute_BATTERY_CHARGE_LOCATION:
while (!doPop) {
Main.BATTERY_CHARGE_LOCATION(myHandle, myHandle.cont);
doPop = ProcessContinuation();

}
return;

;


execute_ROBOT_START_STATE:
while (!doPop) {
Main.ROBOT_START_STATE(myHandle, myHandle.cont);
doPop = ProcessContinuation();

}
return;

;


execute_SIZE_OF_GRID:
while (!doPop) {
Main.SIZE_OF_GRID(myHandle, myHandle.cont);
doPop = ProcessContinuation();

}
return;

;


execute_ROBOT_SCAN_LOCATIONS:
while (!doPop) {
Main.ROBOT_SCAN_LOCATIONS(myHandle, myHandle.cont);
doPop = ProcessContinuation();

}
return;

;


execute_GetStaticGoals:
while (!doPop) {
Main.GetStaticGoals(myHandle, myHandle.cont);
doPop = ProcessContinuation();

}
return;

;


execute_GetStaticObstacles:
while (!doPop) {
Main.GetStaticObstacles(myHandle, myHandle.cont);
doPop = ProcessContinuation();

}
return;

;


execute_ignore:
while (!doPop) {
ignore(myHandle.cont);
doPop = ProcessContinuation();

}
return;

;


execute_AnonFun0:
while (!doPop) {
AnonFun0(myHandle.cont);
doPop = ProcessContinuation();

}
return;

;


execute_AnonFun1:
while (!doPop) {
AnonFun1(myHandle.cont);
doPop = ProcessContinuation();

}
return;

;

}
void ignore(Continuation entryCtxt) {
PRT_VALUE_ARRAY locals;
SM_EVENT currentEvent;
PRT_VALUE currentArg;
StackFrame retTo_78;

dummy:
retTo_78 = entryCtxt.PopReturnTo();
locals = retTo_78.locals;
currentEvent = retTo_78.currentEvent;
currentArg = retTo_78.currentArg;
if ((retTo_78.pc == 0)) {
goto start;
}
assert(false, "Internal error");

start:

;
entryCtxt.Return();
return;

;

}
void AnonFun0(Continuation entryCtxt) {
PRT_VALUE_ARRAY locals;
SM_EVENT currentEvent;
PRT_VALUE currentArg;
StackFrame retTo_79;

dummy:
retTo_79 = entryCtxt.PopReturnTo();
locals = retTo_79.locals;
currentEvent = retTo_79.currentEvent;
currentArg = retTo_79.currentArg;
if ((retTo_79.pc == 0)) {
goto start;
}
assert(false, "Internal error");

start:

;
entryCtxt.Return();
return;

;

}
void AnonFun1(Continuation entryCtxt) {
PRT_VALUE_ARRAY locals;
SM_EVENT currentEvent;
PRT_VALUE currentArg;
PRT_VALUE tmp_128;
PRT_VALUE tmpPayload_43;
StackFrame retTo_80;

dummy:
retTo_80 = entryCtxt.PopReturnTo();
locals = retTo_80.locals;
currentEvent = retTo_80.currentEvent;
currentArg = retTo_80.currentArg;
if ((retTo_80.pc == 0)) {
goto start;
}
assert(false, "Internal error");

start:
tmp_128 = PRT_VALUE.PrtMkDefaultValue(Main.type_12_PRT_TYPE);
PRT_VALUE.PrtPrimSetEvent(tmp_128, Main.local_SM_EVENT);
tmpPayload_43 = PRT_VALUE.PrtMkDefaultValue(Main.type_0_PRT_TYPE);
assert((tmp_128.ev != null), "(100, 4): Raised event must be non-null");
trace("<RaiseLog> Machine Prop_7-{0} raised Event {1}\n", myHandle.instance, tmp_128.ev.name);
myHandle.currentEvent = tmp_128.ev;
myHandle.currentArg = tmpPayload_43;
entryCtxt.Raise();
return;

;
entryCtxt.Return();
return;

;

}
};

class MACHINE_Prop_8{
SM_HANDLE myHandle;
void Prop_8_Init_CalculateDeferredAndActionSet() {

dummy:
myHandle.stack.deferredSet = new SM_EVENT_SET;
myHandle.stack.actionSet = new SM_EVENT_SET;
myHandle.stack.AddStackDeferredSet(myHandle.stack.deferredSet);
myHandle.stack.deferredSet = (myHandle.stack.deferredSet - Main.local_SM_EVENT);
myHandle.stack.AddStackActionSet(myHandle.stack.actionSet);
myHandle.stack.actionSet = (myHandle.stack.actionSet - Main.local_SM_EVENT);
myHandle.stack.es = new SM_EVENT_ARRAY[0];
myHandle.stack.as = new ActionOrFun_ARRAY[0];

;

}
void Prop_8_Wait_CalculateDeferredAndActionSet() {

dummy:
myHandle.stack.deferredSet = new SM_EVENT_SET;
myHandle.stack.actionSet = new SM_EVENT_SET;
myHandle.stack.AddStackDeferredSet(myHandle.stack.deferredSet);
myHandle.stack.deferredSet = (myHandle.stack.deferredSet - Main.M_sCat_SM_EVENT);
myHandle.stack.deferredSet = (myHandle.stack.deferredSet - Main.M_sMice_SM_EVENT);
myHandle.stack.AddStackActionSet(myHandle.stack.actionSet);
myHandle.stack.actionSet = (myHandle.stack.actionSet - Main.M_sCat_SM_EVENT);
myHandle.stack.actionSet = (myHandle.stack.actionSet - Main.M_sMice_SM_EVENT);
myHandle.stack.es = new SM_EVENT_ARRAY[0];
myHandle.stack.as = new ActionOrFun_ARRAY[0];

;

}
void Prop_8_WaitHCat_CalculateDeferredAndActionSet() {

dummy:
myHandle.stack.deferredSet = new SM_EVENT_SET;
myHandle.stack.actionSet = new SM_EVENT_SET;
myHandle.stack.AddStackDeferredSet(myHandle.stack.deferredSet);
myHandle.stack.deferredSet = (myHandle.stack.deferredSet - Main.M_sMice_SM_EVENT);
myHandle.stack.deferredSet = (myHandle.stack.deferredSet - Main.M_hCat_SM_EVENT);
myHandle.stack.AddStackActionSet(myHandle.stack.actionSet);
myHandle.stack.actionSet = (myHandle.stack.actionSet + Main.M_sMice_SM_EVENT);
myHandle.stack.actionSet = (myHandle.stack.actionSet - Main.M_hCat_SM_EVENT);
myHandle.stack.es = new SM_EVENT_ARRAY[1];
myHandle.stack.as = new ActionOrFun_ARRAY[1];
myHandle.stack.es[0] = Main.M_sMice_SM_EVENT;
myHandle.stack.as[0] = ActionOrFun._Prop_8_ignore;

;

}
void Prop_8_WaitHMice_CalculateDeferredAndActionSet() {

dummy:
myHandle.stack.deferredSet = new SM_EVENT_SET;
myHandle.stack.actionSet = new SM_EVENT_SET;
myHandle.stack.AddStackDeferredSet(myHandle.stack.deferredSet);
myHandle.stack.deferredSet = (myHandle.stack.deferredSet - Main.M_hMice_SM_EVENT);
myHandle.stack.deferredSet = (myHandle.stack.deferredSet - Main.M_sCat_SM_EVENT);
myHandle.stack.AddStackActionSet(myHandle.stack.actionSet);
myHandle.stack.actionSet = (myHandle.stack.actionSet - Main.M_hMice_SM_EVENT);
myHandle.stack.actionSet = (myHandle.stack.actionSet - Main.M_sCat_SM_EVENT);
myHandle.stack.es = new SM_EVENT_ARRAY[0];
myHandle.stack.as = new ActionOrFun_ARRAY[0];

;

}
void Start() {

dummy:
Run(Main.Prop_8_Init_SM_STATE);
if ((myHandle.currentEvent == Main.halt_SM_EVENT)) {
myHandle.stack = null;
myHandle.buffer = null;
myHandle.currentArg = null;
SM_HANDLE.halted = (SM_HANDLE.halted + myHandle);
SM_HANDLE.enabled = (SM_HANDLE.enabled - myHandle);
return;

}
trace("<StateLog> Unhandled event exception by machine Prop_8-{0}\n", myHandle.instance);
assert(false, "Unhandled event exception by machine Prop_8");

;

}
void Run(SM_STATE state) {
bool doPop;
bool hasNullTransitionOrAction;

init:
myHandle.Push();
myHandle.stack.state = state;
doPop = RunHelper(true);
while (!doPop) {
hasNullTransitionOrAction = myHandle.stack.HasNullTransitionOrAction();
myHandle.DequeueEvent(hasNullTransitionOrAction);
doPop = RunHelper(false);

}
myHandle.Pop();

;

}
void TraceEnterState(SM_STATE state) {

init:
if ((state == Main.Prop_8_Init_SM_STATE)) {
trace("<StateLog> Machine Prop_8-{0} entering State Init\n", myHandle.instance);
return;

}
if ((state == Main.Prop_8_Wait_SM_STATE)) {
trace("<StateLog> Machine Prop_8-{0} entering State Wait\n", myHandle.instance);
return;

}
if ((state == Main.Prop_8_WaitHCat_SM_STATE)) {
trace("<StateLog> Machine Prop_8-{0} entering State WaitHCat\n", myHandle.instance);
return;

}
if ((state == Main.Prop_8_WaitHMice_SM_STATE)) {
trace("<StateLog> Machine Prop_8-{0} entering State WaitHMice\n", myHandle.instance);
return;

}
assert(false, "Internal error");

;

}
void TraceExitState(SM_STATE state) {

init:
if ((state == Main.Prop_8_Init_SM_STATE)) {
trace("<StateLog> Machine Prop_8-{0} exiting State Init\n", myHandle.instance);
return;

}
if ((state == Main.Prop_8_Wait_SM_STATE)) {
trace("<StateLog> Machine Prop_8-{0} exiting State Wait\n", myHandle.instance);
return;

}
if ((state == Main.Prop_8_WaitHCat_SM_STATE)) {
trace("<StateLog> Machine Prop_8-{0} exiting State WaitHCat\n", myHandle.instance);
return;

}
if ((state == Main.Prop_8_WaitHMice_SM_STATE)) {
trace("<StateLog> Machine Prop_8-{0} exiting State WaitHMice\n", myHandle.instance);
return;

}
assert(false, "Internal error");

;

}
void CalculateDeferredAndActionSet(SM_STATE state) {

init:
if ((state == Main.Prop_8_Init_SM_STATE)) {
Prop_8_Init_CalculateDeferredAndActionSet();
return;

}
if ((state == Main.Prop_8_Wait_SM_STATE)) {
Prop_8_Wait_CalculateDeferredAndActionSet();
return;

}
if ((state == Main.Prop_8_WaitHCat_SM_STATE)) {
Prop_8_WaitHCat_CalculateDeferredAndActionSet();
return;

}
if ((state == Main.Prop_8_WaitHMice_SM_STATE)) {
Prop_8_WaitHMice_CalculateDeferredAndActionSet();
return;

}
assert(false, "Internal error");

;

}
bool RunHelper(bool start) {
SM_STATE state;
SM_TRANSITION transition;
ActionOrFun actionFun;

init:
state = myHandle.stack.state;
if (start) {
goto enter;
} else {
goto handle;
}

;


enter:
state = myHandle.stack.state;
TraceEnterState(state);
if ((state.temperature == StateTemperature.Hot)) {
SM_HANDLE.hot = (SM_HANDLE.hot + myHandle);

} else {
SM_HANDLE.hot = (SM_HANDLE.hot - myHandle);

}
CalculateDeferredAndActionSet(state);
actionFun = state.entryFun;

;


execute:
ReentrancyHelper(actionFun);
if ((myHandle.cont.reason == ContinuationReason.Raise)) {
goto handle;
}
myHandle.currentEvent = null;
myHandle.currentArg = PRT_VALUE.PrtMkDefaultValue(Main.type_0_PRT_TYPE);
if ((myHandle.cont.reason != ContinuationReason.Pop)) {
return false;

}
TraceExitState(state);
ReentrancyHelper(state.exitFun);
return true;

;


handle:
if ((myHandle.currentEvent in myHandle.stack.actionSet)) {
actionFun = myHandle.stack.Find(myHandle.currentEvent);
goto execute;
}
transition = state.FindPushTransition(myHandle.currentEvent);
if ((transition != null)) {
Run(transition.to);
if ((myHandle.currentEvent == null)) {
return false;

} else {
goto handle;
}

}
TraceExitState(state);
ReentrancyHelper(state.exitFun);
transition = state.FindTransition(myHandle.currentEvent);
if ((transition == null)) {
return true;

}
ReentrancyHelper(transition.fun);
myHandle.stack.state = transition.to;
state = myHandle.stack.state;
goto enter;
;

}
bool ProcessContinuation() {
bool doPop;

init:
if ((myHandle.cont.reason == ContinuationReason.Return)) {
return true;

}
if ((myHandle.cont.reason == ContinuationReason.Pop)) {
return true;

}
if ((myHandle.cont.reason == ContinuationReason.Raise)) {
return true;

}
if ((myHandle.cont.reason == ContinuationReason.Receive)) {
myHandle.DequeueEvent(false);
return false;

}
if ((myHandle.cont.reason == ContinuationReason.Nondet)) {
myHandle.cont.nondet = choose(bool);
return false;

}
if ((myHandle.cont.reason == ContinuationReason.NewMachine)) {
yield;
return false;

}
if ((myHandle.cont.reason == ContinuationReason.Send)) {
yield;
return false;

}

;

}
void ReentrancyHelper(ActionOrFun actionFun) {
PRT_VALUE_ARRAY locals;
bool doPop;

init:
doPop = false;
myHandle.cont.Reset();
if ((actionFun == ActionOrFun._ResetObstacle)) {
trace("<FunctionLog> Machine Prop_8-{0} executing Function ResetObstacle\n", myHandle.instance);
locals = null;
myHandle.cont.PushReturnTo(0, locals, myHandle.currentEvent, myHandle.currentArg);
goto execute_ResetObstacle;
}
if ((actionFun == ActionOrFun._Seal)) {
trace("<FunctionLog> Machine Prop_8-{0} executing Function Seal\n", myHandle.instance);
locals = null;
myHandle.cont.PushReturnTo(0, locals, myHandle.currentEvent, myHandle.currentArg);
goto execute_Seal;
}
if ((actionFun == ActionOrFun._Unseal)) {
trace("<FunctionLog> Machine Prop_8-{0} executing Function Unseal\n", myHandle.instance);
locals = null;
myHandle.cont.PushReturnTo(0, locals, myHandle.currentEvent, myHandle.currentArg);
goto execute_Unseal;
}
if ((actionFun == ActionOrFun._InitializeMotionPlanning)) {
trace("<FunctionLog> Machine Prop_8-{0} executing Function InitializeMotionPlanning\n", myHandle.instance);
locals = new PRT_VALUE_ARRAY[4];
locals[3] = PRT_VALUE.PrtMkDefaultValue(Main.type_1_PRT_TYPE);
locals[2] = PRT_VALUE.PrtMkDefaultValue(Main.type_2_PRT_TYPE);
locals[1] = PRT_VALUE.PrtMkDefaultValue(Main.type_2_PRT_TYPE);
locals[0] = PRT_VALUE.PrtMkDefaultValue(Main.type_4_PRT_TYPE);
myHandle.cont.PushReturnTo(0, locals, myHandle.currentEvent, myHandle.currentArg);
goto execute_InitializeMotionPlanning;
}
if ((actionFun == ActionOrFun._CAT_CAGE_LOC)) {
trace("<FunctionLog> Machine Prop_8-{0} executing Function CAT_CAGE_LOC\n", myHandle.instance);
locals = null;
myHandle.cont.PushReturnTo(0, locals, myHandle.currentEvent, myHandle.currentArg);
goto execute_CAT_CAGE_LOC;
}
if ((actionFun == ActionOrFun._DOG_CAGE_LOC)) {
trace("<FunctionLog> Machine Prop_8-{0} executing Function DOG_CAGE_LOC\n", myHandle.instance);
locals = null;
myHandle.cont.PushReturnTo(0, locals, myHandle.currentEvent, myHandle.currentArg);
goto execute_DOG_CAGE_LOC;
}
if ((actionFun == ActionOrFun._MICE_CAGE_LOC)) {
trace("<FunctionLog> Machine Prop_8-{0} executing Function MICE_CAGE_LOC\n", myHandle.instance);
locals = null;
myHandle.cont.PushReturnTo(0, locals, myHandle.currentEvent, myHandle.currentArg);
goto execute_MICE_CAGE_LOC;
}
if ((actionFun == ActionOrFun._BATTERY_THRESHOLD)) {
trace("<FunctionLog> Machine Prop_8-{0} executing Function BATTERY_THRESHOLD\n", myHandle.instance);
locals = null;
myHandle.cont.PushReturnTo(0, locals, myHandle.currentEvent, myHandle.currentArg);
goto execute_BATTERY_THRESHOLD;
}
if ((actionFun == ActionOrFun._DOG)) {
trace("<FunctionLog> Machine Prop_8-{0} executing Function DOG\n", myHandle.instance);
locals = null;
myHandle.cont.PushReturnTo(0, locals, myHandle.currentEvent, myHandle.currentArg);
goto execute_DOG;
}
if ((actionFun == ActionOrFun._CAT)) {
trace("<FunctionLog> Machine Prop_8-{0} executing Function CAT\n", myHandle.instance);
locals = null;
myHandle.cont.PushReturnTo(0, locals, myHandle.currentEvent, myHandle.currentArg);
goto execute_CAT;
}
if ((actionFun == ActionOrFun._MICE)) {
trace("<FunctionLog> Machine Prop_8-{0} executing Function MICE\n", myHandle.instance);
locals = null;
myHandle.cont.PushReturnTo(0, locals, myHandle.currentEvent, myHandle.currentArg);
goto execute_MICE;
}
if ((actionFun == ActionOrFun._BATTERY_CHARGE_LOCATION)) {
trace("<FunctionLog> Machine Prop_8-{0} executing Function BATTERY_CHARGE_LOCATION\n", myHandle.instance);
locals = null;
myHandle.cont.PushReturnTo(0, locals, myHandle.currentEvent, myHandle.currentArg);
goto execute_BATTERY_CHARGE_LOCATION;
}
if ((actionFun == ActionOrFun._ROBOT_START_STATE)) {
trace("<FunctionLog> Machine Prop_8-{0} executing Function ROBOT_START_STATE\n", myHandle.instance);
locals = null;
myHandle.cont.PushReturnTo(0, locals, myHandle.currentEvent, myHandle.currentArg);
goto execute_ROBOT_START_STATE;
}
if ((actionFun == ActionOrFun._SIZE_OF_GRID)) {
trace("<FunctionLog> Machine Prop_8-{0} executing Function SIZE_OF_GRID\n", myHandle.instance);
locals = null;
myHandle.cont.PushReturnTo(0, locals, myHandle.currentEvent, myHandle.currentArg);
goto execute_SIZE_OF_GRID;
}
if ((actionFun == ActionOrFun._ROBOT_SCAN_LOCATIONS)) {
trace("<FunctionLog> Machine Prop_8-{0} executing Function ROBOT_SCAN_LOCATIONS\n", myHandle.instance);
locals = new PRT_VALUE_ARRAY[3];
locals[2] = PRT_VALUE.PrtMkDefaultValue(Main.type_2_PRT_TYPE);
locals[1] = PRT_VALUE.PrtMkDefaultValue(Main.type_2_PRT_TYPE);
locals[0] = PRT_VALUE.PrtMkDefaultValue(Main.type_1_PRT_TYPE);
myHandle.cont.PushReturnTo(0, locals, myHandle.currentEvent, myHandle.currentArg);
goto execute_ROBOT_SCAN_LOCATIONS;
}
if ((actionFun == ActionOrFun._GetStaticGoals)) {
trace("<FunctionLog> Machine Prop_8-{0} executing Function GetStaticGoals\n", myHandle.instance);
locals = new PRT_VALUE_ARRAY[1];
locals[0] = PRT_VALUE.PrtMkDefaultValue(Main.type_7_PRT_TYPE);
myHandle.cont.PushReturnTo(0, locals, myHandle.currentEvent, myHandle.currentArg);
goto execute_GetStaticGoals;
}
if ((actionFun == ActionOrFun._GetStaticObstacles)) {
trace("<FunctionLog> Machine Prop_8-{0} executing Function GetStaticObstacles\n", myHandle.instance);
locals = new PRT_VALUE_ARRAY[1];
locals[0] = PRT_VALUE.PrtMkDefaultValue(Main.type_2_PRT_TYPE);
myHandle.cont.PushReturnTo(0, locals, myHandle.currentEvent, myHandle.currentArg);
goto execute_GetStaticObstacles;
}
if ((actionFun == ActionOrFun._Prop_8_ignore)) {
trace("<FunctionLog> Machine Prop_8-{0} executing Function ignore\n", myHandle.instance);
locals = null;
myHandle.cont.PushReturnTo(0, locals, myHandle.currentEvent, myHandle.currentArg);
goto execute_ignore;
}
if ((actionFun == ActionOrFun._Prop_8_AnonFun0)) {
locals = null;
myHandle.cont.PushReturnTo(0, locals, myHandle.currentEvent, myHandle.currentArg);
goto execute_AnonFun0;
}
if ((actionFun == ActionOrFun._Prop_8_AnonFun1)) {
locals = null;
myHandle.cont.PushReturnTo(0, locals, myHandle.currentEvent, myHandle.currentArg);
goto execute_AnonFun1;
}
assert(false, "Internal error");

;


execute_ResetObstacle:
while (!doPop) {
Main.ResetObstacle(myHandle, myHandle.cont);
doPop = ProcessContinuation();

}
return;

;


execute_Seal:
while (!doPop) {
Main.Seal(myHandle, myHandle.cont);
doPop = ProcessContinuation();

}
return;

;


execute_Unseal:
while (!doPop) {
Main.Unseal(myHandle, myHandle.cont);
doPop = ProcessContinuation();

}
return;

;


execute_InitializeMotionPlanning:
while (!doPop) {
Main.InitializeMotionPlanning(myHandle, myHandle.cont);
doPop = ProcessContinuation();

}
return;

;


execute_CAT_CAGE_LOC:
while (!doPop) {
Main.CAT_CAGE_LOC(myHandle, myHandle.cont);
doPop = ProcessContinuation();

}
return;

;


execute_DOG_CAGE_LOC:
while (!doPop) {
Main.DOG_CAGE_LOC(myHandle, myHandle.cont);
doPop = ProcessContinuation();

}
return;

;


execute_MICE_CAGE_LOC:
while (!doPop) {
Main.MICE_CAGE_LOC(myHandle, myHandle.cont);
doPop = ProcessContinuation();

}
return;

;


execute_BATTERY_THRESHOLD:
while (!doPop) {
Main.BATTERY_THRESHOLD(myHandle, myHandle.cont);
doPop = ProcessContinuation();

}
return;

;


execute_DOG:
while (!doPop) {
Main.DOG(myHandle, myHandle.cont);
doPop = ProcessContinuation();

}
return;

;


execute_CAT:
while (!doPop) {
Main.CAT(myHandle, myHandle.cont);
doPop = ProcessContinuation();

}
return;

;


execute_MICE:
while (!doPop) {
Main.MICE(myHandle, myHandle.cont);
doPop = ProcessContinuation();

}
return;

;


execute_BATTERY_CHARGE_LOCATION:
while (!doPop) {
Main.BATTERY_CHARGE_LOCATION(myHandle, myHandle.cont);
doPop = ProcessContinuation();

}
return;

;


execute_ROBOT_START_STATE:
while (!doPop) {
Main.ROBOT_START_STATE(myHandle, myHandle.cont);
doPop = ProcessContinuation();

}
return;

;


execute_SIZE_OF_GRID:
while (!doPop) {
Main.SIZE_OF_GRID(myHandle, myHandle.cont);
doPop = ProcessContinuation();

}
return;

;


execute_ROBOT_SCAN_LOCATIONS:
while (!doPop) {
Main.ROBOT_SCAN_LOCATIONS(myHandle, myHandle.cont);
doPop = ProcessContinuation();

}
return;

;


execute_GetStaticGoals:
while (!doPop) {
Main.GetStaticGoals(myHandle, myHandle.cont);
doPop = ProcessContinuation();

}
return;

;


execute_GetStaticObstacles:
while (!doPop) {
Main.GetStaticObstacles(myHandle, myHandle.cont);
doPop = ProcessContinuation();

}
return;

;


execute_ignore:
while (!doPop) {
ignore(myHandle.cont);
doPop = ProcessContinuation();

}
return;

;


execute_AnonFun0:
while (!doPop) {
AnonFun0(myHandle.cont);
doPop = ProcessContinuation();

}
return;

;


execute_AnonFun1:
while (!doPop) {
AnonFun1(myHandle.cont);
doPop = ProcessContinuation();

}
return;

;

}
void ignore(Continuation entryCtxt) {
PRT_VALUE_ARRAY locals;
SM_EVENT currentEvent;
PRT_VALUE currentArg;
StackFrame retTo_81;

dummy:
retTo_81 = entryCtxt.PopReturnTo();
locals = retTo_81.locals;
currentEvent = retTo_81.currentEvent;
currentArg = retTo_81.currentArg;
if ((retTo_81.pc == 0)) {
goto start;
}
assert(false, "Internal error");

start:

;
entryCtxt.Return();
return;

;

}
void AnonFun0(Continuation entryCtxt) {
PRT_VALUE_ARRAY locals;
SM_EVENT currentEvent;
PRT_VALUE currentArg;
StackFrame retTo_82;

dummy:
retTo_82 = entryCtxt.PopReturnTo();
locals = retTo_82.locals;
currentEvent = retTo_82.currentEvent;
currentArg = retTo_82.currentArg;
if ((retTo_82.pc == 0)) {
goto start;
}
assert(false, "Internal error");

start:

;
entryCtxt.Return();
return;

;

}
void AnonFun1(Continuation entryCtxt) {
PRT_VALUE_ARRAY locals;
SM_EVENT currentEvent;
PRT_VALUE currentArg;
PRT_VALUE tmp_129;
PRT_VALUE tmpPayload_44;
StackFrame retTo_83;

dummy:
retTo_83 = entryCtxt.PopReturnTo();
locals = retTo_83.locals;
currentEvent = retTo_83.currentEvent;
currentArg = retTo_83.currentArg;
if ((retTo_83.pc == 0)) {
goto start;
}
assert(false, "Internal error");

start:
tmp_129 = PRT_VALUE.PrtMkDefaultValue(Main.type_12_PRT_TYPE);
PRT_VALUE.PrtPrimSetEvent(tmp_129, Main.local_SM_EVENT);
tmpPayload_44 = PRT_VALUE.PrtMkDefaultValue(Main.type_0_PRT_TYPE);
assert((tmp_129.ev != null), "(125, 4): Raised event must be non-null");
trace("<RaiseLog> Machine Prop_8-{0} raised Event {1}\n", myHandle.instance, tmp_129.ev.name);
myHandle.currentEvent = tmp_129.ev;
myHandle.currentArg = tmpPayload_44;
entryCtxt.Raise();
return;

;
entryCtxt.Return();
return;

;

}
};

class MACHINE_Prop_9{
PRT_VALUE hMice;
PRT_VALUE sDog;
SM_HANDLE myHandle;
void Prop_9_Init_CalculateDeferredAndActionSet() {

dummy:
myHandle.stack.deferredSet = new SM_EVENT_SET;
myHandle.stack.actionSet = new SM_EVENT_SET;
myHandle.stack.AddStackDeferredSet(myHandle.stack.deferredSet);
myHandle.stack.deferredSet = (myHandle.stack.deferredSet - Main.local_SM_EVENT);
myHandle.stack.AddStackActionSet(myHandle.stack.actionSet);
myHandle.stack.actionSet = (myHandle.stack.actionSet - Main.local_SM_EVENT);
myHandle.stack.es = new SM_EVENT_ARRAY[0];
myHandle.stack.as = new ActionOrFun_ARRAY[0];

;

}
void Prop_9_Wait_CalculateDeferredAndActionSet() {

dummy:
myHandle.stack.deferredSet = new SM_EVENT_SET;
myHandle.stack.actionSet = new SM_EVENT_SET;
myHandle.stack.AddStackDeferredSet(myHandle.stack.deferredSet);
myHandle.stack.deferredSet = (myHandle.stack.deferredSet - Main.M_sCat_SM_EVENT);
myHandle.stack.deferredSet = (myHandle.stack.deferredSet - Main.M_sDog_SM_EVENT);
myHandle.stack.deferredSet = (myHandle.stack.deferredSet - Main.M_hDog_SM_EVENT);
myHandle.stack.deferredSet = (myHandle.stack.deferredSet - Main.M_hMice_SM_EVENT);
myHandle.stack.deferredSet = (myHandle.stack.deferredSet - Main.M_rMice_SM_EVENT);
myHandle.stack.deferredSet = (myHandle.stack.deferredSet - Main.local_SM_EVENT);
myHandle.stack.AddStackActionSet(myHandle.stack.actionSet);
myHandle.stack.actionSet = (myHandle.stack.actionSet + Main.M_sCat_SM_EVENT);
myHandle.stack.actionSet = (myHandle.stack.actionSet + Main.M_sDog_SM_EVENT);
myHandle.stack.actionSet = (myHandle.stack.actionSet + Main.M_hDog_SM_EVENT);
myHandle.stack.actionSet = (myHandle.stack.actionSet + Main.M_hMice_SM_EVENT);
myHandle.stack.actionSet = (myHandle.stack.actionSet + Main.M_rMice_SM_EVENT);
myHandle.stack.actionSet = (myHandle.stack.actionSet - Main.local_SM_EVENT);
myHandle.stack.es = new SM_EVENT_ARRAY[5];
myHandle.stack.as = new ActionOrFun_ARRAY[5];
myHandle.stack.es[0] = Main.M_sCat_SM_EVENT;
myHandle.stack.as[0] = ActionOrFun._Prop_9_AnonFun2;
myHandle.stack.es[1] = Main.M_sDog_SM_EVENT;
myHandle.stack.as[1] = ActionOrFun._Prop_9_AnonFun3;
myHandle.stack.es[2] = Main.M_hDog_SM_EVENT;
myHandle.stack.as[2] = ActionOrFun._Prop_9_AnonFun4;
myHandle.stack.es[3] = Main.M_hMice_SM_EVENT;
myHandle.stack.as[3] = ActionOrFun._Prop_9_AnonFun5;
myHandle.stack.es[4] = Main.M_rMice_SM_EVENT;
myHandle.stack.as[4] = ActionOrFun._Prop_9_AnonFun6;

;

}
void Prop_9_WaitHCat_CalculateDeferredAndActionSet() {

dummy:
myHandle.stack.deferredSet = new SM_EVENT_SET;
myHandle.stack.actionSet = new SM_EVENT_SET;
myHandle.stack.AddStackDeferredSet(myHandle.stack.deferredSet);
myHandle.stack.deferredSet = (myHandle.stack.deferredSet - Main.M_hCat_SM_EVENT);
myHandle.stack.AddStackActionSet(myHandle.stack.actionSet);
myHandle.stack.actionSet = (myHandle.stack.actionSet - Main.M_hCat_SM_EVENT);
myHandle.stack.es = new SM_EVENT_ARRAY[0];
myHandle.stack.as = new ActionOrFun_ARRAY[0];

;

}
void Start() {

dummy:
Run(Main.Prop_9_Init_SM_STATE);
if ((myHandle.currentEvent == Main.halt_SM_EVENT)) {
myHandle.stack = null;
myHandle.buffer = null;
myHandle.currentArg = null;
SM_HANDLE.halted = (SM_HANDLE.halted + myHandle);
SM_HANDLE.enabled = (SM_HANDLE.enabled - myHandle);
return;

}
trace("<StateLog> Unhandled event exception by machine Prop_9-{0}\n", myHandle.instance);
assert(false, "Unhandled event exception by machine Prop_9");

;

}
void Run(SM_STATE state) {
bool doPop;
bool hasNullTransitionOrAction;

init:
myHandle.Push();
myHandle.stack.state = state;
doPop = RunHelper(true);
while (!doPop) {
hasNullTransitionOrAction = myHandle.stack.HasNullTransitionOrAction();
myHandle.DequeueEvent(hasNullTransitionOrAction);
doPop = RunHelper(false);

}
myHandle.Pop();

;

}
void TraceEnterState(SM_STATE state) {

init:
if ((state == Main.Prop_9_Init_SM_STATE)) {
trace("<StateLog> Machine Prop_9-{0} entering State Init\n", myHandle.instance);
return;

}
if ((state == Main.Prop_9_Wait_SM_STATE)) {
trace("<StateLog> Machine Prop_9-{0} entering State Wait\n", myHandle.instance);
return;

}
if ((state == Main.Prop_9_WaitHCat_SM_STATE)) {
trace("<StateLog> Machine Prop_9-{0} entering State WaitHCat\n", myHandle.instance);
return;

}
assert(false, "Internal error");

;

}
void TraceExitState(SM_STATE state) {

init:
if ((state == Main.Prop_9_Init_SM_STATE)) {
trace("<StateLog> Machine Prop_9-{0} exiting State Init\n", myHandle.instance);
return;

}
if ((state == Main.Prop_9_Wait_SM_STATE)) {
trace("<StateLog> Machine Prop_9-{0} exiting State Wait\n", myHandle.instance);
return;

}
if ((state == Main.Prop_9_WaitHCat_SM_STATE)) {
trace("<StateLog> Machine Prop_9-{0} exiting State WaitHCat\n", myHandle.instance);
return;

}
assert(false, "Internal error");

;

}
void CalculateDeferredAndActionSet(SM_STATE state) {

init:
if ((state == Main.Prop_9_Init_SM_STATE)) {
Prop_9_Init_CalculateDeferredAndActionSet();
return;

}
if ((state == Main.Prop_9_Wait_SM_STATE)) {
Prop_9_Wait_CalculateDeferredAndActionSet();
return;

}
if ((state == Main.Prop_9_WaitHCat_SM_STATE)) {
Prop_9_WaitHCat_CalculateDeferredAndActionSet();
return;

}
assert(false, "Internal error");

;

}
bool RunHelper(bool start) {
SM_STATE state;
SM_TRANSITION transition;
ActionOrFun actionFun;

init:
state = myHandle.stack.state;
if (start) {
goto enter;
} else {
goto handle;
}

;


enter:
state = myHandle.stack.state;
TraceEnterState(state);
if ((state.temperature == StateTemperature.Hot)) {
SM_HANDLE.hot = (SM_HANDLE.hot + myHandle);

} else {
SM_HANDLE.hot = (SM_HANDLE.hot - myHandle);

}
CalculateDeferredAndActionSet(state);
actionFun = state.entryFun;

;


execute:
ReentrancyHelper(actionFun);
if ((myHandle.cont.reason == ContinuationReason.Raise)) {
goto handle;
}
myHandle.currentEvent = null;
myHandle.currentArg = PRT_VALUE.PrtMkDefaultValue(Main.type_0_PRT_TYPE);
if ((myHandle.cont.reason != ContinuationReason.Pop)) {
return false;

}
TraceExitState(state);
ReentrancyHelper(state.exitFun);
return true;

;


handle:
if ((myHandle.currentEvent in myHandle.stack.actionSet)) {
actionFun = myHandle.stack.Find(myHandle.currentEvent);
goto execute;
}
transition = state.FindPushTransition(myHandle.currentEvent);
if ((transition != null)) {
Run(transition.to);
if ((myHandle.currentEvent == null)) {
return false;

} else {
goto handle;
}

}
TraceExitState(state);
ReentrancyHelper(state.exitFun);
transition = state.FindTransition(myHandle.currentEvent);
if ((transition == null)) {
return true;

}
ReentrancyHelper(transition.fun);
myHandle.stack.state = transition.to;
state = myHandle.stack.state;
goto enter;
;

}
bool ProcessContinuation() {
bool doPop;

init:
if ((myHandle.cont.reason == ContinuationReason.Return)) {
return true;

}
if ((myHandle.cont.reason == ContinuationReason.Pop)) {
return true;

}
if ((myHandle.cont.reason == ContinuationReason.Raise)) {
return true;

}
if ((myHandle.cont.reason == ContinuationReason.Receive)) {
myHandle.DequeueEvent(false);
return false;

}
if ((myHandle.cont.reason == ContinuationReason.Nondet)) {
myHandle.cont.nondet = choose(bool);
return false;

}
if ((myHandle.cont.reason == ContinuationReason.NewMachine)) {
yield;
return false;

}
if ((myHandle.cont.reason == ContinuationReason.Send)) {
yield;
return false;

}

;

}
void ReentrancyHelper(ActionOrFun actionFun) {
PRT_VALUE_ARRAY locals;
bool doPop;

init:
doPop = false;
myHandle.cont.Reset();
if ((actionFun == ActionOrFun._ResetObstacle)) {
trace("<FunctionLog> Machine Prop_9-{0} executing Function ResetObstacle\n", myHandle.instance);
locals = null;
myHandle.cont.PushReturnTo(0, locals, myHandle.currentEvent, myHandle.currentArg);
goto execute_ResetObstacle;
}
if ((actionFun == ActionOrFun._Seal)) {
trace("<FunctionLog> Machine Prop_9-{0} executing Function Seal\n", myHandle.instance);
locals = null;
myHandle.cont.PushReturnTo(0, locals, myHandle.currentEvent, myHandle.currentArg);
goto execute_Seal;
}
if ((actionFun == ActionOrFun._Unseal)) {
trace("<FunctionLog> Machine Prop_9-{0} executing Function Unseal\n", myHandle.instance);
locals = null;
myHandle.cont.PushReturnTo(0, locals, myHandle.currentEvent, myHandle.currentArg);
goto execute_Unseal;
}
if ((actionFun == ActionOrFun._InitializeMotionPlanning)) {
trace("<FunctionLog> Machine Prop_9-{0} executing Function InitializeMotionPlanning\n", myHandle.instance);
locals = new PRT_VALUE_ARRAY[4];
locals[3] = PRT_VALUE.PrtMkDefaultValue(Main.type_1_PRT_TYPE);
locals[2] = PRT_VALUE.PrtMkDefaultValue(Main.type_2_PRT_TYPE);
locals[1] = PRT_VALUE.PrtMkDefaultValue(Main.type_2_PRT_TYPE);
locals[0] = PRT_VALUE.PrtMkDefaultValue(Main.type_4_PRT_TYPE);
myHandle.cont.PushReturnTo(0, locals, myHandle.currentEvent, myHandle.currentArg);
goto execute_InitializeMotionPlanning;
}
if ((actionFun == ActionOrFun._CAT_CAGE_LOC)) {
trace("<FunctionLog> Machine Prop_9-{0} executing Function CAT_CAGE_LOC\n", myHandle.instance);
locals = null;
myHandle.cont.PushReturnTo(0, locals, myHandle.currentEvent, myHandle.currentArg);
goto execute_CAT_CAGE_LOC;
}
if ((actionFun == ActionOrFun._DOG_CAGE_LOC)) {
trace("<FunctionLog> Machine Prop_9-{0} executing Function DOG_CAGE_LOC\n", myHandle.instance);
locals = null;
myHandle.cont.PushReturnTo(0, locals, myHandle.currentEvent, myHandle.currentArg);
goto execute_DOG_CAGE_LOC;
}
if ((actionFun == ActionOrFun._MICE_CAGE_LOC)) {
trace("<FunctionLog> Machine Prop_9-{0} executing Function MICE_CAGE_LOC\n", myHandle.instance);
locals = null;
myHandle.cont.PushReturnTo(0, locals, myHandle.currentEvent, myHandle.currentArg);
goto execute_MICE_CAGE_LOC;
}
if ((actionFun == ActionOrFun._BATTERY_THRESHOLD)) {
trace("<FunctionLog> Machine Prop_9-{0} executing Function BATTERY_THRESHOLD\n", myHandle.instance);
locals = null;
myHandle.cont.PushReturnTo(0, locals, myHandle.currentEvent, myHandle.currentArg);
goto execute_BATTERY_THRESHOLD;
}
if ((actionFun == ActionOrFun._DOG)) {
trace("<FunctionLog> Machine Prop_9-{0} executing Function DOG\n", myHandle.instance);
locals = null;
myHandle.cont.PushReturnTo(0, locals, myHandle.currentEvent, myHandle.currentArg);
goto execute_DOG;
}
if ((actionFun == ActionOrFun._CAT)) {
trace("<FunctionLog> Machine Prop_9-{0} executing Function CAT\n", myHandle.instance);
locals = null;
myHandle.cont.PushReturnTo(0, locals, myHandle.currentEvent, myHandle.currentArg);
goto execute_CAT;
}
if ((actionFun == ActionOrFun._MICE)) {
trace("<FunctionLog> Machine Prop_9-{0} executing Function MICE\n", myHandle.instance);
locals = null;
myHandle.cont.PushReturnTo(0, locals, myHandle.currentEvent, myHandle.currentArg);
goto execute_MICE;
}
if ((actionFun == ActionOrFun._BATTERY_CHARGE_LOCATION)) {
trace("<FunctionLog> Machine Prop_9-{0} executing Function BATTERY_CHARGE_LOCATION\n", myHandle.instance);
locals = null;
myHandle.cont.PushReturnTo(0, locals, myHandle.currentEvent, myHandle.currentArg);
goto execute_BATTERY_CHARGE_LOCATION;
}
if ((actionFun == ActionOrFun._ROBOT_START_STATE)) {
trace("<FunctionLog> Machine Prop_9-{0} executing Function ROBOT_START_STATE\n", myHandle.instance);
locals = null;
myHandle.cont.PushReturnTo(0, locals, myHandle.currentEvent, myHandle.currentArg);
goto execute_ROBOT_START_STATE;
}
if ((actionFun == ActionOrFun._SIZE_OF_GRID)) {
trace("<FunctionLog> Machine Prop_9-{0} executing Function SIZE_OF_GRID\n", myHandle.instance);
locals = null;
myHandle.cont.PushReturnTo(0, locals, myHandle.currentEvent, myHandle.currentArg);
goto execute_SIZE_OF_GRID;
}
if ((actionFun == ActionOrFun._ROBOT_SCAN_LOCATIONS)) {
trace("<FunctionLog> Machine Prop_9-{0} executing Function ROBOT_SCAN_LOCATIONS\n", myHandle.instance);
locals = new PRT_VALUE_ARRAY[3];
locals[2] = PRT_VALUE.PrtMkDefaultValue(Main.type_2_PRT_TYPE);
locals[1] = PRT_VALUE.PrtMkDefaultValue(Main.type_2_PRT_TYPE);
locals[0] = PRT_VALUE.PrtMkDefaultValue(Main.type_1_PRT_TYPE);
myHandle.cont.PushReturnTo(0, locals, myHandle.currentEvent, myHandle.currentArg);
goto execute_ROBOT_SCAN_LOCATIONS;
}
if ((actionFun == ActionOrFun._GetStaticGoals)) {
trace("<FunctionLog> Machine Prop_9-{0} executing Function GetStaticGoals\n", myHandle.instance);
locals = new PRT_VALUE_ARRAY[1];
locals[0] = PRT_VALUE.PrtMkDefaultValue(Main.type_7_PRT_TYPE);
myHandle.cont.PushReturnTo(0, locals, myHandle.currentEvent, myHandle.currentArg);
goto execute_GetStaticGoals;
}
if ((actionFun == ActionOrFun._GetStaticObstacles)) {
trace("<FunctionLog> Machine Prop_9-{0} executing Function GetStaticObstacles\n", myHandle.instance);
locals = new PRT_VALUE_ARRAY[1];
locals[0] = PRT_VALUE.PrtMkDefaultValue(Main.type_2_PRT_TYPE);
myHandle.cont.PushReturnTo(0, locals, myHandle.currentEvent, myHandle.currentArg);
goto execute_GetStaticObstacles;
}
if ((actionFun == ActionOrFun._Prop_9_ignore)) {
trace("<FunctionLog> Machine Prop_9-{0} executing Function ignore\n", myHandle.instance);
locals = null;
myHandle.cont.PushReturnTo(0, locals, myHandle.currentEvent, myHandle.currentArg);
goto execute_ignore;
}
if ((actionFun == ActionOrFun._Prop_9_AnonFun0)) {
locals = null;
myHandle.cont.PushReturnTo(0, locals, myHandle.currentEvent, myHandle.currentArg);
goto execute_AnonFun0;
}
if ((actionFun == ActionOrFun._Prop_9_AnonFun1)) {
locals = null;
myHandle.cont.PushReturnTo(0, locals, myHandle.currentEvent, myHandle.currentArg);
goto execute_AnonFun1;
}
if ((actionFun == ActionOrFun._Prop_9_AnonFun2)) {
locals = null;
myHandle.cont.PushReturnTo(0, locals, myHandle.currentEvent, myHandle.currentArg);
goto execute_AnonFun2;
}
if ((actionFun == ActionOrFun._Prop_9_AnonFun3)) {
locals = null;
myHandle.cont.PushReturnTo(0, locals, myHandle.currentEvent, myHandle.currentArg);
goto execute_AnonFun3;
}
if ((actionFun == ActionOrFun._Prop_9_AnonFun4)) {
locals = null;
myHandle.cont.PushReturnTo(0, locals, myHandle.currentEvent, myHandle.currentArg);
goto execute_AnonFun4;
}
if ((actionFun == ActionOrFun._Prop_9_AnonFun5)) {
locals = null;
myHandle.cont.PushReturnTo(0, locals, myHandle.currentEvent, myHandle.currentArg);
goto execute_AnonFun5;
}
if ((actionFun == ActionOrFun._Prop_9_AnonFun6)) {
locals = null;
myHandle.cont.PushReturnTo(0, locals, myHandle.currentEvent, myHandle.currentArg);
goto execute_AnonFun6;
}
assert(false, "Internal error");

;


execute_ResetObstacle:
while (!doPop) {
Main.ResetObstacle(myHandle, myHandle.cont);
doPop = ProcessContinuation();

}
return;

;


execute_Seal:
while (!doPop) {
Main.Seal(myHandle, myHandle.cont);
doPop = ProcessContinuation();

}
return;

;


execute_Unseal:
while (!doPop) {
Main.Unseal(myHandle, myHandle.cont);
doPop = ProcessContinuation();

}
return;

;


execute_InitializeMotionPlanning:
while (!doPop) {
Main.InitializeMotionPlanning(myHandle, myHandle.cont);
doPop = ProcessContinuation();

}
return;

;


execute_CAT_CAGE_LOC:
while (!doPop) {
Main.CAT_CAGE_LOC(myHandle, myHandle.cont);
doPop = ProcessContinuation();

}
return;

;


execute_DOG_CAGE_LOC:
while (!doPop) {
Main.DOG_CAGE_LOC(myHandle, myHandle.cont);
doPop = ProcessContinuation();

}
return;

;


execute_MICE_CAGE_LOC:
while (!doPop) {
Main.MICE_CAGE_LOC(myHandle, myHandle.cont);
doPop = ProcessContinuation();

}
return;

;


execute_BATTERY_THRESHOLD:
while (!doPop) {
Main.BATTERY_THRESHOLD(myHandle, myHandle.cont);
doPop = ProcessContinuation();

}
return;

;


execute_DOG:
while (!doPop) {
Main.DOG(myHandle, myHandle.cont);
doPop = ProcessContinuation();

}
return;

;


execute_CAT:
while (!doPop) {
Main.CAT(myHandle, myHandle.cont);
doPop = ProcessContinuation();

}
return;

;


execute_MICE:
while (!doPop) {
Main.MICE(myHandle, myHandle.cont);
doPop = ProcessContinuation();

}
return;

;


execute_BATTERY_CHARGE_LOCATION:
while (!doPop) {
Main.BATTERY_CHARGE_LOCATION(myHandle, myHandle.cont);
doPop = ProcessContinuation();

}
return;

;


execute_ROBOT_START_STATE:
while (!doPop) {
Main.ROBOT_START_STATE(myHandle, myHandle.cont);
doPop = ProcessContinuation();

}
return;

;


execute_SIZE_OF_GRID:
while (!doPop) {
Main.SIZE_OF_GRID(myHandle, myHandle.cont);
doPop = ProcessContinuation();

}
return;

;


execute_ROBOT_SCAN_LOCATIONS:
while (!doPop) {
Main.ROBOT_SCAN_LOCATIONS(myHandle, myHandle.cont);
doPop = ProcessContinuation();

}
return;

;


execute_GetStaticGoals:
while (!doPop) {
Main.GetStaticGoals(myHandle, myHandle.cont);
doPop = ProcessContinuation();

}
return;

;


execute_GetStaticObstacles:
while (!doPop) {
Main.GetStaticObstacles(myHandle, myHandle.cont);
doPop = ProcessContinuation();

}
return;

;


execute_ignore:
while (!doPop) {
ignore(myHandle.cont);
doPop = ProcessContinuation();

}
return;

;


execute_AnonFun0:
while (!doPop) {
AnonFun0(myHandle.cont);
doPop = ProcessContinuation();

}
return;

;


execute_AnonFun1:
while (!doPop) {
AnonFun1(myHandle.cont);
doPop = ProcessContinuation();

}
return;

;


execute_AnonFun2:
while (!doPop) {
AnonFun2(myHandle.cont);
doPop = ProcessContinuation();

}
return;

;


execute_AnonFun3:
while (!doPop) {
AnonFun3(myHandle.cont);
doPop = ProcessContinuation();

}
return;

;


execute_AnonFun4:
while (!doPop) {
AnonFun4(myHandle.cont);
doPop = ProcessContinuation();

}
return;

;


execute_AnonFun5:
while (!doPop) {
AnonFun5(myHandle.cont);
doPop = ProcessContinuation();

}
return;

;


execute_AnonFun6:
while (!doPop) {
AnonFun6(myHandle.cont);
doPop = ProcessContinuation();

}
return;

;

}
void ignore(Continuation entryCtxt) {
PRT_VALUE_ARRAY locals;
SM_EVENT currentEvent;
PRT_VALUE currentArg;
StackFrame retTo_84;

dummy:
retTo_84 = entryCtxt.PopReturnTo();
locals = retTo_84.locals;
currentEvent = retTo_84.currentEvent;
currentArg = retTo_84.currentArg;
if ((retTo_84.pc == 0)) {
goto start;
}
assert(false, "Internal error");

start:

;
entryCtxt.Return();
return;

;

}
void AnonFun0(Continuation entryCtxt) {
PRT_VALUE_ARRAY locals;
SM_EVENT currentEvent;
PRT_VALUE currentArg;
StackFrame retTo_85;

dummy:
retTo_85 = entryCtxt.PopReturnTo();
locals = retTo_85.locals;
currentEvent = retTo_85.currentEvent;
currentArg = retTo_85.currentArg;
if ((retTo_85.pc == 0)) {
goto start;
}
assert(false, "Internal error");

start:

;
entryCtxt.Return();
return;

;

}
void AnonFun1(Continuation entryCtxt) {
PRT_VALUE_ARRAY locals;
SM_EVENT currentEvent;
PRT_VALUE currentArg;
PRT_VALUE tmp_130;
PRT_VALUE tmp_131;
PRT_VALUE tmp_132;
PRT_VALUE tmpPayload_45;
StackFrame retTo_86;

dummy:
retTo_86 = entryCtxt.PopReturnTo();
locals = retTo_86.locals;
currentEvent = retTo_86.currentEvent;
currentArg = retTo_86.currentArg;
if ((retTo_86.pc == 0)) {
goto start;
}
assert(false, "Internal error");

start:
tmp_130 = PRT_VALUE.PrtMkDefaultValue(Main.type_5_PRT_TYPE);
PRT_VALUE.PrtPrimSetBool(tmp_130, false);
hMice = PRT_VALUE.PrtCloneValue(tmp_130);
tmp_131 = PRT_VALUE.PrtMkDefaultValue(Main.type_5_PRT_TYPE);
PRT_VALUE.PrtPrimSetBool(tmp_131, false);
sDog = PRT_VALUE.PrtCloneValue(tmp_131);
tmp_132 = PRT_VALUE.PrtMkDefaultValue(Main.type_12_PRT_TYPE);
PRT_VALUE.PrtPrimSetEvent(tmp_132, Main.local_SM_EVENT);
tmpPayload_45 = PRT_VALUE.PrtMkDefaultValue(Main.type_0_PRT_TYPE);
assert((tmp_132.ev != null), "(153, 4): Raised event must be non-null");
trace("<RaiseLog> Machine Prop_9-{0} raised Event {1}\n", myHandle.instance, tmp_132.ev.name);
myHandle.currentEvent = tmp_132.ev;
myHandle.currentArg = tmpPayload_45;
entryCtxt.Raise();
return;

;
entryCtxt.Return();
return;

;

}
void AnonFun2(Continuation entryCtxt) {
PRT_VALUE_ARRAY locals;
SM_EVENT currentEvent;
PRT_VALUE currentArg;
PRT_VALUE tmp_133;
bool tmpVar_95;
PRT_VALUE tmpVar_96;
PRT_VALUE tmp_134;
bool tmpVar_97;
PRT_VALUE tmpVar_98;
PRT_VALUE tmpVar_99;
PRT_VALUE tmp_135;
PRT_VALUE tmpPayload_46;
StackFrame retTo_87;

dummy:
retTo_87 = entryCtxt.PopReturnTo();
locals = retTo_87.locals;
currentEvent = retTo_87.currentEvent;
currentArg = retTo_87.currentArg;
if ((retTo_87.pc == 0)) {
goto start;
}
assert(false, "Internal error");

start:
tmp_133 = PRT_VALUE.PrtMkDefaultValue(Main.type_5_PRT_TYPE);
PRT_VALUE.PrtPrimSetBool(tmp_133, false);
tmpVar_95 = PRT_VALUE.PrtIsEqualValue(hMice, tmp_133);
tmpVar_96 = PRT_VALUE.PrtMkDefaultValue(Main.type_5_PRT_TYPE);
PRT_VALUE.PrtPrimSetBool(tmpVar_96, tmpVar_95);
if (tmpVar_96.bl) {
tmp_134 = PRT_VALUE.PrtMkDefaultValue(Main.type_5_PRT_TYPE);
PRT_VALUE.PrtPrimSetBool(tmp_134, false);
tmpVar_97 = PRT_VALUE.PrtIsEqualValue(sDog, tmp_134);
tmpVar_98 = PRT_VALUE.PrtMkDefaultValue(Main.type_5_PRT_TYPE);
PRT_VALUE.PrtPrimSetBool(tmpVar_98, tmpVar_97);

}
tmpVar_99 = PRT_VALUE.PrtMkDefaultValue(Main.type_5_PRT_TYPE);
PRT_VALUE.PrtPrimSetBool(tmpVar_99, (tmpVar_96.bl && tmpVar_98.bl));
if (!tmpVar_99.bl) {
goto AnonFun2_if_2_else;
}
tmp_135 = PRT_VALUE.PrtMkDefaultValue(Main.type_12_PRT_TYPE);
PRT_VALUE.PrtPrimSetEvent(tmp_135, Main.local_SM_EVENT);
tmpPayload_46 = PRT_VALUE.PrtMkDefaultValue(Main.type_0_PRT_TYPE);
assert((tmp_135.ev != null), "(159, 53): Raised event must be non-null");
trace("<RaiseLog> Machine Prop_9-{0} raised Event {1}\n", myHandle.instance, tmp_135.ev.name);
myHandle.currentEvent = tmp_135.ev;
myHandle.currentArg = tmpPayload_46;
entryCtxt.Raise();
return;
goto AnonFun2_if_2_end;
AnonFun2_if_2_else:

;

AnonFun2_if_2_end:

;

;
entryCtxt.Return();
return;

;

}
void AnonFun3(Continuation entryCtxt) {
PRT_VALUE_ARRAY locals;
SM_EVENT currentEvent;
PRT_VALUE currentArg;
PRT_VALUE tmp_136;
StackFrame retTo_88;

dummy:
retTo_88 = entryCtxt.PopReturnTo();
locals = retTo_88.locals;
currentEvent = retTo_88.currentEvent;
currentArg = retTo_88.currentArg;
if ((retTo_88.pc == 0)) {
goto start;
}
assert(false, "Internal error");

start:
tmp_136 = PRT_VALUE.PrtMkDefaultValue(Main.type_5_PRT_TYPE);
PRT_VALUE.PrtPrimSetBool(tmp_136, true);
sDog = PRT_VALUE.PrtCloneValue(tmp_136);

;
entryCtxt.Return();
return;

;

}
void AnonFun4(Continuation entryCtxt) {
PRT_VALUE_ARRAY locals;
SM_EVENT currentEvent;
PRT_VALUE currentArg;
PRT_VALUE tmp_137;
StackFrame retTo_89;

dummy:
retTo_89 = entryCtxt.PopReturnTo();
locals = retTo_89.locals;
currentEvent = retTo_89.currentEvent;
currentArg = retTo_89.currentArg;
if ((retTo_89.pc == 0)) {
goto start;
}
assert(false, "Internal error");

start:
tmp_137 = PRT_VALUE.PrtMkDefaultValue(Main.type_5_PRT_TYPE);
PRT_VALUE.PrtPrimSetBool(tmp_137, false);
sDog = PRT_VALUE.PrtCloneValue(tmp_137);

;
entryCtxt.Return();
return;

;

}
void AnonFun5(Continuation entryCtxt) {
PRT_VALUE_ARRAY locals;
SM_EVENT currentEvent;
PRT_VALUE currentArg;
PRT_VALUE tmp_138;
StackFrame retTo_90;

dummy:
retTo_90 = entryCtxt.PopReturnTo();
locals = retTo_90.locals;
currentEvent = retTo_90.currentEvent;
currentArg = retTo_90.currentArg;
if ((retTo_90.pc == 0)) {
goto start;
}
assert(false, "Internal error");

start:
tmp_138 = PRT_VALUE.PrtMkDefaultValue(Main.type_5_PRT_TYPE);
PRT_VALUE.PrtPrimSetBool(tmp_138, true);
hMice = PRT_VALUE.PrtCloneValue(tmp_138);

;
entryCtxt.Return();
return;

;

}
void AnonFun6(Continuation entryCtxt) {
PRT_VALUE_ARRAY locals;
SM_EVENT currentEvent;
PRT_VALUE currentArg;
PRT_VALUE tmp_139;
StackFrame retTo_91;

dummy:
retTo_91 = entryCtxt.PopReturnTo();
locals = retTo_91.locals;
currentEvent = retTo_91.currentEvent;
currentArg = retTo_91.currentArg;
if ((retTo_91.pc == 0)) {
goto start;
}
assert(false, "Internal error");

start:
tmp_139 = PRT_VALUE.PrtMkDefaultValue(Main.type_5_PRT_TYPE);
PRT_VALUE.PrtPrimSetBool(tmp_139, false);
hMice = PRT_VALUE.PrtCloneValue(tmp_139);

;
entryCtxt.Return();
return;

;

}
};

class MACHINE_Prop_3{
PRT_VALUE noAnimals;
SM_HANDLE myHandle;
void Prop_3_Init_CalculateDeferredAndActionSet() {

dummy:
myHandle.stack.deferredSet = new SM_EVENT_SET;
myHandle.stack.actionSet = new SM_EVENT_SET;
myHandle.stack.AddStackDeferredSet(myHandle.stack.deferredSet);
myHandle.stack.deferredSet = (myHandle.stack.deferredSet - Main.local_SM_EVENT);
myHandle.stack.AddStackActionSet(myHandle.stack.actionSet);
myHandle.stack.actionSet = (myHandle.stack.actionSet - Main.local_SM_EVENT);
myHandle.stack.es = new SM_EVENT_ARRAY[0];
myHandle.stack.as = new ActionOrFun_ARRAY[0];

;

}
void Prop_3_WaitForHerding_CalculateDeferredAndActionSet() {

dummy:
myHandle.stack.deferredSet = new SM_EVENT_SET;
myHandle.stack.actionSet = new SM_EVENT_SET;
myHandle.stack.AddStackDeferredSet(myHandle.stack.deferredSet);
myHandle.stack.deferredSet = (myHandle.stack.deferredSet - Main.M_hCat_SM_EVENT);
myHandle.stack.deferredSet = (myHandle.stack.deferredSet - Main.M_hDog_SM_EVENT);
myHandle.stack.deferredSet = (myHandle.stack.deferredSet - Main.M_hMice_SM_EVENT);
myHandle.stack.deferredSet = (myHandle.stack.deferredSet - Main.local_SM_EVENT);
myHandle.stack.AddStackActionSet(myHandle.stack.actionSet);
myHandle.stack.actionSet = (myHandle.stack.actionSet + Main.M_hCat_SM_EVENT);
myHandle.stack.actionSet = (myHandle.stack.actionSet + Main.M_hDog_SM_EVENT);
myHandle.stack.actionSet = (myHandle.stack.actionSet + Main.M_hMice_SM_EVENT);
myHandle.stack.actionSet = (myHandle.stack.actionSet - Main.local_SM_EVENT);
myHandle.stack.es = new SM_EVENT_ARRAY[3];
myHandle.stack.as = new ActionOrFun_ARRAY[3];
myHandle.stack.es[0] = Main.M_hCat_SM_EVENT;
myHandle.stack.as[0] = ActionOrFun._Prop_3_AnonFun2;
myHandle.stack.es[1] = Main.M_hDog_SM_EVENT;
myHandle.stack.as[1] = ActionOrFun._Prop_3_AnonFun2;
myHandle.stack.es[2] = Main.M_hMice_SM_EVENT;
myHandle.stack.as[2] = ActionOrFun._Prop_3_AnonFun2;

;

}
void Prop_3_Done_CalculateDeferredAndActionSet() {

dummy:
myHandle.stack.deferredSet = new SM_EVENT_SET;
myHandle.stack.actionSet = new SM_EVENT_SET;
myHandle.stack.AddStackDeferredSet(myHandle.stack.deferredSet);
myHandle.stack.AddStackActionSet(myHandle.stack.actionSet);
myHandle.stack.es = new SM_EVENT_ARRAY[0];
myHandle.stack.as = new ActionOrFun_ARRAY[0];

;

}
void Start() {

dummy:
Run(Main.Prop_3_Init_SM_STATE);
if ((myHandle.currentEvent == Main.halt_SM_EVENT)) {
myHandle.stack = null;
myHandle.buffer = null;
myHandle.currentArg = null;
SM_HANDLE.halted = (SM_HANDLE.halted + myHandle);
SM_HANDLE.enabled = (SM_HANDLE.enabled - myHandle);
return;

}
trace("<StateLog> Unhandled event exception by machine Prop_3-{0}\n", myHandle.instance);
assert(false, "Unhandled event exception by machine Prop_3");

;

}
void Run(SM_STATE state) {
bool doPop;
bool hasNullTransitionOrAction;

init:
myHandle.Push();
myHandle.stack.state = state;
doPop = RunHelper(true);
while (!doPop) {
hasNullTransitionOrAction = myHandle.stack.HasNullTransitionOrAction();
myHandle.DequeueEvent(hasNullTransitionOrAction);
doPop = RunHelper(false);

}
myHandle.Pop();

;

}
void TraceEnterState(SM_STATE state) {

init:
if ((state == Main.Prop_3_Init_SM_STATE)) {
trace("<StateLog> Machine Prop_3-{0} entering State Init\n", myHandle.instance);
return;

}
if ((state == Main.Prop_3_WaitForHerding_SM_STATE)) {
trace("<StateLog> Machine Prop_3-{0} entering State WaitForHerding\n", myHandle.instance);
return;

}
if ((state == Main.Prop_3_Done_SM_STATE)) {
trace("<StateLog> Machine Prop_3-{0} entering State Done\n", myHandle.instance);
return;

}
assert(false, "Internal error");

;

}
void TraceExitState(SM_STATE state) {

init:
if ((state == Main.Prop_3_Init_SM_STATE)) {
trace("<StateLog> Machine Prop_3-{0} exiting State Init\n", myHandle.instance);
return;

}
if ((state == Main.Prop_3_WaitForHerding_SM_STATE)) {
trace("<StateLog> Machine Prop_3-{0} exiting State WaitForHerding\n", myHandle.instance);
return;

}
if ((state == Main.Prop_3_Done_SM_STATE)) {
trace("<StateLog> Machine Prop_3-{0} exiting State Done\n", myHandle.instance);
return;

}
assert(false, "Internal error");

;

}
void CalculateDeferredAndActionSet(SM_STATE state) {

init:
if ((state == Main.Prop_3_Init_SM_STATE)) {
Prop_3_Init_CalculateDeferredAndActionSet();
return;

}
if ((state == Main.Prop_3_WaitForHerding_SM_STATE)) {
Prop_3_WaitForHerding_CalculateDeferredAndActionSet();
return;

}
if ((state == Main.Prop_3_Done_SM_STATE)) {
Prop_3_Done_CalculateDeferredAndActionSet();
return;

}
assert(false, "Internal error");

;

}
bool RunHelper(bool start) {
SM_STATE state;
SM_TRANSITION transition;
ActionOrFun actionFun;

init:
state = myHandle.stack.state;
if (start) {
goto enter;
} else {
goto handle;
}

;


enter:
state = myHandle.stack.state;
TraceEnterState(state);
if ((state.temperature == StateTemperature.Hot)) {
SM_HANDLE.hot = (SM_HANDLE.hot + myHandle);

} else {
SM_HANDLE.hot = (SM_HANDLE.hot - myHandle);

}
CalculateDeferredAndActionSet(state);
actionFun = state.entryFun;

;


execute:
ReentrancyHelper(actionFun);
if ((myHandle.cont.reason == ContinuationReason.Raise)) {
goto handle;
}
myHandle.currentEvent = null;
myHandle.currentArg = PRT_VALUE.PrtMkDefaultValue(Main.type_0_PRT_TYPE);
if ((myHandle.cont.reason != ContinuationReason.Pop)) {
return false;

}
TraceExitState(state);
ReentrancyHelper(state.exitFun);
return true;

;


handle:
if ((myHandle.currentEvent in myHandle.stack.actionSet)) {
actionFun = myHandle.stack.Find(myHandle.currentEvent);
goto execute;
}
transition = state.FindPushTransition(myHandle.currentEvent);
if ((transition != null)) {
Run(transition.to);
if ((myHandle.currentEvent == null)) {
return false;

} else {
goto handle;
}

}
TraceExitState(state);
ReentrancyHelper(state.exitFun);
transition = state.FindTransition(myHandle.currentEvent);
if ((transition == null)) {
return true;

}
ReentrancyHelper(transition.fun);
myHandle.stack.state = transition.to;
state = myHandle.stack.state;
goto enter;
;

}
bool ProcessContinuation() {
bool doPop;

init:
if ((myHandle.cont.reason == ContinuationReason.Return)) {
return true;

}
if ((myHandle.cont.reason == ContinuationReason.Pop)) {
return true;

}
if ((myHandle.cont.reason == ContinuationReason.Raise)) {
return true;

}
if ((myHandle.cont.reason == ContinuationReason.Receive)) {
myHandle.DequeueEvent(false);
return false;

}
if ((myHandle.cont.reason == ContinuationReason.Nondet)) {
myHandle.cont.nondet = choose(bool);
return false;

}
if ((myHandle.cont.reason == ContinuationReason.NewMachine)) {
yield;
return false;

}
if ((myHandle.cont.reason == ContinuationReason.Send)) {
yield;
return false;

}

;

}
void ReentrancyHelper(ActionOrFun actionFun) {
PRT_VALUE_ARRAY locals;
bool doPop;

init:
doPop = false;
myHandle.cont.Reset();
if ((actionFun == ActionOrFun._ResetObstacle)) {
trace("<FunctionLog> Machine Prop_3-{0} executing Function ResetObstacle\n", myHandle.instance);
locals = null;
myHandle.cont.PushReturnTo(0, locals, myHandle.currentEvent, myHandle.currentArg);
goto execute_ResetObstacle;
}
if ((actionFun == ActionOrFun._Seal)) {
trace("<FunctionLog> Machine Prop_3-{0} executing Function Seal\n", myHandle.instance);
locals = null;
myHandle.cont.PushReturnTo(0, locals, myHandle.currentEvent, myHandle.currentArg);
goto execute_Seal;
}
if ((actionFun == ActionOrFun._Unseal)) {
trace("<FunctionLog> Machine Prop_3-{0} executing Function Unseal\n", myHandle.instance);
locals = null;
myHandle.cont.PushReturnTo(0, locals, myHandle.currentEvent, myHandle.currentArg);
goto execute_Unseal;
}
if ((actionFun == ActionOrFun._InitializeMotionPlanning)) {
trace("<FunctionLog> Machine Prop_3-{0} executing Function InitializeMotionPlanning\n", myHandle.instance);
locals = new PRT_VALUE_ARRAY[4];
locals[3] = PRT_VALUE.PrtMkDefaultValue(Main.type_1_PRT_TYPE);
locals[2] = PRT_VALUE.PrtMkDefaultValue(Main.type_2_PRT_TYPE);
locals[1] = PRT_VALUE.PrtMkDefaultValue(Main.type_2_PRT_TYPE);
locals[0] = PRT_VALUE.PrtMkDefaultValue(Main.type_4_PRT_TYPE);
myHandle.cont.PushReturnTo(0, locals, myHandle.currentEvent, myHandle.currentArg);
goto execute_InitializeMotionPlanning;
}
if ((actionFun == ActionOrFun._CAT_CAGE_LOC)) {
trace("<FunctionLog> Machine Prop_3-{0} executing Function CAT_CAGE_LOC\n", myHandle.instance);
locals = null;
myHandle.cont.PushReturnTo(0, locals, myHandle.currentEvent, myHandle.currentArg);
goto execute_CAT_CAGE_LOC;
}
if ((actionFun == ActionOrFun._DOG_CAGE_LOC)) {
trace("<FunctionLog> Machine Prop_3-{0} executing Function DOG_CAGE_LOC\n", myHandle.instance);
locals = null;
myHandle.cont.PushReturnTo(0, locals, myHandle.currentEvent, myHandle.currentArg);
goto execute_DOG_CAGE_LOC;
}
if ((actionFun == ActionOrFun._MICE_CAGE_LOC)) {
trace("<FunctionLog> Machine Prop_3-{0} executing Function MICE_CAGE_LOC\n", myHandle.instance);
locals = null;
myHandle.cont.PushReturnTo(0, locals, myHandle.currentEvent, myHandle.currentArg);
goto execute_MICE_CAGE_LOC;
}
if ((actionFun == ActionOrFun._BATTERY_THRESHOLD)) {
trace("<FunctionLog> Machine Prop_3-{0} executing Function BATTERY_THRESHOLD\n", myHandle.instance);
locals = null;
myHandle.cont.PushReturnTo(0, locals, myHandle.currentEvent, myHandle.currentArg);
goto execute_BATTERY_THRESHOLD;
}
if ((actionFun == ActionOrFun._DOG)) {
trace("<FunctionLog> Machine Prop_3-{0} executing Function DOG\n", myHandle.instance);
locals = null;
myHandle.cont.PushReturnTo(0, locals, myHandle.currentEvent, myHandle.currentArg);
goto execute_DOG;
}
if ((actionFun == ActionOrFun._CAT)) {
trace("<FunctionLog> Machine Prop_3-{0} executing Function CAT\n", myHandle.instance);
locals = null;
myHandle.cont.PushReturnTo(0, locals, myHandle.currentEvent, myHandle.currentArg);
goto execute_CAT;
}
if ((actionFun == ActionOrFun._MICE)) {
trace("<FunctionLog> Machine Prop_3-{0} executing Function MICE\n", myHandle.instance);
locals = null;
myHandle.cont.PushReturnTo(0, locals, myHandle.currentEvent, myHandle.currentArg);
goto execute_MICE;
}
if ((actionFun == ActionOrFun._BATTERY_CHARGE_LOCATION)) {
trace("<FunctionLog> Machine Prop_3-{0} executing Function BATTERY_CHARGE_LOCATION\n", myHandle.instance);
locals = null;
myHandle.cont.PushReturnTo(0, locals, myHandle.currentEvent, myHandle.currentArg);
goto execute_BATTERY_CHARGE_LOCATION;
}
if ((actionFun == ActionOrFun._ROBOT_START_STATE)) {
trace("<FunctionLog> Machine Prop_3-{0} executing Function ROBOT_START_STATE\n", myHandle.instance);
locals = null;
myHandle.cont.PushReturnTo(0, locals, myHandle.currentEvent, myHandle.currentArg);
goto execute_ROBOT_START_STATE;
}
if ((actionFun == ActionOrFun._SIZE_OF_GRID)) {
trace("<FunctionLog> Machine Prop_3-{0} executing Function SIZE_OF_GRID\n", myHandle.instance);
locals = null;
myHandle.cont.PushReturnTo(0, locals, myHandle.currentEvent, myHandle.currentArg);
goto execute_SIZE_OF_GRID;
}
if ((actionFun == ActionOrFun._ROBOT_SCAN_LOCATIONS)) {
trace("<FunctionLog> Machine Prop_3-{0} executing Function ROBOT_SCAN_LOCATIONS\n", myHandle.instance);
locals = new PRT_VALUE_ARRAY[3];
locals[2] = PRT_VALUE.PrtMkDefaultValue(Main.type_2_PRT_TYPE);
locals[1] = PRT_VALUE.PrtMkDefaultValue(Main.type_2_PRT_TYPE);
locals[0] = PRT_VALUE.PrtMkDefaultValue(Main.type_1_PRT_TYPE);
myHandle.cont.PushReturnTo(0, locals, myHandle.currentEvent, myHandle.currentArg);
goto execute_ROBOT_SCAN_LOCATIONS;
}
if ((actionFun == ActionOrFun._GetStaticGoals)) {
trace("<FunctionLog> Machine Prop_3-{0} executing Function GetStaticGoals\n", myHandle.instance);
locals = new PRT_VALUE_ARRAY[1];
locals[0] = PRT_VALUE.PrtMkDefaultValue(Main.type_7_PRT_TYPE);
myHandle.cont.PushReturnTo(0, locals, myHandle.currentEvent, myHandle.currentArg);
goto execute_GetStaticGoals;
}
if ((actionFun == ActionOrFun._GetStaticObstacles)) {
trace("<FunctionLog> Machine Prop_3-{0} executing Function GetStaticObstacles\n", myHandle.instance);
locals = new PRT_VALUE_ARRAY[1];
locals[0] = PRT_VALUE.PrtMkDefaultValue(Main.type_2_PRT_TYPE);
myHandle.cont.PushReturnTo(0, locals, myHandle.currentEvent, myHandle.currentArg);
goto execute_GetStaticObstacles;
}
if ((actionFun == ActionOrFun._Prop_3_ignore)) {
trace("<FunctionLog> Machine Prop_3-{0} executing Function ignore\n", myHandle.instance);
locals = null;
myHandle.cont.PushReturnTo(0, locals, myHandle.currentEvent, myHandle.currentArg);
goto execute_ignore;
}
if ((actionFun == ActionOrFun._Prop_3_AnonFun0)) {
locals = null;
myHandle.cont.PushReturnTo(0, locals, myHandle.currentEvent, myHandle.currentArg);
goto execute_AnonFun0;
}
if ((actionFun == ActionOrFun._Prop_3_AnonFun1)) {
locals = null;
myHandle.cont.PushReturnTo(0, locals, myHandle.currentEvent, myHandle.currentArg);
goto execute_AnonFun1;
}
if ((actionFun == ActionOrFun._Prop_3_AnonFun2)) {
locals = null;
myHandle.cont.PushReturnTo(0, locals, myHandle.currentEvent, myHandle.currentArg);
goto execute_AnonFun2;
}
assert(false, "Internal error");

;


execute_ResetObstacle:
while (!doPop) {
Main.ResetObstacle(myHandle, myHandle.cont);
doPop = ProcessContinuation();

}
return;

;


execute_Seal:
while (!doPop) {
Main.Seal(myHandle, myHandle.cont);
doPop = ProcessContinuation();

}
return;

;


execute_Unseal:
while (!doPop) {
Main.Unseal(myHandle, myHandle.cont);
doPop = ProcessContinuation();

}
return;

;


execute_InitializeMotionPlanning:
while (!doPop) {
Main.InitializeMotionPlanning(myHandle, myHandle.cont);
doPop = ProcessContinuation();

}
return;

;


execute_CAT_CAGE_LOC:
while (!doPop) {
Main.CAT_CAGE_LOC(myHandle, myHandle.cont);
doPop = ProcessContinuation();

}
return;

;


execute_DOG_CAGE_LOC:
while (!doPop) {
Main.DOG_CAGE_LOC(myHandle, myHandle.cont);
doPop = ProcessContinuation();

}
return;

;


execute_MICE_CAGE_LOC:
while (!doPop) {
Main.MICE_CAGE_LOC(myHandle, myHandle.cont);
doPop = ProcessContinuation();

}
return;

;


execute_BATTERY_THRESHOLD:
while (!doPop) {
Main.BATTERY_THRESHOLD(myHandle, myHandle.cont);
doPop = ProcessContinuation();

}
return;

;


execute_DOG:
while (!doPop) {
Main.DOG(myHandle, myHandle.cont);
doPop = ProcessContinuation();

}
return;

;


execute_CAT:
while (!doPop) {
Main.CAT(myHandle, myHandle.cont);
doPop = ProcessContinuation();

}
return;

;


execute_MICE:
while (!doPop) {
Main.MICE(myHandle, myHandle.cont);
doPop = ProcessContinuation();

}
return;

;


execute_BATTERY_CHARGE_LOCATION:
while (!doPop) {
Main.BATTERY_CHARGE_LOCATION(myHandle, myHandle.cont);
doPop = ProcessContinuation();

}
return;

;


execute_ROBOT_START_STATE:
while (!doPop) {
Main.ROBOT_START_STATE(myHandle, myHandle.cont);
doPop = ProcessContinuation();

}
return;

;


execute_SIZE_OF_GRID:
while (!doPop) {
Main.SIZE_OF_GRID(myHandle, myHandle.cont);
doPop = ProcessContinuation();

}
return;

;


execute_ROBOT_SCAN_LOCATIONS:
while (!doPop) {
Main.ROBOT_SCAN_LOCATIONS(myHandle, myHandle.cont);
doPop = ProcessContinuation();

}
return;

;


execute_GetStaticGoals:
while (!doPop) {
Main.GetStaticGoals(myHandle, myHandle.cont);
doPop = ProcessContinuation();

}
return;

;


execute_GetStaticObstacles:
while (!doPop) {
Main.GetStaticObstacles(myHandle, myHandle.cont);
doPop = ProcessContinuation();

}
return;

;


execute_ignore:
while (!doPop) {
ignore(myHandle.cont);
doPop = ProcessContinuation();

}
return;

;


execute_AnonFun0:
while (!doPop) {
AnonFun0(myHandle.cont);
doPop = ProcessContinuation();

}
return;

;


execute_AnonFun1:
while (!doPop) {
AnonFun1(myHandle.cont);
doPop = ProcessContinuation();

}
return;

;


execute_AnonFun2:
while (!doPop) {
AnonFun2(myHandle.cont);
doPop = ProcessContinuation();

}
return;

;

}
void ignore(Continuation entryCtxt) {
PRT_VALUE_ARRAY locals;
SM_EVENT currentEvent;
PRT_VALUE currentArg;
StackFrame retTo_92;

dummy:
retTo_92 = entryCtxt.PopReturnTo();
locals = retTo_92.locals;
currentEvent = retTo_92.currentEvent;
currentArg = retTo_92.currentArg;
if ((retTo_92.pc == 0)) {
goto start;
}
assert(false, "Internal error");

start:

;
entryCtxt.Return();
return;

;

}
void AnonFun0(Continuation entryCtxt) {
PRT_VALUE_ARRAY locals;
SM_EVENT currentEvent;
PRT_VALUE currentArg;
StackFrame retTo_93;

dummy:
retTo_93 = entryCtxt.PopReturnTo();
locals = retTo_93.locals;
currentEvent = retTo_93.currentEvent;
currentArg = retTo_93.currentArg;
if ((retTo_93.pc == 0)) {
goto start;
}
assert(false, "Internal error");

start:

;
entryCtxt.Return();
return;

;

}
void AnonFun1(Continuation entryCtxt) {
PRT_VALUE_ARRAY locals;
SM_EVENT currentEvent;
PRT_VALUE currentArg;
PRT_VALUE tmpVar_100;
PRT_VALUE tmp_140;
PRT_VALUE tmpPayload_47;
StackFrame retTo_94;

dummy:
retTo_94 = entryCtxt.PopReturnTo();
locals = retTo_94.locals;
currentEvent = retTo_94.currentEvent;
currentArg = retTo_94.currentArg;
if ((retTo_94.pc == 0)) {
goto start;
}
assert(false, "Internal error");

start:
tmpVar_100 = PRT_VALUE.PrtCastValue(currentArg, Main.type_1_PRT_TYPE);
noAnimals = PRT_VALUE.PrtCloneValue(tmpVar_100);
tmp_140 = PRT_VALUE.PrtMkDefaultValue(Main.type_12_PRT_TYPE);
PRT_VALUE.PrtPrimSetEvent(tmp_140, Main.local_SM_EVENT);
tmpPayload_47 = PRT_VALUE.PrtMkDefaultValue(Main.type_0_PRT_TYPE);
assert((tmp_140.ev != null), "(177, 4): Raised event must be non-null");
trace("<RaiseLog> Machine Prop_3-{0} raised Event {1}\n", myHandle.instance, tmp_140.ev.name);
myHandle.currentEvent = tmp_140.ev;
myHandle.currentArg = tmpPayload_47;
entryCtxt.Raise();
return;

;
entryCtxt.Return();
return;

;

}
void AnonFun2(Continuation entryCtxt) {
PRT_VALUE_ARRAY locals;
SM_EVENT currentEvent;
PRT_VALUE currentArg;
PRT_VALUE tmp_141;
PRT_VALUE tmpVar_101;
PRT_VALUE tmp_142;
bool tmpVar_102;
PRT_VALUE tmpVar_103;
PRT_VALUE tmp_143;
PRT_VALUE tmpPayload_48;
StackFrame retTo_95;

dummy:
retTo_95 = entryCtxt.PopReturnTo();
locals = retTo_95.locals;
currentEvent = retTo_95.currentEvent;
currentArg = retTo_95.currentArg;
if ((retTo_95.pc == 0)) {
goto start;
}
assert(false, "Internal error");

start:
tmp_141 = PRT_VALUE.PrtMkDefaultValue(Main.type_1_PRT_TYPE);
PRT_VALUE.PrtPrimSetInt(tmp_141, 1);
tmpVar_101 = PRT_VALUE.PrtMkDefaultValue(Main.type_1_PRT_TYPE);
PRT_VALUE.PrtPrimSetInt(tmpVar_101, (noAnimals.nt - tmp_141.nt));
noAnimals = PRT_VALUE.PrtCloneValue(tmpVar_101);
tmp_142 = PRT_VALUE.PrtMkDefaultValue(Main.type_1_PRT_TYPE);
PRT_VALUE.PrtPrimSetInt(tmp_142, 0);
tmpVar_102 = PRT_VALUE.PrtIsEqualValue(noAnimals, tmp_142);
tmpVar_103 = PRT_VALUE.PrtMkDefaultValue(Main.type_5_PRT_TYPE);
PRT_VALUE.PrtPrimSetBool(tmpVar_103, tmpVar_102);
if (!tmpVar_103.bl) {
goto AnonFun2_if_3_else;
}
tmp_143 = PRT_VALUE.PrtMkDefaultValue(Main.type_12_PRT_TYPE);
PRT_VALUE.PrtPrimSetEvent(tmp_143, Main.local_SM_EVENT);
tmpPayload_48 = PRT_VALUE.PrtMkDefaultValue(Main.type_0_PRT_TYPE);
assert((tmp_143.ev != null), "(184, 63): Raised event must be non-null");
trace("<RaiseLog> Machine Prop_3-{0} raised Event {1}\n", myHandle.instance, tmp_143.ev.name);
myHandle.currentEvent = tmp_143.ev;
myHandle.currentArg = tmpPayload_48;
entryCtxt.Raise();
return;
goto AnonFun2_if_3_end;
AnonFun2_if_3_else:

;

AnonFun2_if_3_end:

;

;
entryCtxt.Return();
return;

;

}
};

class MACHINE_Prop_10a{
SM_HANDLE myHandle;
void Prop_10a_Init_CalculateDeferredAndActionSet() {

dummy:
myHandle.stack.deferredSet = new SM_EVENT_SET;
myHandle.stack.actionSet = new SM_EVENT_SET;
myHandle.stack.AddStackDeferredSet(myHandle.stack.deferredSet);
myHandle.stack.deferredSet = (myHandle.stack.deferredSet - Main.M_hDog_SM_EVENT);
myHandle.stack.AddStackActionSet(myHandle.stack.actionSet);
myHandle.stack.actionSet = (myHandle.stack.actionSet - Main.M_hDog_SM_EVENT);
myHandle.stack.es = new SM_EVENT_ARRAY[0];
myHandle.stack.as = new ActionOrFun_ARRAY[0];

;

}
void Prop_10a_WaitrDog_CalculateDeferredAndActionSet() {

dummy:
myHandle.stack.deferredSet = new SM_EVENT_SET;
myHandle.stack.actionSet = new SM_EVENT_SET;
myHandle.stack.AddStackDeferredSet(myHandle.stack.deferredSet);
myHandle.stack.deferredSet = (myHandle.stack.deferredSet - Main.M_rDog_SM_EVENT);
myHandle.stack.AddStackActionSet(myHandle.stack.actionSet);
myHandle.stack.actionSet = (myHandle.stack.actionSet - Main.M_rDog_SM_EVENT);
myHandle.stack.es = new SM_EVENT_ARRAY[0];
myHandle.stack.as = new ActionOrFun_ARRAY[0];

;

}
void Prop_10a_Done_CalculateDeferredAndActionSet() {

dummy:
myHandle.stack.deferredSet = new SM_EVENT_SET;
myHandle.stack.actionSet = new SM_EVENT_SET;
myHandle.stack.AddStackDeferredSet(myHandle.stack.deferredSet);
myHandle.stack.AddStackActionSet(myHandle.stack.actionSet);
myHandle.stack.es = new SM_EVENT_ARRAY[0];
myHandle.stack.as = new ActionOrFun_ARRAY[0];

;

}
void Start() {

dummy:
Run(Main.Prop_10a_Init_SM_STATE);
if ((myHandle.currentEvent == Main.halt_SM_EVENT)) {
myHandle.stack = null;
myHandle.buffer = null;
myHandle.currentArg = null;
SM_HANDLE.halted = (SM_HANDLE.halted + myHandle);
SM_HANDLE.enabled = (SM_HANDLE.enabled - myHandle);
return;

}
trace("<StateLog> Unhandled event exception by machine Prop_10a-{0}\n", myHandle.instance);
assert(false, "Unhandled event exception by machine Prop_10a");

;

}
void Run(SM_STATE state) {
bool doPop;
bool hasNullTransitionOrAction;

init:
myHandle.Push();
myHandle.stack.state = state;
doPop = RunHelper(true);
while (!doPop) {
hasNullTransitionOrAction = myHandle.stack.HasNullTransitionOrAction();
myHandle.DequeueEvent(hasNullTransitionOrAction);
doPop = RunHelper(false);

}
myHandle.Pop();

;

}
void TraceEnterState(SM_STATE state) {

init:
if ((state == Main.Prop_10a_Init_SM_STATE)) {
trace("<StateLog> Machine Prop_10a-{0} entering State Init\n", myHandle.instance);
return;

}
if ((state == Main.Prop_10a_WaitrDog_SM_STATE)) {
trace("<StateLog> Machine Prop_10a-{0} entering State WaitrDog\n", myHandle.instance);
return;

}
if ((state == Main.Prop_10a_Done_SM_STATE)) {
trace("<StateLog> Machine Prop_10a-{0} entering State Done\n", myHandle.instance);
return;

}
assert(false, "Internal error");

;

}
void TraceExitState(SM_STATE state) {

init:
if ((state == Main.Prop_10a_Init_SM_STATE)) {
trace("<StateLog> Machine Prop_10a-{0} exiting State Init\n", myHandle.instance);
return;

}
if ((state == Main.Prop_10a_WaitrDog_SM_STATE)) {
trace("<StateLog> Machine Prop_10a-{0} exiting State WaitrDog\n", myHandle.instance);
return;

}
if ((state == Main.Prop_10a_Done_SM_STATE)) {
trace("<StateLog> Machine Prop_10a-{0} exiting State Done\n", myHandle.instance);
return;

}
assert(false, "Internal error");

;

}
void CalculateDeferredAndActionSet(SM_STATE state) {

init:
if ((state == Main.Prop_10a_Init_SM_STATE)) {
Prop_10a_Init_CalculateDeferredAndActionSet();
return;

}
if ((state == Main.Prop_10a_WaitrDog_SM_STATE)) {
Prop_10a_WaitrDog_CalculateDeferredAndActionSet();
return;

}
if ((state == Main.Prop_10a_Done_SM_STATE)) {
Prop_10a_Done_CalculateDeferredAndActionSet();
return;

}
assert(false, "Internal error");

;

}
bool RunHelper(bool start) {
SM_STATE state;
SM_TRANSITION transition;
ActionOrFun actionFun;

init:
state = myHandle.stack.state;
if (start) {
goto enter;
} else {
goto handle;
}

;


enter:
state = myHandle.stack.state;
TraceEnterState(state);
if ((state.temperature == StateTemperature.Hot)) {
SM_HANDLE.hot = (SM_HANDLE.hot + myHandle);

} else {
SM_HANDLE.hot = (SM_HANDLE.hot - myHandle);

}
CalculateDeferredAndActionSet(state);
actionFun = state.entryFun;

;


execute:
ReentrancyHelper(actionFun);
if ((myHandle.cont.reason == ContinuationReason.Raise)) {
goto handle;
}
myHandle.currentEvent = null;
myHandle.currentArg = PRT_VALUE.PrtMkDefaultValue(Main.type_0_PRT_TYPE);
if ((myHandle.cont.reason != ContinuationReason.Pop)) {
return false;

}
TraceExitState(state);
ReentrancyHelper(state.exitFun);
return true;

;


handle:
if ((myHandle.currentEvent in myHandle.stack.actionSet)) {
actionFun = myHandle.stack.Find(myHandle.currentEvent);
goto execute;
}
transition = state.FindPushTransition(myHandle.currentEvent);
if ((transition != null)) {
Run(transition.to);
if ((myHandle.currentEvent == null)) {
return false;

} else {
goto handle;
}

}
TraceExitState(state);
ReentrancyHelper(state.exitFun);
transition = state.FindTransition(myHandle.currentEvent);
if ((transition == null)) {
return true;

}
ReentrancyHelper(transition.fun);
myHandle.stack.state = transition.to;
state = myHandle.stack.state;
goto enter;
;

}
bool ProcessContinuation() {
bool doPop;

init:
if ((myHandle.cont.reason == ContinuationReason.Return)) {
return true;

}
if ((myHandle.cont.reason == ContinuationReason.Pop)) {
return true;

}
if ((myHandle.cont.reason == ContinuationReason.Raise)) {
return true;

}
if ((myHandle.cont.reason == ContinuationReason.Receive)) {
myHandle.DequeueEvent(false);
return false;

}
if ((myHandle.cont.reason == ContinuationReason.Nondet)) {
myHandle.cont.nondet = choose(bool);
return false;

}
if ((myHandle.cont.reason == ContinuationReason.NewMachine)) {
yield;
return false;

}
if ((myHandle.cont.reason == ContinuationReason.Send)) {
yield;
return false;

}

;

}
void ReentrancyHelper(ActionOrFun actionFun) {
PRT_VALUE_ARRAY locals;
bool doPop;

init:
doPop = false;
myHandle.cont.Reset();
if ((actionFun == ActionOrFun._ResetObstacle)) {
trace("<FunctionLog> Machine Prop_10a-{0} executing Function ResetObstacle\n", myHandle.instance);
locals = null;
myHandle.cont.PushReturnTo(0, locals, myHandle.currentEvent, myHandle.currentArg);
goto execute_ResetObstacle;
}
if ((actionFun == ActionOrFun._Seal)) {
trace("<FunctionLog> Machine Prop_10a-{0} executing Function Seal\n", myHandle.instance);
locals = null;
myHandle.cont.PushReturnTo(0, locals, myHandle.currentEvent, myHandle.currentArg);
goto execute_Seal;
}
if ((actionFun == ActionOrFun._Unseal)) {
trace("<FunctionLog> Machine Prop_10a-{0} executing Function Unseal\n", myHandle.instance);
locals = null;
myHandle.cont.PushReturnTo(0, locals, myHandle.currentEvent, myHandle.currentArg);
goto execute_Unseal;
}
if ((actionFun == ActionOrFun._InitializeMotionPlanning)) {
trace("<FunctionLog> Machine Prop_10a-{0} executing Function InitializeMotionPlanning\n", myHandle.instance);
locals = new PRT_VALUE_ARRAY[4];
locals[3] = PRT_VALUE.PrtMkDefaultValue(Main.type_1_PRT_TYPE);
locals[2] = PRT_VALUE.PrtMkDefaultValue(Main.type_2_PRT_TYPE);
locals[1] = PRT_VALUE.PrtMkDefaultValue(Main.type_2_PRT_TYPE);
locals[0] = PRT_VALUE.PrtMkDefaultValue(Main.type_4_PRT_TYPE);
myHandle.cont.PushReturnTo(0, locals, myHandle.currentEvent, myHandle.currentArg);
goto execute_InitializeMotionPlanning;
}
if ((actionFun == ActionOrFun._CAT_CAGE_LOC)) {
trace("<FunctionLog> Machine Prop_10a-{0} executing Function CAT_CAGE_LOC\n", myHandle.instance);
locals = null;
myHandle.cont.PushReturnTo(0, locals, myHandle.currentEvent, myHandle.currentArg);
goto execute_CAT_CAGE_LOC;
}
if ((actionFun == ActionOrFun._DOG_CAGE_LOC)) {
trace("<FunctionLog> Machine Prop_10a-{0} executing Function DOG_CAGE_LOC\n", myHandle.instance);
locals = null;
myHandle.cont.PushReturnTo(0, locals, myHandle.currentEvent, myHandle.currentArg);
goto execute_DOG_CAGE_LOC;
}
if ((actionFun == ActionOrFun._MICE_CAGE_LOC)) {
trace("<FunctionLog> Machine Prop_10a-{0} executing Function MICE_CAGE_LOC\n", myHandle.instance);
locals = null;
myHandle.cont.PushReturnTo(0, locals, myHandle.currentEvent, myHandle.currentArg);
goto execute_MICE_CAGE_LOC;
}
if ((actionFun == ActionOrFun._BATTERY_THRESHOLD)) {
trace("<FunctionLog> Machine Prop_10a-{0} executing Function BATTERY_THRESHOLD\n", myHandle.instance);
locals = null;
myHandle.cont.PushReturnTo(0, locals, myHandle.currentEvent, myHandle.currentArg);
goto execute_BATTERY_THRESHOLD;
}
if ((actionFun == ActionOrFun._DOG)) {
trace("<FunctionLog> Machine Prop_10a-{0} executing Function DOG\n", myHandle.instance);
locals = null;
myHandle.cont.PushReturnTo(0, locals, myHandle.currentEvent, myHandle.currentArg);
goto execute_DOG;
}
if ((actionFun == ActionOrFun._CAT)) {
trace("<FunctionLog> Machine Prop_10a-{0} executing Function CAT\n", myHandle.instance);
locals = null;
myHandle.cont.PushReturnTo(0, locals, myHandle.currentEvent, myHandle.currentArg);
goto execute_CAT;
}
if ((actionFun == ActionOrFun._MICE)) {
trace("<FunctionLog> Machine Prop_10a-{0} executing Function MICE\n", myHandle.instance);
locals = null;
myHandle.cont.PushReturnTo(0, locals, myHandle.currentEvent, myHandle.currentArg);
goto execute_MICE;
}
if ((actionFun == ActionOrFun._BATTERY_CHARGE_LOCATION)) {
trace("<FunctionLog> Machine Prop_10a-{0} executing Function BATTERY_CHARGE_LOCATION\n", myHandle.instance);
locals = null;
myHandle.cont.PushReturnTo(0, locals, myHandle.currentEvent, myHandle.currentArg);
goto execute_BATTERY_CHARGE_LOCATION;
}
if ((actionFun == ActionOrFun._ROBOT_START_STATE)) {
trace("<FunctionLog> Machine Prop_10a-{0} executing Function ROBOT_START_STATE\n", myHandle.instance);
locals = null;
myHandle.cont.PushReturnTo(0, locals, myHandle.currentEvent, myHandle.currentArg);
goto execute_ROBOT_START_STATE;
}
if ((actionFun == ActionOrFun._SIZE_OF_GRID)) {
trace("<FunctionLog> Machine Prop_10a-{0} executing Function SIZE_OF_GRID\n", myHandle.instance);
locals = null;
myHandle.cont.PushReturnTo(0, locals, myHandle.currentEvent, myHandle.currentArg);
goto execute_SIZE_OF_GRID;
}
if ((actionFun == ActionOrFun._ROBOT_SCAN_LOCATIONS)) {
trace("<FunctionLog> Machine Prop_10a-{0} executing Function ROBOT_SCAN_LOCATIONS\n", myHandle.instance);
locals = new PRT_VALUE_ARRAY[3];
locals[2] = PRT_VALUE.PrtMkDefaultValue(Main.type_2_PRT_TYPE);
locals[1] = PRT_VALUE.PrtMkDefaultValue(Main.type_2_PRT_TYPE);
locals[0] = PRT_VALUE.PrtMkDefaultValue(Main.type_1_PRT_TYPE);
myHandle.cont.PushReturnTo(0, locals, myHandle.currentEvent, myHandle.currentArg);
goto execute_ROBOT_SCAN_LOCATIONS;
}
if ((actionFun == ActionOrFun._GetStaticGoals)) {
trace("<FunctionLog> Machine Prop_10a-{0} executing Function GetStaticGoals\n", myHandle.instance);
locals = new PRT_VALUE_ARRAY[1];
locals[0] = PRT_VALUE.PrtMkDefaultValue(Main.type_7_PRT_TYPE);
myHandle.cont.PushReturnTo(0, locals, myHandle.currentEvent, myHandle.currentArg);
goto execute_GetStaticGoals;
}
if ((actionFun == ActionOrFun._GetStaticObstacles)) {
trace("<FunctionLog> Machine Prop_10a-{0} executing Function GetStaticObstacles\n", myHandle.instance);
locals = new PRT_VALUE_ARRAY[1];
locals[0] = PRT_VALUE.PrtMkDefaultValue(Main.type_2_PRT_TYPE);
myHandle.cont.PushReturnTo(0, locals, myHandle.currentEvent, myHandle.currentArg);
goto execute_GetStaticObstacles;
}
if ((actionFun == ActionOrFun._Prop_10a_ignore)) {
trace("<FunctionLog> Machine Prop_10a-{0} executing Function ignore\n", myHandle.instance);
locals = null;
myHandle.cont.PushReturnTo(0, locals, myHandle.currentEvent, myHandle.currentArg);
goto execute_ignore;
}
if ((actionFun == ActionOrFun._Prop_10a_AnonFun0)) {
locals = null;
myHandle.cont.PushReturnTo(0, locals, myHandle.currentEvent, myHandle.currentArg);
goto execute_AnonFun0;
}
assert(false, "Internal error");

;


execute_ResetObstacle:
while (!doPop) {
Main.ResetObstacle(myHandle, myHandle.cont);
doPop = ProcessContinuation();

}
return;

;


execute_Seal:
while (!doPop) {
Main.Seal(myHandle, myHandle.cont);
doPop = ProcessContinuation();

}
return;

;


execute_Unseal:
while (!doPop) {
Main.Unseal(myHandle, myHandle.cont);
doPop = ProcessContinuation();

}
return;

;


execute_InitializeMotionPlanning:
while (!doPop) {
Main.InitializeMotionPlanning(myHandle, myHandle.cont);
doPop = ProcessContinuation();

}
return;

;


execute_CAT_CAGE_LOC:
while (!doPop) {
Main.CAT_CAGE_LOC(myHandle, myHandle.cont);
doPop = ProcessContinuation();

}
return;

;


execute_DOG_CAGE_LOC:
while (!doPop) {
Main.DOG_CAGE_LOC(myHandle, myHandle.cont);
doPop = ProcessContinuation();

}
return;

;


execute_MICE_CAGE_LOC:
while (!doPop) {
Main.MICE_CAGE_LOC(myHandle, myHandle.cont);
doPop = ProcessContinuation();

}
return;

;


execute_BATTERY_THRESHOLD:
while (!doPop) {
Main.BATTERY_THRESHOLD(myHandle, myHandle.cont);
doPop = ProcessContinuation();

}
return;

;


execute_DOG:
while (!doPop) {
Main.DOG(myHandle, myHandle.cont);
doPop = ProcessContinuation();

}
return;

;


execute_CAT:
while (!doPop) {
Main.CAT(myHandle, myHandle.cont);
doPop = ProcessContinuation();

}
return;

;


execute_MICE:
while (!doPop) {
Main.MICE(myHandle, myHandle.cont);
doPop = ProcessContinuation();

}
return;

;


execute_BATTERY_CHARGE_LOCATION:
while (!doPop) {
Main.BATTERY_CHARGE_LOCATION(myHandle, myHandle.cont);
doPop = ProcessContinuation();

}
return;

;


execute_ROBOT_START_STATE:
while (!doPop) {
Main.ROBOT_START_STATE(myHandle, myHandle.cont);
doPop = ProcessContinuation();

}
return;

;


execute_SIZE_OF_GRID:
while (!doPop) {
Main.SIZE_OF_GRID(myHandle, myHandle.cont);
doPop = ProcessContinuation();

}
return;

;


execute_ROBOT_SCAN_LOCATIONS:
while (!doPop) {
Main.ROBOT_SCAN_LOCATIONS(myHandle, myHandle.cont);
doPop = ProcessContinuation();

}
return;

;


execute_GetStaticGoals:
while (!doPop) {
Main.GetStaticGoals(myHandle, myHandle.cont);
doPop = ProcessContinuation();

}
return;

;


execute_GetStaticObstacles:
while (!doPop) {
Main.GetStaticObstacles(myHandle, myHandle.cont);
doPop = ProcessContinuation();

}
return;

;


execute_ignore:
while (!doPop) {
ignore(myHandle.cont);
doPop = ProcessContinuation();

}
return;

;


execute_AnonFun0:
while (!doPop) {
AnonFun0(myHandle.cont);
doPop = ProcessContinuation();

}
return;

;

}
void ignore(Continuation entryCtxt) {
PRT_VALUE_ARRAY locals;
SM_EVENT currentEvent;
PRT_VALUE currentArg;
StackFrame retTo_96;

dummy:
retTo_96 = entryCtxt.PopReturnTo();
locals = retTo_96.locals;
currentEvent = retTo_96.currentEvent;
currentArg = retTo_96.currentArg;
if ((retTo_96.pc == 0)) {
goto start;
}
assert(false, "Internal error");

start:

;
entryCtxt.Return();
return;

;

}
void AnonFun0(Continuation entryCtxt) {
PRT_VALUE_ARRAY locals;
SM_EVENT currentEvent;
PRT_VALUE currentArg;
StackFrame retTo_97;

dummy:
retTo_97 = entryCtxt.PopReturnTo();
locals = retTo_97.locals;
currentEvent = retTo_97.currentEvent;
currentArg = retTo_97.currentArg;
if ((retTo_97.pc == 0)) {
goto start;
}
assert(false, "Internal error");

start:

;
entryCtxt.Return();
return;

;

}
};

class MACHINE_Prop_10b{
SM_HANDLE myHandle;
void Prop_10b_Init_CalculateDeferredAndActionSet() {

dummy:
myHandle.stack.deferredSet = new SM_EVENT_SET;
myHandle.stack.actionSet = new SM_EVENT_SET;
myHandle.stack.AddStackDeferredSet(myHandle.stack.deferredSet);
myHandle.stack.deferredSet = (myHandle.stack.deferredSet - Main.M_hCat_SM_EVENT);
myHandle.stack.AddStackActionSet(myHandle.stack.actionSet);
myHandle.stack.actionSet = (myHandle.stack.actionSet - Main.M_hCat_SM_EVENT);
myHandle.stack.es = new SM_EVENT_ARRAY[0];
myHandle.stack.as = new ActionOrFun_ARRAY[0];

;

}
void Prop_10b_WaitrCat_CalculateDeferredAndActionSet() {

dummy:
myHandle.stack.deferredSet = new SM_EVENT_SET;
myHandle.stack.actionSet = new SM_EVENT_SET;
myHandle.stack.AddStackDeferredSet(myHandle.stack.deferredSet);
myHandle.stack.deferredSet = (myHandle.stack.deferredSet - Main.M_rCat_SM_EVENT);
myHandle.stack.AddStackActionSet(myHandle.stack.actionSet);
myHandle.stack.actionSet = (myHandle.stack.actionSet - Main.M_rCat_SM_EVENT);
myHandle.stack.es = new SM_EVENT_ARRAY[0];
myHandle.stack.as = new ActionOrFun_ARRAY[0];

;

}
void Prop_10b_Done_CalculateDeferredAndActionSet() {

dummy:
myHandle.stack.deferredSet = new SM_EVENT_SET;
myHandle.stack.actionSet = new SM_EVENT_SET;
myHandle.stack.AddStackDeferredSet(myHandle.stack.deferredSet);
myHandle.stack.AddStackActionSet(myHandle.stack.actionSet);
myHandle.stack.es = new SM_EVENT_ARRAY[0];
myHandle.stack.as = new ActionOrFun_ARRAY[0];

;

}
void Start() {

dummy:
Run(Main.Prop_10b_Init_SM_STATE);
if ((myHandle.currentEvent == Main.halt_SM_EVENT)) {
myHandle.stack = null;
myHandle.buffer = null;
myHandle.currentArg = null;
SM_HANDLE.halted = (SM_HANDLE.halted + myHandle);
SM_HANDLE.enabled = (SM_HANDLE.enabled - myHandle);
return;

}
trace("<StateLog> Unhandled event exception by machine Prop_10b-{0}\n", myHandle.instance);
assert(false, "Unhandled event exception by machine Prop_10b");

;

}
void Run(SM_STATE state) {
bool doPop;
bool hasNullTransitionOrAction;

init:
myHandle.Push();
myHandle.stack.state = state;
doPop = RunHelper(true);
while (!doPop) {
hasNullTransitionOrAction = myHandle.stack.HasNullTransitionOrAction();
myHandle.DequeueEvent(hasNullTransitionOrAction);
doPop = RunHelper(false);

}
myHandle.Pop();

;

}
void TraceEnterState(SM_STATE state) {

init:
if ((state == Main.Prop_10b_Init_SM_STATE)) {
trace("<StateLog> Machine Prop_10b-{0} entering State Init\n", myHandle.instance);
return;

}
if ((state == Main.Prop_10b_WaitrCat_SM_STATE)) {
trace("<StateLog> Machine Prop_10b-{0} entering State WaitrCat\n", myHandle.instance);
return;

}
if ((state == Main.Prop_10b_Done_SM_STATE)) {
trace("<StateLog> Machine Prop_10b-{0} entering State Done\n", myHandle.instance);
return;

}
assert(false, "Internal error");

;

}
void TraceExitState(SM_STATE state) {

init:
if ((state == Main.Prop_10b_Init_SM_STATE)) {
trace("<StateLog> Machine Prop_10b-{0} exiting State Init\n", myHandle.instance);
return;

}
if ((state == Main.Prop_10b_WaitrCat_SM_STATE)) {
trace("<StateLog> Machine Prop_10b-{0} exiting State WaitrCat\n", myHandle.instance);
return;

}
if ((state == Main.Prop_10b_Done_SM_STATE)) {
trace("<StateLog> Machine Prop_10b-{0} exiting State Done\n", myHandle.instance);
return;

}
assert(false, "Internal error");

;

}
void CalculateDeferredAndActionSet(SM_STATE state) {

init:
if ((state == Main.Prop_10b_Init_SM_STATE)) {
Prop_10b_Init_CalculateDeferredAndActionSet();
return;

}
if ((state == Main.Prop_10b_WaitrCat_SM_STATE)) {
Prop_10b_WaitrCat_CalculateDeferredAndActionSet();
return;

}
if ((state == Main.Prop_10b_Done_SM_STATE)) {
Prop_10b_Done_CalculateDeferredAndActionSet();
return;

}
assert(false, "Internal error");

;

}
bool RunHelper(bool start) {
SM_STATE state;
SM_TRANSITION transition;
ActionOrFun actionFun;

init:
state = myHandle.stack.state;
if (start) {
goto enter;
} else {
goto handle;
}

;


enter:
state = myHandle.stack.state;
TraceEnterState(state);
if ((state.temperature == StateTemperature.Hot)) {
SM_HANDLE.hot = (SM_HANDLE.hot + myHandle);

} else {
SM_HANDLE.hot = (SM_HANDLE.hot - myHandle);

}
CalculateDeferredAndActionSet(state);
actionFun = state.entryFun;

;


execute:
ReentrancyHelper(actionFun);
if ((myHandle.cont.reason == ContinuationReason.Raise)) {
goto handle;
}
myHandle.currentEvent = null;
myHandle.currentArg = PRT_VALUE.PrtMkDefaultValue(Main.type_0_PRT_TYPE);
if ((myHandle.cont.reason != ContinuationReason.Pop)) {
return false;

}
TraceExitState(state);
ReentrancyHelper(state.exitFun);
return true;

;


handle:
if ((myHandle.currentEvent in myHandle.stack.actionSet)) {
actionFun = myHandle.stack.Find(myHandle.currentEvent);
goto execute;
}
transition = state.FindPushTransition(myHandle.currentEvent);
if ((transition != null)) {
Run(transition.to);
if ((myHandle.currentEvent == null)) {
return false;

} else {
goto handle;
}

}
TraceExitState(state);
ReentrancyHelper(state.exitFun);
transition = state.FindTransition(myHandle.currentEvent);
if ((transition == null)) {
return true;

}
ReentrancyHelper(transition.fun);
myHandle.stack.state = transition.to;
state = myHandle.stack.state;
goto enter;
;

}
bool ProcessContinuation() {
bool doPop;

init:
if ((myHandle.cont.reason == ContinuationReason.Return)) {
return true;

}
if ((myHandle.cont.reason == ContinuationReason.Pop)) {
return true;

}
if ((myHandle.cont.reason == ContinuationReason.Raise)) {
return true;

}
if ((myHandle.cont.reason == ContinuationReason.Receive)) {
myHandle.DequeueEvent(false);
return false;

}
if ((myHandle.cont.reason == ContinuationReason.Nondet)) {
myHandle.cont.nondet = choose(bool);
return false;

}
if ((myHandle.cont.reason == ContinuationReason.NewMachine)) {
yield;
return false;

}
if ((myHandle.cont.reason == ContinuationReason.Send)) {
yield;
return false;

}

;

}
void ReentrancyHelper(ActionOrFun actionFun) {
PRT_VALUE_ARRAY locals;
bool doPop;

init:
doPop = false;
myHandle.cont.Reset();
if ((actionFun == ActionOrFun._ResetObstacle)) {
trace("<FunctionLog> Machine Prop_10b-{0} executing Function ResetObstacle\n", myHandle.instance);
locals = null;
myHandle.cont.PushReturnTo(0, locals, myHandle.currentEvent, myHandle.currentArg);
goto execute_ResetObstacle;
}
if ((actionFun == ActionOrFun._Seal)) {
trace("<FunctionLog> Machine Prop_10b-{0} executing Function Seal\n", myHandle.instance);
locals = null;
myHandle.cont.PushReturnTo(0, locals, myHandle.currentEvent, myHandle.currentArg);
goto execute_Seal;
}
if ((actionFun == ActionOrFun._Unseal)) {
trace("<FunctionLog> Machine Prop_10b-{0} executing Function Unseal\n", myHandle.instance);
locals = null;
myHandle.cont.PushReturnTo(0, locals, myHandle.currentEvent, myHandle.currentArg);
goto execute_Unseal;
}
if ((actionFun == ActionOrFun._InitializeMotionPlanning)) {
trace("<FunctionLog> Machine Prop_10b-{0} executing Function InitializeMotionPlanning\n", myHandle.instance);
locals = new PRT_VALUE_ARRAY[4];
locals[3] = PRT_VALUE.PrtMkDefaultValue(Main.type_1_PRT_TYPE);
locals[2] = PRT_VALUE.PrtMkDefaultValue(Main.type_2_PRT_TYPE);
locals[1] = PRT_VALUE.PrtMkDefaultValue(Main.type_2_PRT_TYPE);
locals[0] = PRT_VALUE.PrtMkDefaultValue(Main.type_4_PRT_TYPE);
myHandle.cont.PushReturnTo(0, locals, myHandle.currentEvent, myHandle.currentArg);
goto execute_InitializeMotionPlanning;
}
if ((actionFun == ActionOrFun._CAT_CAGE_LOC)) {
trace("<FunctionLog> Machine Prop_10b-{0} executing Function CAT_CAGE_LOC\n", myHandle.instance);
locals = null;
myHandle.cont.PushReturnTo(0, locals, myHandle.currentEvent, myHandle.currentArg);
goto execute_CAT_CAGE_LOC;
}
if ((actionFun == ActionOrFun._DOG_CAGE_LOC)) {
trace("<FunctionLog> Machine Prop_10b-{0} executing Function DOG_CAGE_LOC\n", myHandle.instance);
locals = null;
myHandle.cont.PushReturnTo(0, locals, myHandle.currentEvent, myHandle.currentArg);
goto execute_DOG_CAGE_LOC;
}
if ((actionFun == ActionOrFun._MICE_CAGE_LOC)) {
trace("<FunctionLog> Machine Prop_10b-{0} executing Function MICE_CAGE_LOC\n", myHandle.instance);
locals = null;
myHandle.cont.PushReturnTo(0, locals, myHandle.currentEvent, myHandle.currentArg);
goto execute_MICE_CAGE_LOC;
}
if ((actionFun == ActionOrFun._BATTERY_THRESHOLD)) {
trace("<FunctionLog> Machine Prop_10b-{0} executing Function BATTERY_THRESHOLD\n", myHandle.instance);
locals = null;
myHandle.cont.PushReturnTo(0, locals, myHandle.currentEvent, myHandle.currentArg);
goto execute_BATTERY_THRESHOLD;
}
if ((actionFun == ActionOrFun._DOG)) {
trace("<FunctionLog> Machine Prop_10b-{0} executing Function DOG\n", myHandle.instance);
locals = null;
myHandle.cont.PushReturnTo(0, locals, myHandle.currentEvent, myHandle.currentArg);
goto execute_DOG;
}
if ((actionFun == ActionOrFun._CAT)) {
trace("<FunctionLog> Machine Prop_10b-{0} executing Function CAT\n", myHandle.instance);
locals = null;
myHandle.cont.PushReturnTo(0, locals, myHandle.currentEvent, myHandle.currentArg);
goto execute_CAT;
}
if ((actionFun == ActionOrFun._MICE)) {
trace("<FunctionLog> Machine Prop_10b-{0} executing Function MICE\n", myHandle.instance);
locals = null;
myHandle.cont.PushReturnTo(0, locals, myHandle.currentEvent, myHandle.currentArg);
goto execute_MICE;
}
if ((actionFun == ActionOrFun._BATTERY_CHARGE_LOCATION)) {
trace("<FunctionLog> Machine Prop_10b-{0} executing Function BATTERY_CHARGE_LOCATION\n", myHandle.instance);
locals = null;
myHandle.cont.PushReturnTo(0, locals, myHandle.currentEvent, myHandle.currentArg);
goto execute_BATTERY_CHARGE_LOCATION;
}
if ((actionFun == ActionOrFun._ROBOT_START_STATE)) {
trace("<FunctionLog> Machine Prop_10b-{0} executing Function ROBOT_START_STATE\n", myHandle.instance);
locals = null;
myHandle.cont.PushReturnTo(0, locals, myHandle.currentEvent, myHandle.currentArg);
goto execute_ROBOT_START_STATE;
}
if ((actionFun == ActionOrFun._SIZE_OF_GRID)) {
trace("<FunctionLog> Machine Prop_10b-{0} executing Function SIZE_OF_GRID\n", myHandle.instance);
locals = null;
myHandle.cont.PushReturnTo(0, locals, myHandle.currentEvent, myHandle.currentArg);
goto execute_SIZE_OF_GRID;
}
if ((actionFun == ActionOrFun._ROBOT_SCAN_LOCATIONS)) {
trace("<FunctionLog> Machine Prop_10b-{0} executing Function ROBOT_SCAN_LOCATIONS\n", myHandle.instance);
locals = new PRT_VALUE_ARRAY[3];
locals[2] = PRT_VALUE.PrtMkDefaultValue(Main.type_2_PRT_TYPE);
locals[1] = PRT_VALUE.PrtMkDefaultValue(Main.type_2_PRT_TYPE);
locals[0] = PRT_VALUE.PrtMkDefaultValue(Main.type_1_PRT_TYPE);
myHandle.cont.PushReturnTo(0, locals, myHandle.currentEvent, myHandle.currentArg);
goto execute_ROBOT_SCAN_LOCATIONS;
}
if ((actionFun == ActionOrFun._GetStaticGoals)) {
trace("<FunctionLog> Machine Prop_10b-{0} executing Function GetStaticGoals\n", myHandle.instance);
locals = new PRT_VALUE_ARRAY[1];
locals[0] = PRT_VALUE.PrtMkDefaultValue(Main.type_7_PRT_TYPE);
myHandle.cont.PushReturnTo(0, locals, myHandle.currentEvent, myHandle.currentArg);
goto execute_GetStaticGoals;
}
if ((actionFun == ActionOrFun._GetStaticObstacles)) {
trace("<FunctionLog> Machine Prop_10b-{0} executing Function GetStaticObstacles\n", myHandle.instance);
locals = new PRT_VALUE_ARRAY[1];
locals[0] = PRT_VALUE.PrtMkDefaultValue(Main.type_2_PRT_TYPE);
myHandle.cont.PushReturnTo(0, locals, myHandle.currentEvent, myHandle.currentArg);
goto execute_GetStaticObstacles;
}
if ((actionFun == ActionOrFun._Prop_10b_ignore)) {
trace("<FunctionLog> Machine Prop_10b-{0} executing Function ignore\n", myHandle.instance);
locals = null;
myHandle.cont.PushReturnTo(0, locals, myHandle.currentEvent, myHandle.currentArg);
goto execute_ignore;
}
if ((actionFun == ActionOrFun._Prop_10b_AnonFun0)) {
locals = null;
myHandle.cont.PushReturnTo(0, locals, myHandle.currentEvent, myHandle.currentArg);
goto execute_AnonFun0;
}
assert(false, "Internal error");

;


execute_ResetObstacle:
while (!doPop) {
Main.ResetObstacle(myHandle, myHandle.cont);
doPop = ProcessContinuation();

}
return;

;


execute_Seal:
while (!doPop) {
Main.Seal(myHandle, myHandle.cont);
doPop = ProcessContinuation();

}
return;

;


execute_Unseal:
while (!doPop) {
Main.Unseal(myHandle, myHandle.cont);
doPop = ProcessContinuation();

}
return;

;


execute_InitializeMotionPlanning:
while (!doPop) {
Main.InitializeMotionPlanning(myHandle, myHandle.cont);
doPop = ProcessContinuation();

}
return;

;


execute_CAT_CAGE_LOC:
while (!doPop) {
Main.CAT_CAGE_LOC(myHandle, myHandle.cont);
doPop = ProcessContinuation();

}
return;

;


execute_DOG_CAGE_LOC:
while (!doPop) {
Main.DOG_CAGE_LOC(myHandle, myHandle.cont);
doPop = ProcessContinuation();

}
return;

;


execute_MICE_CAGE_LOC:
while (!doPop) {
Main.MICE_CAGE_LOC(myHandle, myHandle.cont);
doPop = ProcessContinuation();

}
return;

;


execute_BATTERY_THRESHOLD:
while (!doPop) {
Main.BATTERY_THRESHOLD(myHandle, myHandle.cont);
doPop = ProcessContinuation();

}
return;

;


execute_DOG:
while (!doPop) {
Main.DOG(myHandle, myHandle.cont);
doPop = ProcessContinuation();

}
return;

;


execute_CAT:
while (!doPop) {
Main.CAT(myHandle, myHandle.cont);
doPop = ProcessContinuation();

}
return;

;


execute_MICE:
while (!doPop) {
Main.MICE(myHandle, myHandle.cont);
doPop = ProcessContinuation();

}
return;

;


execute_BATTERY_CHARGE_LOCATION:
while (!doPop) {
Main.BATTERY_CHARGE_LOCATION(myHandle, myHandle.cont);
doPop = ProcessContinuation();

}
return;

;


execute_ROBOT_START_STATE:
while (!doPop) {
Main.ROBOT_START_STATE(myHandle, myHandle.cont);
doPop = ProcessContinuation();

}
return;

;


execute_SIZE_OF_GRID:
while (!doPop) {
Main.SIZE_OF_GRID(myHandle, myHandle.cont);
doPop = ProcessContinuation();

}
return;

;


execute_ROBOT_SCAN_LOCATIONS:
while (!doPop) {
Main.ROBOT_SCAN_LOCATIONS(myHandle, myHandle.cont);
doPop = ProcessContinuation();

}
return;

;


execute_GetStaticGoals:
while (!doPop) {
Main.GetStaticGoals(myHandle, myHandle.cont);
doPop = ProcessContinuation();

}
return;

;


execute_GetStaticObstacles:
while (!doPop) {
Main.GetStaticObstacles(myHandle, myHandle.cont);
doPop = ProcessContinuation();

}
return;

;


execute_ignore:
while (!doPop) {
ignore(myHandle.cont);
doPop = ProcessContinuation();

}
return;

;


execute_AnonFun0:
while (!doPop) {
AnonFun0(myHandle.cont);
doPop = ProcessContinuation();

}
return;

;

}
void ignore(Continuation entryCtxt) {
PRT_VALUE_ARRAY locals;
SM_EVENT currentEvent;
PRT_VALUE currentArg;
StackFrame retTo_98;

dummy:
retTo_98 = entryCtxt.PopReturnTo();
locals = retTo_98.locals;
currentEvent = retTo_98.currentEvent;
currentArg = retTo_98.currentArg;
if ((retTo_98.pc == 0)) {
goto start;
}
assert(false, "Internal error");

start:

;
entryCtxt.Return();
return;

;

}
void AnonFun0(Continuation entryCtxt) {
PRT_VALUE_ARRAY locals;
SM_EVENT currentEvent;
PRT_VALUE currentArg;
StackFrame retTo_99;

dummy:
retTo_99 = entryCtxt.PopReturnTo();
locals = retTo_99.locals;
currentEvent = retTo_99.currentEvent;
currentArg = retTo_99.currentArg;
if ((retTo_99.pc == 0)) {
goto start;
}
assert(false, "Internal error");

start:

;
entryCtxt.Return();
return;

;

}
};

class MACHINE_Prop_10c{
SM_HANDLE myHandle;
void Prop_10c_Init_CalculateDeferredAndActionSet() {

dummy:
myHandle.stack.deferredSet = new SM_EVENT_SET;
myHandle.stack.actionSet = new SM_EVENT_SET;
myHandle.stack.AddStackDeferredSet(myHandle.stack.deferredSet);
myHandle.stack.deferredSet = (myHandle.stack.deferredSet - Main.M_hMice_SM_EVENT);
myHandle.stack.AddStackActionSet(myHandle.stack.actionSet);
myHandle.stack.actionSet = (myHandle.stack.actionSet - Main.M_hMice_SM_EVENT);
myHandle.stack.es = new SM_EVENT_ARRAY[0];
myHandle.stack.as = new ActionOrFun_ARRAY[0];

;

}
void Prop_10c_WaitrMice_CalculateDeferredAndActionSet() {

dummy:
myHandle.stack.deferredSet = new SM_EVENT_SET;
myHandle.stack.actionSet = new SM_EVENT_SET;
myHandle.stack.AddStackDeferredSet(myHandle.stack.deferredSet);
myHandle.stack.deferredSet = (myHandle.stack.deferredSet - Main.M_rMice_SM_EVENT);
myHandle.stack.AddStackActionSet(myHandle.stack.actionSet);
myHandle.stack.actionSet = (myHandle.stack.actionSet - Main.M_rMice_SM_EVENT);
myHandle.stack.es = new SM_EVENT_ARRAY[0];
myHandle.stack.as = new ActionOrFun_ARRAY[0];

;

}
void Prop_10c_Done_CalculateDeferredAndActionSet() {

dummy:
myHandle.stack.deferredSet = new SM_EVENT_SET;
myHandle.stack.actionSet = new SM_EVENT_SET;
myHandle.stack.AddStackDeferredSet(myHandle.stack.deferredSet);
myHandle.stack.AddStackActionSet(myHandle.stack.actionSet);
myHandle.stack.es = new SM_EVENT_ARRAY[0];
myHandle.stack.as = new ActionOrFun_ARRAY[0];

;

}
void Start() {

dummy:
Run(Main.Prop_10c_Init_SM_STATE);
if ((myHandle.currentEvent == Main.halt_SM_EVENT)) {
myHandle.stack = null;
myHandle.buffer = null;
myHandle.currentArg = null;
SM_HANDLE.halted = (SM_HANDLE.halted + myHandle);
SM_HANDLE.enabled = (SM_HANDLE.enabled - myHandle);
return;

}
trace("<StateLog> Unhandled event exception by machine Prop_10c-{0}\n", myHandle.instance);
assert(false, "Unhandled event exception by machine Prop_10c");

;

}
void Run(SM_STATE state) {
bool doPop;
bool hasNullTransitionOrAction;

init:
myHandle.Push();
myHandle.stack.state = state;
doPop = RunHelper(true);
while (!doPop) {
hasNullTransitionOrAction = myHandle.stack.HasNullTransitionOrAction();
myHandle.DequeueEvent(hasNullTransitionOrAction);
doPop = RunHelper(false);

}
myHandle.Pop();

;

}
void TraceEnterState(SM_STATE state) {

init:
if ((state == Main.Prop_10c_Init_SM_STATE)) {
trace("<StateLog> Machine Prop_10c-{0} entering State Init\n", myHandle.instance);
return;

}
if ((state == Main.Prop_10c_WaitrMice_SM_STATE)) {
trace("<StateLog> Machine Prop_10c-{0} entering State WaitrMice\n", myHandle.instance);
return;

}
if ((state == Main.Prop_10c_Done_SM_STATE)) {
trace("<StateLog> Machine Prop_10c-{0} entering State Done\n", myHandle.instance);
return;

}
assert(false, "Internal error");

;

}
void TraceExitState(SM_STATE state) {

init:
if ((state == Main.Prop_10c_Init_SM_STATE)) {
trace("<StateLog> Machine Prop_10c-{0} exiting State Init\n", myHandle.instance);
return;

}
if ((state == Main.Prop_10c_WaitrMice_SM_STATE)) {
trace("<StateLog> Machine Prop_10c-{0} exiting State WaitrMice\n", myHandle.instance);
return;

}
if ((state == Main.Prop_10c_Done_SM_STATE)) {
trace("<StateLog> Machine Prop_10c-{0} exiting State Done\n", myHandle.instance);
return;

}
assert(false, "Internal error");

;

}
void CalculateDeferredAndActionSet(SM_STATE state) {

init:
if ((state == Main.Prop_10c_Init_SM_STATE)) {
Prop_10c_Init_CalculateDeferredAndActionSet();
return;

}
if ((state == Main.Prop_10c_WaitrMice_SM_STATE)) {
Prop_10c_WaitrMice_CalculateDeferredAndActionSet();
return;

}
if ((state == Main.Prop_10c_Done_SM_STATE)) {
Prop_10c_Done_CalculateDeferredAndActionSet();
return;

}
assert(false, "Internal error");

;

}
bool RunHelper(bool start) {
SM_STATE state;
SM_TRANSITION transition;
ActionOrFun actionFun;

init:
state = myHandle.stack.state;
if (start) {
goto enter;
} else {
goto handle;
}

;


enter:
state = myHandle.stack.state;
TraceEnterState(state);
if ((state.temperature == StateTemperature.Hot)) {
SM_HANDLE.hot = (SM_HANDLE.hot + myHandle);

} else {
SM_HANDLE.hot = (SM_HANDLE.hot - myHandle);

}
CalculateDeferredAndActionSet(state);
actionFun = state.entryFun;

;


execute:
ReentrancyHelper(actionFun);
if ((myHandle.cont.reason == ContinuationReason.Raise)) {
goto handle;
}
myHandle.currentEvent = null;
myHandle.currentArg = PRT_VALUE.PrtMkDefaultValue(Main.type_0_PRT_TYPE);
if ((myHandle.cont.reason != ContinuationReason.Pop)) {
return false;

}
TraceExitState(state);
ReentrancyHelper(state.exitFun);
return true;

;


handle:
if ((myHandle.currentEvent in myHandle.stack.actionSet)) {
actionFun = myHandle.stack.Find(myHandle.currentEvent);
goto execute;
}
transition = state.FindPushTransition(myHandle.currentEvent);
if ((transition != null)) {
Run(transition.to);
if ((myHandle.currentEvent == null)) {
return false;

} else {
goto handle;
}

}
TraceExitState(state);
ReentrancyHelper(state.exitFun);
transition = state.FindTransition(myHandle.currentEvent);
if ((transition == null)) {
return true;

}
ReentrancyHelper(transition.fun);
myHandle.stack.state = transition.to;
state = myHandle.stack.state;
goto enter;
;

}
bool ProcessContinuation() {
bool doPop;

init:
if ((myHandle.cont.reason == ContinuationReason.Return)) {
return true;

}
if ((myHandle.cont.reason == ContinuationReason.Pop)) {
return true;

}
if ((myHandle.cont.reason == ContinuationReason.Raise)) {
return true;

}
if ((myHandle.cont.reason == ContinuationReason.Receive)) {
myHandle.DequeueEvent(false);
return false;

}
if ((myHandle.cont.reason == ContinuationReason.Nondet)) {
myHandle.cont.nondet = choose(bool);
return false;

}
if ((myHandle.cont.reason == ContinuationReason.NewMachine)) {
yield;
return false;

}
if ((myHandle.cont.reason == ContinuationReason.Send)) {
yield;
return false;

}

;

}
void ReentrancyHelper(ActionOrFun actionFun) {
PRT_VALUE_ARRAY locals;
bool doPop;

init:
doPop = false;
myHandle.cont.Reset();
if ((actionFun == ActionOrFun._ResetObstacle)) {
trace("<FunctionLog> Machine Prop_10c-{0} executing Function ResetObstacle\n", myHandle.instance);
locals = null;
myHandle.cont.PushReturnTo(0, locals, myHandle.currentEvent, myHandle.currentArg);
goto execute_ResetObstacle;
}
if ((actionFun == ActionOrFun._Seal)) {
trace("<FunctionLog> Machine Prop_10c-{0} executing Function Seal\n", myHandle.instance);
locals = null;
myHandle.cont.PushReturnTo(0, locals, myHandle.currentEvent, myHandle.currentArg);
goto execute_Seal;
}
if ((actionFun == ActionOrFun._Unseal)) {
trace("<FunctionLog> Machine Prop_10c-{0} executing Function Unseal\n", myHandle.instance);
locals = null;
myHandle.cont.PushReturnTo(0, locals, myHandle.currentEvent, myHandle.currentArg);
goto execute_Unseal;
}
if ((actionFun == ActionOrFun._InitializeMotionPlanning)) {
trace("<FunctionLog> Machine Prop_10c-{0} executing Function InitializeMotionPlanning\n", myHandle.instance);
locals = new PRT_VALUE_ARRAY[4];
locals[3] = PRT_VALUE.PrtMkDefaultValue(Main.type_1_PRT_TYPE);
locals[2] = PRT_VALUE.PrtMkDefaultValue(Main.type_2_PRT_TYPE);
locals[1] = PRT_VALUE.PrtMkDefaultValue(Main.type_2_PRT_TYPE);
locals[0] = PRT_VALUE.PrtMkDefaultValue(Main.type_4_PRT_TYPE);
myHandle.cont.PushReturnTo(0, locals, myHandle.currentEvent, myHandle.currentArg);
goto execute_InitializeMotionPlanning;
}
if ((actionFun == ActionOrFun._CAT_CAGE_LOC)) {
trace("<FunctionLog> Machine Prop_10c-{0} executing Function CAT_CAGE_LOC\n", myHandle.instance);
locals = null;
myHandle.cont.PushReturnTo(0, locals, myHandle.currentEvent, myHandle.currentArg);
goto execute_CAT_CAGE_LOC;
}
if ((actionFun == ActionOrFun._DOG_CAGE_LOC)) {
trace("<FunctionLog> Machine Prop_10c-{0} executing Function DOG_CAGE_LOC\n", myHandle.instance);
locals = null;
myHandle.cont.PushReturnTo(0, locals, myHandle.currentEvent, myHandle.currentArg);
goto execute_DOG_CAGE_LOC;
}
if ((actionFun == ActionOrFun._MICE_CAGE_LOC)) {
trace("<FunctionLog> Machine Prop_10c-{0} executing Function MICE_CAGE_LOC\n", myHandle.instance);
locals = null;
myHandle.cont.PushReturnTo(0, locals, myHandle.currentEvent, myHandle.currentArg);
goto execute_MICE_CAGE_LOC;
}
if ((actionFun == ActionOrFun._BATTERY_THRESHOLD)) {
trace("<FunctionLog> Machine Prop_10c-{0} executing Function BATTERY_THRESHOLD\n", myHandle.instance);
locals = null;
myHandle.cont.PushReturnTo(0, locals, myHandle.currentEvent, myHandle.currentArg);
goto execute_BATTERY_THRESHOLD;
}
if ((actionFun == ActionOrFun._DOG)) {
trace("<FunctionLog> Machine Prop_10c-{0} executing Function DOG\n", myHandle.instance);
locals = null;
myHandle.cont.PushReturnTo(0, locals, myHandle.currentEvent, myHandle.currentArg);
goto execute_DOG;
}
if ((actionFun == ActionOrFun._CAT)) {
trace("<FunctionLog> Machine Prop_10c-{0} executing Function CAT\n", myHandle.instance);
locals = null;
myHandle.cont.PushReturnTo(0, locals, myHandle.currentEvent, myHandle.currentArg);
goto execute_CAT;
}
if ((actionFun == ActionOrFun._MICE)) {
trace("<FunctionLog> Machine Prop_10c-{0} executing Function MICE\n", myHandle.instance);
locals = null;
myHandle.cont.PushReturnTo(0, locals, myHandle.currentEvent, myHandle.currentArg);
goto execute_MICE;
}
if ((actionFun == ActionOrFun._BATTERY_CHARGE_LOCATION)) {
trace("<FunctionLog> Machine Prop_10c-{0} executing Function BATTERY_CHARGE_LOCATION\n", myHandle.instance);
locals = null;
myHandle.cont.PushReturnTo(0, locals, myHandle.currentEvent, myHandle.currentArg);
goto execute_BATTERY_CHARGE_LOCATION;
}
if ((actionFun == ActionOrFun._ROBOT_START_STATE)) {
trace("<FunctionLog> Machine Prop_10c-{0} executing Function ROBOT_START_STATE\n", myHandle.instance);
locals = null;
myHandle.cont.PushReturnTo(0, locals, myHandle.currentEvent, myHandle.currentArg);
goto execute_ROBOT_START_STATE;
}
if ((actionFun == ActionOrFun._SIZE_OF_GRID)) {
trace("<FunctionLog> Machine Prop_10c-{0} executing Function SIZE_OF_GRID\n", myHandle.instance);
locals = null;
myHandle.cont.PushReturnTo(0, locals, myHandle.currentEvent, myHandle.currentArg);
goto execute_SIZE_OF_GRID;
}
if ((actionFun == ActionOrFun._ROBOT_SCAN_LOCATIONS)) {
trace("<FunctionLog> Machine Prop_10c-{0} executing Function ROBOT_SCAN_LOCATIONS\n", myHandle.instance);
locals = new PRT_VALUE_ARRAY[3];
locals[2] = PRT_VALUE.PrtMkDefaultValue(Main.type_2_PRT_TYPE);
locals[1] = PRT_VALUE.PrtMkDefaultValue(Main.type_2_PRT_TYPE);
locals[0] = PRT_VALUE.PrtMkDefaultValue(Main.type_1_PRT_TYPE);
myHandle.cont.PushReturnTo(0, locals, myHandle.currentEvent, myHandle.currentArg);
goto execute_ROBOT_SCAN_LOCATIONS;
}
if ((actionFun == ActionOrFun._GetStaticGoals)) {
trace("<FunctionLog> Machine Prop_10c-{0} executing Function GetStaticGoals\n", myHandle.instance);
locals = new PRT_VALUE_ARRAY[1];
locals[0] = PRT_VALUE.PrtMkDefaultValue(Main.type_7_PRT_TYPE);
myHandle.cont.PushReturnTo(0, locals, myHandle.currentEvent, myHandle.currentArg);
goto execute_GetStaticGoals;
}
if ((actionFun == ActionOrFun._GetStaticObstacles)) {
trace("<FunctionLog> Machine Prop_10c-{0} executing Function GetStaticObstacles\n", myHandle.instance);
locals = new PRT_VALUE_ARRAY[1];
locals[0] = PRT_VALUE.PrtMkDefaultValue(Main.type_2_PRT_TYPE);
myHandle.cont.PushReturnTo(0, locals, myHandle.currentEvent, myHandle.currentArg);
goto execute_GetStaticObstacles;
}
if ((actionFun == ActionOrFun._Prop_10c_ignore)) {
trace("<FunctionLog> Machine Prop_10c-{0} executing Function ignore\n", myHandle.instance);
locals = null;
myHandle.cont.PushReturnTo(0, locals, myHandle.currentEvent, myHandle.currentArg);
goto execute_ignore;
}
if ((actionFun == ActionOrFun._Prop_10c_AnonFun0)) {
locals = null;
myHandle.cont.PushReturnTo(0, locals, myHandle.currentEvent, myHandle.currentArg);
goto execute_AnonFun0;
}
assert(false, "Internal error");

;


execute_ResetObstacle:
while (!doPop) {
Main.ResetObstacle(myHandle, myHandle.cont);
doPop = ProcessContinuation();

}
return;

;


execute_Seal:
while (!doPop) {
Main.Seal(myHandle, myHandle.cont);
doPop = ProcessContinuation();

}
return;

;


execute_Unseal:
while (!doPop) {
Main.Unseal(myHandle, myHandle.cont);
doPop = ProcessContinuation();

}
return;

;


execute_InitializeMotionPlanning:
while (!doPop) {
Main.InitializeMotionPlanning(myHandle, myHandle.cont);
doPop = ProcessContinuation();

}
return;

;


execute_CAT_CAGE_LOC:
while (!doPop) {
Main.CAT_CAGE_LOC(myHandle, myHandle.cont);
doPop = ProcessContinuation();

}
return;

;


execute_DOG_CAGE_LOC:
while (!doPop) {
Main.DOG_CAGE_LOC(myHandle, myHandle.cont);
doPop = ProcessContinuation();

}
return;

;


execute_MICE_CAGE_LOC:
while (!doPop) {
Main.MICE_CAGE_LOC(myHandle, myHandle.cont);
doPop = ProcessContinuation();

}
return;

;


execute_BATTERY_THRESHOLD:
while (!doPop) {
Main.BATTERY_THRESHOLD(myHandle, myHandle.cont);
doPop = ProcessContinuation();

}
return;

;


execute_DOG:
while (!doPop) {
Main.DOG(myHandle, myHandle.cont);
doPop = ProcessContinuation();

}
return;

;


execute_CAT:
while (!doPop) {
Main.CAT(myHandle, myHandle.cont);
doPop = ProcessContinuation();

}
return;

;


execute_MICE:
while (!doPop) {
Main.MICE(myHandle, myHandle.cont);
doPop = ProcessContinuation();

}
return;

;


execute_BATTERY_CHARGE_LOCATION:
while (!doPop) {
Main.BATTERY_CHARGE_LOCATION(myHandle, myHandle.cont);
doPop = ProcessContinuation();

}
return;

;


execute_ROBOT_START_STATE:
while (!doPop) {
Main.ROBOT_START_STATE(myHandle, myHandle.cont);
doPop = ProcessContinuation();

}
return;

;


execute_SIZE_OF_GRID:
while (!doPop) {
Main.SIZE_OF_GRID(myHandle, myHandle.cont);
doPop = ProcessContinuation();

}
return;

;


execute_ROBOT_SCAN_LOCATIONS:
while (!doPop) {
Main.ROBOT_SCAN_LOCATIONS(myHandle, myHandle.cont);
doPop = ProcessContinuation();

}
return;

;


execute_GetStaticGoals:
while (!doPop) {
Main.GetStaticGoals(myHandle, myHandle.cont);
doPop = ProcessContinuation();

}
return;

;


execute_GetStaticObstacles:
while (!doPop) {
Main.GetStaticObstacles(myHandle, myHandle.cont);
doPop = ProcessContinuation();

}
return;

;


execute_ignore:
while (!doPop) {
ignore(myHandle.cont);
doPop = ProcessContinuation();

}
return;

;


execute_AnonFun0:
while (!doPop) {
AnonFun0(myHandle.cont);
doPop = ProcessContinuation();

}
return;

;

}
void ignore(Continuation entryCtxt) {
PRT_VALUE_ARRAY locals;
SM_EVENT currentEvent;
PRT_VALUE currentArg;
StackFrame retTo_100;

dummy:
retTo_100 = entryCtxt.PopReturnTo();
locals = retTo_100.locals;
currentEvent = retTo_100.currentEvent;
currentArg = retTo_100.currentArg;
if ((retTo_100.pc == 0)) {
goto start;
}
assert(false, "Internal error");

start:

;
entryCtxt.Return();
return;

;

}
void AnonFun0(Continuation entryCtxt) {
PRT_VALUE_ARRAY locals;
SM_EVENT currentEvent;
PRT_VALUE currentArg;
StackFrame retTo_101;

dummy:
retTo_101 = entryCtxt.PopReturnTo();
locals = retTo_101.locals;
currentEvent = retTo_101.currentEvent;
currentArg = retTo_101.currentArg;
if ((retTo_101.pc == 0)) {
goto start;
}
assert(false, "Internal error");

start:

;
entryCtxt.Return();
return;

;

}
};

class Main{
static SM_EVENT halt_SM_EVENT;
static SM_EVENT null_SM_EVENT;
static SM_EVENT ReDo_SM_EVENT;
static SM_EVENT success_SM_EVENT;
static SM_EVENT doScanning_SM_EVENT;
static SM_EVENT startNewHerding_SM_EVENT;
static SM_EVENT continueCurrentHerding_SM_EVENT;
static SM_EVENT newPlan_SM_EVENT;
static SM_EVENT GetEnv_SM_EVENT;
static SM_EVENT SetEnv_SM_EVENT;
static SM_EVENT EnvState_SM_EVENT;
static SM_EVENT UpdateRobotState_SM_EVENT;
static SM_EVENT GetRobotState_SM_EVENT;
static SM_EVENT ExecutePlan_SM_EVENT;
static SM_EVENT CancelPlan_SM_EVENT;
static SM_EVENT GeneratePlanFor_SM_EVENT;
static SM_EVENT CancelOperation_SM_EVENT;
static SM_EVENT MotionPlanFor_SM_EVENT;
static SM_EVENT FailureToComputePlan_SM_EVENT;
static SM_EVENT ReachedDestination_SM_EVENT;
static SM_EVENT FailureExecuting_SM_EVENT;
static SM_EVENT CancelSucess_SM_EVENT;
static SM_EVENT BatteryLow_SM_EVENT;
static SM_EVENT EnvEventDetected_SM_EVENT;
static SM_EVENT CurrentState_SM_EVENT;
static SM_EVENT START_SM_EVENT;
static SM_EVENT CANCEL_SM_EVENT;
static SM_EVENT TIMEOUT_SM_EVENT;
static SM_EVENT CANCEL_SUCCESS_SM_EVENT;
static SM_EVENT CANCEL_FAILURE_SM_EVENT;
static SM_EVENT local_SM_EVENT;
static SM_EVENT done_SM_EVENT;
static SM_EVENT initial_setup_SM_EVENT;
static SM_EVENT infer_SM_EVENT;
static SM_EVENT UNIT_SM_EVENT;
static SM_EVENT M_hDog_SM_EVENT;
static SM_EVENT M_sDog_SM_EVENT;
static SM_EVENT M_rDog_SM_EVENT;
static SM_EVENT M_hCat_SM_EVENT;
static SM_EVENT M_sCat_SM_EVENT;
static SM_EVENT M_rCat_SM_EVENT;
static SM_EVENT M_hMice_SM_EVENT;
static SM_EVENT M_sMice_SM_EVENT;
static SM_EVENT M_rMice_SM_EVENT;
static SM_STATE DriverMachine_Init_SM_STATE;
static SM_STATE RobotTaskPlanner_Init_SM_STATE;
static SM_STATE RobotTaskPlanner_SetUpSystem_SM_STATE;
static SM_STATE RobotTaskPlanner_ScanningModeOfOperation_SM_STATE;
static SM_STATE RobotTaskPlanner_ExecutePlan_SM_STATE;
static SM_STATE RobotTaskPlanner_LowBatteryDetected_SM_STATE;
static SM_STATE RobotTaskPlanner_TakeActionOnEnvEventDetected_SM_STATE;
static SM_STATE RobotTaskPlanner_SelectGoalLocationAndComputePlan_SM_STATE;
static SM_STATE MotionPlanner_Init_SM_STATE;
static SM_STATE MotionPlanner_WaitForCommands_SM_STATE;
static SM_STATE MotionPlanExecutor_Init_SM_STATE;
static SM_STATE MotionPlanExecutor_WaitForCommands_SM_STATE;
static SM_STATE MotionPlanExecutor_StartExecutingPlan_SM_STATE;
static SM_STATE Environment_Init_SM_STATE;
static SM_STATE Environment_StartSimulation_SM_STATE;
static SM_STATE RobotStateManager_Init_SM_STATE;
static SM_STATE RobotStateManager_WaitForCommands_SM_STATE;
static SM_STATE RobotStateManager_GetStateFromEnvMachine_SM_STATE;
static SM_STATE SenseAndInfer_Init_SM_STATE;
static SM_STATE SenseAndInfer_PeriodicallySenseUpdate_SM_STATE;
static SM_STATE SenseAndInfer_SenseEnvironment_SM_STATE;
static SM_STATE Timer_Init_SM_STATE;
static SM_STATE Timer_WaitForReq_SM_STATE;
static SM_STATE Timer_WaitForCancel_SM_STATE;
static SM_STATE Prop_1_Init_SM_STATE;
static SM_STATE Prop_2_Init_SM_STATE;
static SM_STATE Prop_6_Init_SM_STATE;
static SM_STATE Prop_6_Wait_SM_STATE;
static SM_STATE Prop_6_Wait_M_hDog_SM_STATE;
static SM_STATE Prop_7_Init_SM_STATE;
static SM_STATE Prop_7_Wait_SM_STATE;
static SM_STATE Prop_7_WaitHDog_SM_STATE;
static SM_STATE Prop_7_WaitHCat_SM_STATE;
static SM_STATE Prop_8_Init_SM_STATE;
static SM_STATE Prop_8_Wait_SM_STATE;
static SM_STATE Prop_8_WaitHCat_SM_STATE;
static SM_STATE Prop_8_WaitHMice_SM_STATE;
static SM_STATE Prop_9_Init_SM_STATE;
static SM_STATE Prop_9_Wait_SM_STATE;
static SM_STATE Prop_9_WaitHCat_SM_STATE;
static SM_STATE Prop_3_Init_SM_STATE;
static SM_STATE Prop_3_WaitForHerding_SM_STATE;
static SM_STATE Prop_3_Done_SM_STATE;
static SM_STATE Prop_10a_Init_SM_STATE;
static SM_STATE Prop_10a_WaitrDog_SM_STATE;
static SM_STATE Prop_10a_Done_SM_STATE;
static SM_STATE Prop_10b_Init_SM_STATE;
static SM_STATE Prop_10b_WaitrCat_SM_STATE;
static SM_STATE Prop_10b_Done_SM_STATE;
static SM_STATE Prop_10c_Init_SM_STATE;
static SM_STATE Prop_10c_WaitrMice_SM_STATE;
static SM_STATE Prop_10c_Done_SM_STATE;
static int DriverMachine_instance;
static int RobotTaskPlanner_instance;
static int MotionPlanner_instance;
static int MotionPlanExecutor_instance;
static int Environment_instance;
static int RobotStateManager_instance;
static int SenseAndInfer_instance;
static int Timer_instance;
static int Prop_1_instance;
static int Prop_2_instance;
static int Prop_6_instance;
static int Prop_7_instance;
static int Prop_8_instance;
static int Prop_9_instance;
static int Prop_3_instance;
static int Prop_10a_instance;
static int Prop_10b_instance;
static int Prop_10c_instance;
static SET_Prop_1 Prop_1_handles;
static SM_EVENT_SET Prop_1_observes;
static SET_Prop_2 Prop_2_handles;
static SM_EVENT_SET Prop_2_observes;
static SET_Prop_6 Prop_6_handles;
static SM_EVENT_SET Prop_6_observes;
static SET_Prop_7 Prop_7_handles;
static SM_EVENT_SET Prop_7_observes;
static SET_Prop_8 Prop_8_handles;
static SM_EVENT_SET Prop_8_observes;
static SET_Prop_9 Prop_9_handles;
static SM_EVENT_SET Prop_9_observes;
static SET_Prop_3 Prop_3_handles;
static SM_EVENT_SET Prop_3_observes;
static SET_Prop_10a Prop_10a_handles;
static SM_EVENT_SET Prop_10a_observes;
static SET_Prop_10b Prop_10b_handles;
static SM_EVENT_SET Prop_10b_observes;
static SET_Prop_10c Prop_10c_handles;
static SM_EVENT_SET Prop_10c_observes;
static PRT_FIELD_NAME field_0_PRT_FIELD_NAME;
static PRT_FIELD_NAME field_1_PRT_FIELD_NAME;
static PRT_FIELD_NAME field_2_PRT_FIELD_NAME;
static PRT_FIELD_NAME field_3_PRT_FIELD_NAME;
static PRT_FIELD_NAME field_4_PRT_FIELD_NAME;
static PRT_FIELD_NAME field_5_PRT_FIELD_NAME;
static PRT_FIELD_NAME field_6_PRT_FIELD_NAME;
static PRT_FIELD_NAME field_7_PRT_FIELD_NAME;
static PRT_FIELD_NAME field_8_PRT_FIELD_NAME;
static PRT_FIELD_NAME field_9_PRT_FIELD_NAME;
static PRT_FIELD_NAME field_10_PRT_FIELD_NAME;
static PRT_FIELD_NAME field_11_PRT_FIELD_NAME;
static PRT_FIELD_NAME field_12_PRT_FIELD_NAME;
static PRT_FIELD_NAME field_13_PRT_FIELD_NAME;
static PRT_FIELD_NAME field_14_PRT_FIELD_NAME;
static PRT_FIELD_NAME field_15_PRT_FIELD_NAME;
static PRT_FIELD_NAME field_16_PRT_FIELD_NAME;
static PRT_FIELD_NAME field_17_PRT_FIELD_NAME;
static PRT_TYPE type_0_PRT_TYPE;
static PRT_TYPE type_1_PRT_TYPE;
static PRT_TYPE type_2_PRT_TYPE;
static PRT_TYPE type_3_PRT_TYPE;
static PRT_TYPE type_4_PRT_TYPE;
static PRT_TYPE type_5_PRT_TYPE;
static PRT_TYPE type_6_PRT_TYPE;
static PRT_TYPE type_7_PRT_TYPE;
static PRT_TYPE type_8_PRT_TYPE;
static PRT_TYPE type_9_PRT_TYPE;
static PRT_TYPE type_10_PRT_TYPE;
static PRT_TYPE type_11_PRT_TYPE;
static PRT_TYPE type_12_PRT_TYPE;
static PRT_TYPE type_13_PRT_TYPE;
static PRT_TYPE type_14_PRT_TYPE;
static PRT_TYPE type_15_PRT_TYPE;
static PRT_TYPE type_16_PRT_TYPE;
static PRT_TYPE type_17_PRT_TYPE;
static PRT_TYPE type_18_PRT_TYPE;
static PRT_TYPE type_19_PRT_TYPE;
static PRT_TYPE type_20_PRT_TYPE;
static PRT_TYPE type_21_PRT_TYPE;
static PRT_TYPE type_22_PRT_TYPE;
static PRT_TYPE type_23_PRT_TYPE;
static SM_HANDLE CreateMachine_DriverMachine(PRT_VALUE arg) {
MACHINE_DriverMachine o_DriverMachine;
FairScheduler fairScheduler;
FairChoice fairChoice;

dummy:
o_DriverMachine = new MACHINE_DriverMachine;
o_DriverMachine.robot = PRT_VALUE.PrtMkDefaultValue(Main.type_8_PRT_TYPE);
o_DriverMachine.envMachine = PRT_VALUE.PrtMkDefaultValue(Main.type_8_PRT_TYPE);
o_DriverMachine.robotStMng = PRT_VALUE.PrtMkDefaultValue(Main.type_8_PRT_TYPE);
o_DriverMachine.myHandle = SM_HANDLE.Construct(Machine._DriverMachine, DriverMachine_instance, -1);
SM_HANDLE.enabled = (SM_HANDLE.enabled + o_DriverMachine.myHandle);
trace("<CreateLog> Created Machine DriverMachine-{0}\n", DriverMachine_instance);
o_DriverMachine.myHandle.currentArg = arg;
DriverMachine_instance = (DriverMachine_instance + 1);
async o_DriverMachine.Start();
invokescheduler("map", o_DriverMachine.myHandle.machineId);
return o_DriverMachine.myHandle;

;

}
static SM_HANDLE CreateMachine_RobotTaskPlanner(PRT_VALUE arg) {
MACHINE_RobotTaskPlanner o_RobotTaskPlanner;
FairScheduler fairScheduler;
FairChoice fairChoice;

dummy:
o_RobotTaskPlanner = new MACHINE_RobotTaskPlanner;
o_RobotTaskPlanner.senseInfer = PRT_VALUE.PrtMkDefaultValue(Main.type_8_PRT_TYPE);
o_RobotTaskPlanner.envMachine = PRT_VALUE.PrtMkDefaultValue(Main.type_8_PRT_TYPE);
o_RobotTaskPlanner.robotStMng = PRT_VALUE.PrtMkDefaultValue(Main.type_8_PRT_TYPE);
o_RobotTaskPlanner.motionPlanner = PRT_VALUE.PrtMkDefaultValue(Main.type_8_PRT_TYPE);
o_RobotTaskPlanner.motionPlanEx = PRT_VALUE.PrtMkDefaultValue(Main.type_8_PRT_TYPE);
o_RobotTaskPlanner.currentRobotState = PRT_VALUE.PrtMkDefaultValue(Main.type_9_PRT_TYPE);
o_RobotTaskPlanner.currentSensorState = PRT_VALUE.PrtMkDefaultValue(Main.type_6_PRT_TYPE);
o_RobotTaskPlanner.scanLocations = PRT_VALUE.PrtMkDefaultValue(Main.type_2_PRT_TYPE);
o_RobotTaskPlanner.herdingState = PRT_VALUE.PrtMkDefaultValue(Main.type_13_PRT_TYPE);
o_RobotTaskPlanner.herdingTogether = PRT_VALUE.PrtMkDefaultValue(Main.type_1_PRT_TYPE);
o_RobotTaskPlanner.nextLocation = PRT_VALUE.PrtMkDefaultValue(Main.type_1_PRT_TYPE);
o_RobotTaskPlanner.myHandle = SM_HANDLE.Construct(Machine._RobotTaskPlanner, RobotTaskPlanner_instance, -1);
SM_HANDLE.enabled = (SM_HANDLE.enabled + o_RobotTaskPlanner.myHandle);
trace("<CreateLog> Created Machine RobotTaskPlanner-{0}\n", RobotTaskPlanner_instance);
o_RobotTaskPlanner.myHandle.currentArg = arg;
RobotTaskPlanner_instance = (RobotTaskPlanner_instance + 1);
async o_RobotTaskPlanner.Start();
invokescheduler("map", o_RobotTaskPlanner.myHandle.machineId);
return o_RobotTaskPlanner.myHandle;

;

}
static SM_HANDLE CreateMachine_MotionPlanner(PRT_VALUE arg) {
MACHINE_MotionPlanner o_MotionPlanner;
FairScheduler fairScheduler;
FairChoice fairChoice;

dummy:
o_MotionPlanner = new MACHINE_MotionPlanner;
o_MotionPlanner.RobotTP = PRT_VALUE.PrtMkDefaultValue(Main.type_8_PRT_TYPE);
o_MotionPlanner.Obstacles = PRT_VALUE.PrtMkDefaultValue(Main.type_2_PRT_TYPE);
o_MotionPlanner.AllMotionPlans = PRT_VALUE.PrtMkDefaultValue(Main.type_4_PRT_TYPE);
o_MotionPlanner.myHandle = SM_HANDLE.Construct(Machine._MotionPlanner, MotionPlanner_instance, -1);
SM_HANDLE.enabled = (SM_HANDLE.enabled + o_MotionPlanner.myHandle);
trace("<CreateLog> Created Machine MotionPlanner-{0}\n", MotionPlanner_instance);
o_MotionPlanner.myHandle.currentArg = arg;
MotionPlanner_instance = (MotionPlanner_instance + 1);
async o_MotionPlanner.Start();
invokescheduler("map", o_MotionPlanner.myHandle.machineId);
return o_MotionPlanner.myHandle;

;

}
static SM_HANDLE CreateMachine_MotionPlanExecutor(PRT_VALUE arg) {
MACHINE_MotionPlanExecutor o_MotionPlanExecutor;
FairScheduler fairScheduler;
FairChoice fairChoice;

dummy:
o_MotionPlanExecutor = new MACHINE_MotionPlanExecutor;
o_MotionPlanExecutor.RState = PRT_VALUE.PrtMkDefaultValue(Main.type_8_PRT_TYPE);
o_MotionPlanExecutor.RobotTP = PRT_VALUE.PrtMkDefaultValue(Main.type_8_PRT_TYPE);
o_MotionPlanExecutor.currentLocation = PRT_VALUE.PrtMkDefaultValue(Main.type_1_PRT_TYPE);
o_MotionPlanExecutor.currentPlan = PRT_VALUE.PrtMkDefaultValue(Main.type_2_PRT_TYPE);
o_MotionPlanExecutor.myHandle = SM_HANDLE.Construct(Machine._MotionPlanExecutor, MotionPlanExecutor_instance, -1);
SM_HANDLE.enabled = (SM_HANDLE.enabled + o_MotionPlanExecutor.myHandle);
trace("<CreateLog> Created Machine MotionPlanExecutor-{0}\n", MotionPlanExecutor_instance);
o_MotionPlanExecutor.myHandle.currentArg = arg;
MotionPlanExecutor_instance = (MotionPlanExecutor_instance + 1);
async o_MotionPlanExecutor.Start();
invokescheduler("map", o_MotionPlanExecutor.myHandle.machineId);
return o_MotionPlanExecutor.myHandle;

;

}
static SM_HANDLE CreateMachine_Environment(PRT_VALUE arg) {
MACHINE_Environment o_Environment;
FairScheduler fairScheduler;
FairChoice fairChoice;

dummy:
o_Environment = new MACHINE_Environment;
o_Environment.GoalsMap = PRT_VALUE.PrtMkDefaultValue(Main.type_23_PRT_TYPE);
o_Environment.myHandle = SM_HANDLE.Construct(Machine._Environment, Environment_instance, -1);
SM_HANDLE.enabled = (SM_HANDLE.enabled + o_Environment.myHandle);
trace("<CreateLog> Created Machine Environment-{0}\n", Environment_instance);
o_Environment.myHandle.currentArg = arg;
Environment_instance = (Environment_instance + 1);
async o_Environment.Start();
invokescheduler("map", o_Environment.myHandle.machineId);
return o_Environment.myHandle;

;

}
static SM_HANDLE CreateMachine_RobotStateManager(PRT_VALUE arg) {
MACHINE_RobotStateManager o_RobotStateManager;
FairScheduler fairScheduler;
FairChoice fairChoice;

dummy:
o_RobotStateManager = new MACHINE_RobotStateManager;
o_RobotStateManager.currentLocation = PRT_VALUE.PrtMkDefaultValue(Main.type_1_PRT_TYPE);
o_RobotStateManager.batteryLevel = PRT_VALUE.PrtMkDefaultValue(Main.type_1_PRT_TYPE);
o_RobotStateManager.EnvMachine = PRT_VALUE.PrtMkDefaultValue(Main.type_8_PRT_TYPE);
o_RobotStateManager.sensingMachine = PRT_VALUE.PrtMkDefaultValue(Main.type_8_PRT_TYPE);
o_RobotStateManager.myHandle = SM_HANDLE.Construct(Machine._RobotStateManager, RobotStateManager_instance, -1);
SM_HANDLE.enabled = (SM_HANDLE.enabled + o_RobotStateManager.myHandle);
trace("<CreateLog> Created Machine RobotStateManager-{0}\n", RobotStateManager_instance);
o_RobotStateManager.myHandle.currentArg = arg;
RobotStateManager_instance = (RobotStateManager_instance + 1);
async o_RobotStateManager.Start();
invokescheduler("map", o_RobotStateManager.myHandle.machineId);
return o_RobotStateManager.myHandle;

;

}
static SM_HANDLE CreateMachine_SenseAndInfer(PRT_VALUE arg) {
MACHINE_SenseAndInfer o_SenseAndInfer;
FairScheduler fairScheduler;
FairChoice fairChoice;

dummy:
o_SenseAndInfer = new MACHINE_SenseAndInfer;
o_SenseAndInfer.robotTP = PRT_VALUE.PrtMkDefaultValue(Main.type_8_PRT_TYPE);
o_SenseAndInfer.robotStManager = PRT_VALUE.PrtMkDefaultValue(Main.type_8_PRT_TYPE);
o_SenseAndInfer.currentRobotState = PRT_VALUE.PrtMkDefaultValue(Main.type_22_PRT_TYPE);
o_SenseAndInfer.myHandle = SM_HANDLE.Construct(Machine._SenseAndInfer, SenseAndInfer_instance, -1);
SM_HANDLE.enabled = (SM_HANDLE.enabled + o_SenseAndInfer.myHandle);
trace("<CreateLog> Created Machine SenseAndInfer-{0}\n", SenseAndInfer_instance);
o_SenseAndInfer.myHandle.currentArg = arg;
SenseAndInfer_instance = (SenseAndInfer_instance + 1);
async o_SenseAndInfer.Start();
invokescheduler("map", o_SenseAndInfer.myHandle.machineId);
return o_SenseAndInfer.myHandle;

;

}
static SM_HANDLE CreateMachine_Timer(PRT_VALUE arg) {
MACHINE_Timer o_Timer;
FairScheduler fairScheduler;
FairChoice fairChoice;

dummy:
o_Timer = new MACHINE_Timer;
o_Timer.client = PRT_VALUE.PrtMkDefaultValue(Main.type_8_PRT_TYPE);
o_Timer.myHandle = SM_HANDLE.Construct(Machine._Timer, Timer_instance, -1);
SM_HANDLE.enabled = (SM_HANDLE.enabled + o_Timer.myHandle);
trace("<CreateLog> Created Machine Timer-{0}\n", Timer_instance);
o_Timer.myHandle.currentArg = arg;
Timer_instance = (Timer_instance + 1);
async o_Timer.Start();
invokescheduler("map", o_Timer.myHandle.machineId);
return o_Timer.myHandle;

;

}
static void CreateMachine_Prop_1(PRT_VALUE arg) {
MACHINE_Prop_1 o_Prop_1;
bool chooseMonitor;
bool doPop;

dummy:
o_Prop_1 = new MACHINE_Prop_1;
o_Prop_1.hCat = PRT_VALUE.PrtMkDefaultValue(Main.type_5_PRT_TYPE);
o_Prop_1.hDog = PRT_VALUE.PrtMkDefaultValue(Main.type_5_PRT_TYPE);
o_Prop_1.myHandle = SM_HANDLE.Construct(Machine._Prop_1, Prop_1_instance, 0);
trace("<CreateLog> Created Machine Prop_1-{0}\n", Prop_1_instance);
o_Prop_1.myHandle.currentArg = arg;
Prop_1_instance = (Prop_1_instance + 1);
o_Prop_1.myHandle.Push();
o_Prop_1.myHandle.stack.state = Main.Prop_1_Init_SM_STATE;
Main.Prop_1_handles = (Main.Prop_1_handles + o_Prop_1);
doPop = o_Prop_1.RunHelper(true);
if (doPop) {
trace("<StateLog> Unhandled event exception by machine Prop_1-{0}\n", o_Prop_1.myHandle.instance);
assert(false);

}

;

}
static void CreateMachine_Prop_2(PRT_VALUE arg) {
MACHINE_Prop_2 o_Prop_2;
bool chooseMonitor;
bool doPop;

dummy:
o_Prop_2 = new MACHINE_Prop_2;
o_Prop_2.hCat = PRT_VALUE.PrtMkDefaultValue(Main.type_5_PRT_TYPE);
o_Prop_2.hMice = PRT_VALUE.PrtMkDefaultValue(Main.type_5_PRT_TYPE);
o_Prop_2.myHandle = SM_HANDLE.Construct(Machine._Prop_2, Prop_2_instance, 0);
trace("<CreateLog> Created Machine Prop_2-{0}\n", Prop_2_instance);
o_Prop_2.myHandle.currentArg = arg;
Prop_2_instance = (Prop_2_instance + 1);
o_Prop_2.myHandle.Push();
o_Prop_2.myHandle.stack.state = Main.Prop_2_Init_SM_STATE;
Main.Prop_2_handles = (Main.Prop_2_handles + o_Prop_2);
doPop = o_Prop_2.RunHelper(true);
if (doPop) {
trace("<StateLog> Unhandled event exception by machine Prop_2-{0}\n", o_Prop_2.myHandle.instance);
assert(false);

}

;

}
static void CreateMachine_Prop_6(PRT_VALUE arg) {
MACHINE_Prop_6 o_Prop_6;
bool chooseMonitor;
bool doPop;

dummy:
o_Prop_6 = new MACHINE_Prop_6;
o_Prop_6.hCat = PRT_VALUE.PrtMkDefaultValue(Main.type_5_PRT_TYPE);
o_Prop_6.myHandle = SM_HANDLE.Construct(Machine._Prop_6, Prop_6_instance, 0);
trace("<CreateLog> Created Machine Prop_6-{0}\n", Prop_6_instance);
o_Prop_6.myHandle.currentArg = arg;
Prop_6_instance = (Prop_6_instance + 1);
o_Prop_6.myHandle.Push();
o_Prop_6.myHandle.stack.state = Main.Prop_6_Init_SM_STATE;
Main.Prop_6_handles = (Main.Prop_6_handles + o_Prop_6);
doPop = o_Prop_6.RunHelper(true);
if (doPop) {
trace("<StateLog> Unhandled event exception by machine Prop_6-{0}\n", o_Prop_6.myHandle.instance);
assert(false);

}

;

}
static void CreateMachine_Prop_7(PRT_VALUE arg) {
MACHINE_Prop_7 o_Prop_7;
bool chooseMonitor;
bool doPop;

dummy:
o_Prop_7 = new MACHINE_Prop_7;
o_Prop_7.myHandle = SM_HANDLE.Construct(Machine._Prop_7, Prop_7_instance, 0);
trace("<CreateLog> Created Machine Prop_7-{0}\n", Prop_7_instance);
o_Prop_7.myHandle.currentArg = arg;
Prop_7_instance = (Prop_7_instance + 1);
o_Prop_7.myHandle.Push();
o_Prop_7.myHandle.stack.state = Main.Prop_7_Init_SM_STATE;
Main.Prop_7_handles = (Main.Prop_7_handles + o_Prop_7);
doPop = o_Prop_7.RunHelper(true);
if (doPop) {
trace("<StateLog> Unhandled event exception by machine Prop_7-{0}\n", o_Prop_7.myHandle.instance);
assert(false);

}

;

}
static void CreateMachine_Prop_8(PRT_VALUE arg) {
MACHINE_Prop_8 o_Prop_8;
bool chooseMonitor;
bool doPop;

dummy:
o_Prop_8 = new MACHINE_Prop_8;
o_Prop_8.myHandle = SM_HANDLE.Construct(Machine._Prop_8, Prop_8_instance, 0);
trace("<CreateLog> Created Machine Prop_8-{0}\n", Prop_8_instance);
o_Prop_8.myHandle.currentArg = arg;
Prop_8_instance = (Prop_8_instance + 1);
o_Prop_8.myHandle.Push();
o_Prop_8.myHandle.stack.state = Main.Prop_8_Init_SM_STATE;
Main.Prop_8_handles = (Main.Prop_8_handles + o_Prop_8);
doPop = o_Prop_8.RunHelper(true);
if (doPop) {
trace("<StateLog> Unhandled event exception by machine Prop_8-{0}\n", o_Prop_8.myHandle.instance);
assert(false);

}

;

}
static void CreateMachine_Prop_9(PRT_VALUE arg) {
MACHINE_Prop_9 o_Prop_9;
bool chooseMonitor;
bool doPop;

dummy:
o_Prop_9 = new MACHINE_Prop_9;
o_Prop_9.hMice = PRT_VALUE.PrtMkDefaultValue(Main.type_5_PRT_TYPE);
o_Prop_9.sDog = PRT_VALUE.PrtMkDefaultValue(Main.type_5_PRT_TYPE);
o_Prop_9.myHandle = SM_HANDLE.Construct(Machine._Prop_9, Prop_9_instance, 0);
trace("<CreateLog> Created Machine Prop_9-{0}\n", Prop_9_instance);
o_Prop_9.myHandle.currentArg = arg;
Prop_9_instance = (Prop_9_instance + 1);
o_Prop_9.myHandle.Push();
o_Prop_9.myHandle.stack.state = Main.Prop_9_Init_SM_STATE;
Main.Prop_9_handles = (Main.Prop_9_handles + o_Prop_9);
doPop = o_Prop_9.RunHelper(true);
if (doPop) {
trace("<StateLog> Unhandled event exception by machine Prop_9-{0}\n", o_Prop_9.myHandle.instance);
assert(false);

}

;

}
static void CreateMachine_Prop_3(PRT_VALUE arg) {
MACHINE_Prop_3 o_Prop_3;
bool chooseMonitor;
bool doPop;

dummy:
o_Prop_3 = new MACHINE_Prop_3;
o_Prop_3.noAnimals = PRT_VALUE.PrtMkDefaultValue(Main.type_1_PRT_TYPE);
o_Prop_3.myHandle = SM_HANDLE.Construct(Machine._Prop_3, Prop_3_instance, 0);
trace("<CreateLog> Created Machine Prop_3-{0}\n", Prop_3_instance);
o_Prop_3.myHandle.currentArg = arg;
Prop_3_instance = (Prop_3_instance + 1);
o_Prop_3.myHandle.Push();
o_Prop_3.myHandle.stack.state = Main.Prop_3_Init_SM_STATE;
Main.Prop_3_handles = (Main.Prop_3_handles + o_Prop_3);
doPop = o_Prop_3.RunHelper(true);
if (doPop) {
trace("<StateLog> Unhandled event exception by machine Prop_3-{0}\n", o_Prop_3.myHandle.instance);
assert(false);

}

;

}
static void CreateMachine_Prop_10a(PRT_VALUE arg) {
MACHINE_Prop_10a o_Prop_10a;
bool chooseMonitor;
bool doPop;

dummy:
o_Prop_10a = new MACHINE_Prop_10a;
o_Prop_10a.myHandle = SM_HANDLE.Construct(Machine._Prop_10a, Prop_10a_instance, 0);
trace("<CreateLog> Created Machine Prop_10a-{0}\n", Prop_10a_instance);
o_Prop_10a.myHandle.currentArg = arg;
Prop_10a_instance = (Prop_10a_instance + 1);
o_Prop_10a.myHandle.Push();
o_Prop_10a.myHandle.stack.state = Main.Prop_10a_Init_SM_STATE;
Main.Prop_10a_handles = (Main.Prop_10a_handles + o_Prop_10a);
doPop = o_Prop_10a.RunHelper(true);
if (doPop) {
trace("<StateLog> Unhandled event exception by machine Prop_10a-{0}\n", o_Prop_10a.myHandle.instance);
assert(false);

}

;

}
static void CreateMachine_Prop_10b(PRT_VALUE arg) {
MACHINE_Prop_10b o_Prop_10b;
bool chooseMonitor;
bool doPop;

dummy:
o_Prop_10b = new MACHINE_Prop_10b;
o_Prop_10b.myHandle = SM_HANDLE.Construct(Machine._Prop_10b, Prop_10b_instance, 0);
trace("<CreateLog> Created Machine Prop_10b-{0}\n", Prop_10b_instance);
o_Prop_10b.myHandle.currentArg = arg;
Prop_10b_instance = (Prop_10b_instance + 1);
o_Prop_10b.myHandle.Push();
o_Prop_10b.myHandle.stack.state = Main.Prop_10b_Init_SM_STATE;
Main.Prop_10b_handles = (Main.Prop_10b_handles + o_Prop_10b);
doPop = o_Prop_10b.RunHelper(true);
if (doPop) {
trace("<StateLog> Unhandled event exception by machine Prop_10b-{0}\n", o_Prop_10b.myHandle.instance);
assert(false);

}

;

}
static void CreateMachine_Prop_10c(PRT_VALUE arg) {
MACHINE_Prop_10c o_Prop_10c;
bool chooseMonitor;
bool doPop;

dummy:
o_Prop_10c = new MACHINE_Prop_10c;
o_Prop_10c.myHandle = SM_HANDLE.Construct(Machine._Prop_10c, Prop_10c_instance, 0);
trace("<CreateLog> Created Machine Prop_10c-{0}\n", Prop_10c_instance);
o_Prop_10c.myHandle.currentArg = arg;
Prop_10c_instance = (Prop_10c_instance + 1);
o_Prop_10c.myHandle.Push();
o_Prop_10c.myHandle.stack.state = Main.Prop_10c_Init_SM_STATE;
Main.Prop_10c_handles = (Main.Prop_10c_handles + o_Prop_10c);
doPop = o_Prop_10c.RunHelper(true);
if (doPop) {
trace("<StateLog> Unhandled event exception by machine Prop_10c-{0}\n", o_Prop_10c.myHandle.instance);
assert(false);

}

;

}
static void InvokeMachine_Prop_1(SM_EVENT evt, PRT_VALUE arg) {
bool doPop;

dummy:
if (!(evt in Main.Prop_1_observes)) {
return;

}
trace("<MonitorLog> Enqueued Event < {0}, ", evt.name);
PRT_VALUE.Print(arg);
trace(" > to {0} Prop_1 monitors\n", sizeof(Main.Prop_1_handles));
foreach (MACHINE_Prop_1 iter in Main.Prop_1_handles) {
iter.myHandle.currentEvent = evt;
iter.myHandle.currentArg = arg;
doPop = iter.RunHelper(false);
if (doPop) {
trace("<StateLog> Unhandled event exception by machine Prop_1-{0}\n", iter.myHandle.instance);
assert(false);

}

}

;

}
static void InvokeMachine_Prop_2(SM_EVENT evt, PRT_VALUE arg) {
bool doPop;

dummy:
if (!(evt in Main.Prop_2_observes)) {
return;

}
trace("<MonitorLog> Enqueued Event < {0}, ", evt.name);
PRT_VALUE.Print(arg);
trace(" > to {0} Prop_2 monitors\n", sizeof(Main.Prop_2_handles));
foreach (MACHINE_Prop_2 iter in Main.Prop_2_handles) {
iter.myHandle.currentEvent = evt;
iter.myHandle.currentArg = arg;
doPop = iter.RunHelper(false);
if (doPop) {
trace("<StateLog> Unhandled event exception by machine Prop_2-{0}\n", iter.myHandle.instance);
assert(false);

}

}

;

}
static void InvokeMachine_Prop_6(SM_EVENT evt, PRT_VALUE arg) {
bool doPop;

dummy:
if (!(evt in Main.Prop_6_observes)) {
return;

}
trace("<MonitorLog> Enqueued Event < {0}, ", evt.name);
PRT_VALUE.Print(arg);
trace(" > to {0} Prop_6 monitors\n", sizeof(Main.Prop_6_handles));
foreach (MACHINE_Prop_6 iter in Main.Prop_6_handles) {
iter.myHandle.currentEvent = evt;
iter.myHandle.currentArg = arg;
doPop = iter.RunHelper(false);
if (doPop) {
trace("<StateLog> Unhandled event exception by machine Prop_6-{0}\n", iter.myHandle.instance);
assert(false);

}

}

;

}
static void InvokeMachine_Prop_7(SM_EVENT evt, PRT_VALUE arg) {
bool doPop;

dummy:
if (!(evt in Main.Prop_7_observes)) {
return;

}
trace("<MonitorLog> Enqueued Event < {0}, ", evt.name);
PRT_VALUE.Print(arg);
trace(" > to {0} Prop_7 monitors\n", sizeof(Main.Prop_7_handles));
foreach (MACHINE_Prop_7 iter in Main.Prop_7_handles) {
iter.myHandle.currentEvent = evt;
iter.myHandle.currentArg = arg;
doPop = iter.RunHelper(false);
if (doPop) {
trace("<StateLog> Unhandled event exception by machine Prop_7-{0}\n", iter.myHandle.instance);
assert(false);

}

}

;

}
static void InvokeMachine_Prop_8(SM_EVENT evt, PRT_VALUE arg) {
bool doPop;

dummy:
if (!(evt in Main.Prop_8_observes)) {
return;

}
trace("<MonitorLog> Enqueued Event < {0}, ", evt.name);
PRT_VALUE.Print(arg);
trace(" > to {0} Prop_8 monitors\n", sizeof(Main.Prop_8_handles));
foreach (MACHINE_Prop_8 iter in Main.Prop_8_handles) {
iter.myHandle.currentEvent = evt;
iter.myHandle.currentArg = arg;
doPop = iter.RunHelper(false);
if (doPop) {
trace("<StateLog> Unhandled event exception by machine Prop_8-{0}\n", iter.myHandle.instance);
assert(false);

}

}

;

}
static void InvokeMachine_Prop_9(SM_EVENT evt, PRT_VALUE arg) {
bool doPop;

dummy:
if (!(evt in Main.Prop_9_observes)) {
return;

}
trace("<MonitorLog> Enqueued Event < {0}, ", evt.name);
PRT_VALUE.Print(arg);
trace(" > to {0} Prop_9 monitors\n", sizeof(Main.Prop_9_handles));
foreach (MACHINE_Prop_9 iter in Main.Prop_9_handles) {
iter.myHandle.currentEvent = evt;
iter.myHandle.currentArg = arg;
doPop = iter.RunHelper(false);
if (doPop) {
trace("<StateLog> Unhandled event exception by machine Prop_9-{0}\n", iter.myHandle.instance);
assert(false);

}

}

;

}
static void InvokeMachine_Prop_3(SM_EVENT evt, PRT_VALUE arg) {
bool doPop;

dummy:
if (!(evt in Main.Prop_3_observes)) {
return;

}
trace("<MonitorLog> Enqueued Event < {0}, ", evt.name);
PRT_VALUE.Print(arg);
trace(" > to {0} Prop_3 monitors\n", sizeof(Main.Prop_3_handles));
foreach (MACHINE_Prop_3 iter in Main.Prop_3_handles) {
iter.myHandle.currentEvent = evt;
iter.myHandle.currentArg = arg;
doPop = iter.RunHelper(false);
if (doPop) {
trace("<StateLog> Unhandled event exception by machine Prop_3-{0}\n", iter.myHandle.instance);
assert(false);

}

}

;

}
static void InvokeMachine_Prop_10a(SM_EVENT evt, PRT_VALUE arg) {
bool doPop;

dummy:
if (!(evt in Main.Prop_10a_observes)) {
return;

}
trace("<MonitorLog> Enqueued Event < {0}, ", evt.name);
PRT_VALUE.Print(arg);
trace(" > to {0} Prop_10a monitors\n", sizeof(Main.Prop_10a_handles));
foreach (MACHINE_Prop_10a iter in Main.Prop_10a_handles) {
iter.myHandle.currentEvent = evt;
iter.myHandle.currentArg = arg;
doPop = iter.RunHelper(false);
if (doPop) {
trace("<StateLog> Unhandled event exception by machine Prop_10a-{0}\n", iter.myHandle.instance);
assert(false);

}

}

;

}
static void InvokeMachine_Prop_10b(SM_EVENT evt, PRT_VALUE arg) {
bool doPop;

dummy:
if (!(evt in Main.Prop_10b_observes)) {
return;

}
trace("<MonitorLog> Enqueued Event < {0}, ", evt.name);
PRT_VALUE.Print(arg);
trace(" > to {0} Prop_10b monitors\n", sizeof(Main.Prop_10b_handles));
foreach (MACHINE_Prop_10b iter in Main.Prop_10b_handles) {
iter.myHandle.currentEvent = evt;
iter.myHandle.currentArg = arg;
doPop = iter.RunHelper(false);
if (doPop) {
trace("<StateLog> Unhandled event exception by machine Prop_10b-{0}\n", iter.myHandle.instance);
assert(false);

}

}

;

}
static void InvokeMachine_Prop_10c(SM_EVENT evt, PRT_VALUE arg) {
bool doPop;

dummy:
if (!(evt in Main.Prop_10c_observes)) {
return;

}
trace("<MonitorLog> Enqueued Event < {0}, ", evt.name);
PRT_VALUE.Print(arg);
trace(" > to {0} Prop_10c monitors\n", sizeof(Main.Prop_10c_handles));
foreach (MACHINE_Prop_10c iter in Main.Prop_10c_handles) {
iter.myHandle.currentEvent = evt;
iter.myHandle.currentArg = arg;
doPop = iter.RunHelper(false);
if (doPop) {
trace("<StateLog> Unhandled event exception by machine Prop_10c-{0}\n", iter.myHandle.instance);
assert(false);

}

}

;

}
static SM_EVENT_SET CalculateComplementOfEventSet(SM_EVENT_SET eventSet) {
SM_EVENT_SET returnEventSet;

dummy:
returnEventSet = new SM_EVENT_SET;
if ((Main.null_SM_EVENT in eventSet)) {

} else {
returnEventSet = (returnEventSet + Main.null_SM_EVENT);

}
if ((Main.ReDo_SM_EVENT in eventSet)) {

} else {
returnEventSet = (returnEventSet + Main.ReDo_SM_EVENT);

}
if ((Main.success_SM_EVENT in eventSet)) {

} else {
returnEventSet = (returnEventSet + Main.success_SM_EVENT);

}
if ((Main.doScanning_SM_EVENT in eventSet)) {

} else {
returnEventSet = (returnEventSet + Main.doScanning_SM_EVENT);

}
if ((Main.startNewHerding_SM_EVENT in eventSet)) {

} else {
returnEventSet = (returnEventSet + Main.startNewHerding_SM_EVENT);

}
if ((Main.continueCurrentHerding_SM_EVENT in eventSet)) {

} else {
returnEventSet = (returnEventSet + Main.continueCurrentHerding_SM_EVENT);

}
if ((Main.newPlan_SM_EVENT in eventSet)) {

} else {
returnEventSet = (returnEventSet + Main.newPlan_SM_EVENT);

}
if ((Main.GetEnv_SM_EVENT in eventSet)) {

} else {
returnEventSet = (returnEventSet + Main.GetEnv_SM_EVENT);

}
if ((Main.SetEnv_SM_EVENT in eventSet)) {

} else {
returnEventSet = (returnEventSet + Main.SetEnv_SM_EVENT);

}
if ((Main.EnvState_SM_EVENT in eventSet)) {

} else {
returnEventSet = (returnEventSet + Main.EnvState_SM_EVENT);

}
if ((Main.UpdateRobotState_SM_EVENT in eventSet)) {

} else {
returnEventSet = (returnEventSet + Main.UpdateRobotState_SM_EVENT);

}
if ((Main.GetRobotState_SM_EVENT in eventSet)) {

} else {
returnEventSet = (returnEventSet + Main.GetRobotState_SM_EVENT);

}
if ((Main.ExecutePlan_SM_EVENT in eventSet)) {

} else {
returnEventSet = (returnEventSet + Main.ExecutePlan_SM_EVENT);

}
if ((Main.CancelPlan_SM_EVENT in eventSet)) {

} else {
returnEventSet = (returnEventSet + Main.CancelPlan_SM_EVENT);

}
if ((Main.GeneratePlanFor_SM_EVENT in eventSet)) {

} else {
returnEventSet = (returnEventSet + Main.GeneratePlanFor_SM_EVENT);

}
if ((Main.CancelOperation_SM_EVENT in eventSet)) {

} else {
returnEventSet = (returnEventSet + Main.CancelOperation_SM_EVENT);

}
if ((Main.MotionPlanFor_SM_EVENT in eventSet)) {

} else {
returnEventSet = (returnEventSet + Main.MotionPlanFor_SM_EVENT);

}
if ((Main.FailureToComputePlan_SM_EVENT in eventSet)) {

} else {
returnEventSet = (returnEventSet + Main.FailureToComputePlan_SM_EVENT);

}
if ((Main.ReachedDestination_SM_EVENT in eventSet)) {

} else {
returnEventSet = (returnEventSet + Main.ReachedDestination_SM_EVENT);

}
if ((Main.FailureExecuting_SM_EVENT in eventSet)) {

} else {
returnEventSet = (returnEventSet + Main.FailureExecuting_SM_EVENT);

}
if ((Main.CancelSucess_SM_EVENT in eventSet)) {

} else {
returnEventSet = (returnEventSet + Main.CancelSucess_SM_EVENT);

}
if ((Main.BatteryLow_SM_EVENT in eventSet)) {

} else {
returnEventSet = (returnEventSet + Main.BatteryLow_SM_EVENT);

}
if ((Main.EnvEventDetected_SM_EVENT in eventSet)) {

} else {
returnEventSet = (returnEventSet + Main.EnvEventDetected_SM_EVENT);

}
if ((Main.CurrentState_SM_EVENT in eventSet)) {

} else {
returnEventSet = (returnEventSet + Main.CurrentState_SM_EVENT);

}
if ((Main.START_SM_EVENT in eventSet)) {

} else {
returnEventSet = (returnEventSet + Main.START_SM_EVENT);

}
if ((Main.CANCEL_SM_EVENT in eventSet)) {

} else {
returnEventSet = (returnEventSet + Main.CANCEL_SM_EVENT);

}
if ((Main.TIMEOUT_SM_EVENT in eventSet)) {

} else {
returnEventSet = (returnEventSet + Main.TIMEOUT_SM_EVENT);

}
if ((Main.CANCEL_SUCCESS_SM_EVENT in eventSet)) {

} else {
returnEventSet = (returnEventSet + Main.CANCEL_SUCCESS_SM_EVENT);

}
if ((Main.CANCEL_FAILURE_SM_EVENT in eventSet)) {

} else {
returnEventSet = (returnEventSet + Main.CANCEL_FAILURE_SM_EVENT);

}
if ((Main.local_SM_EVENT in eventSet)) {

} else {
returnEventSet = (returnEventSet + Main.local_SM_EVENT);

}
if ((Main.done_SM_EVENT in eventSet)) {

} else {
returnEventSet = (returnEventSet + Main.done_SM_EVENT);

}
if ((Main.initial_setup_SM_EVENT in eventSet)) {

} else {
returnEventSet = (returnEventSet + Main.initial_setup_SM_EVENT);

}
if ((Main.infer_SM_EVENT in eventSet)) {

} else {
returnEventSet = (returnEventSet + Main.infer_SM_EVENT);

}
if ((Main.UNIT_SM_EVENT in eventSet)) {

} else {
returnEventSet = (returnEventSet + Main.UNIT_SM_EVENT);

}
if ((Main.M_hDog_SM_EVENT in eventSet)) {

} else {
returnEventSet = (returnEventSet + Main.M_hDog_SM_EVENT);

}
if ((Main.M_sDog_SM_EVENT in eventSet)) {

} else {
returnEventSet = (returnEventSet + Main.M_sDog_SM_EVENT);

}
if ((Main.M_rDog_SM_EVENT in eventSet)) {

} else {
returnEventSet = (returnEventSet + Main.M_rDog_SM_EVENT);

}
if ((Main.M_hCat_SM_EVENT in eventSet)) {

} else {
returnEventSet = (returnEventSet + Main.M_hCat_SM_EVENT);

}
if ((Main.M_sCat_SM_EVENT in eventSet)) {

} else {
returnEventSet = (returnEventSet + Main.M_sCat_SM_EVENT);

}
if ((Main.M_rCat_SM_EVENT in eventSet)) {

} else {
returnEventSet = (returnEventSet + Main.M_rCat_SM_EVENT);

}
if ((Main.M_hMice_SM_EVENT in eventSet)) {

} else {
returnEventSet = (returnEventSet + Main.M_hMice_SM_EVENT);

}
if ((Main.M_sMice_SM_EVENT in eventSet)) {

} else {
returnEventSet = (returnEventSet + Main.M_sMice_SM_EVENT);

}
if ((Main.M_rMice_SM_EVENT in eventSet)) {

} else {
returnEventSet = (returnEventSet + Main.M_rMice_SM_EVENT);

}
return returnEventSet;

;

}
static PRT_TYPE PayloadOf(SM_EVENT e) {

dummy:
if ((e == null)) {
return Main.type_0_PRT_TYPE;

}
if ((e.name == Event._halt)) {
return Main.type_0_PRT_TYPE;

}
if ((e.name == Event._ReDo)) {
return Main.type_0_PRT_TYPE;

}
if ((e.name == Event._success)) {
return Main.type_0_PRT_TYPE;

}
if ((e.name == Event._doScanning)) {
return Main.type_0_PRT_TYPE;

}
if ((e.name == Event._startNewHerding)) {
return Main.type_0_PRT_TYPE;

}
if ((e.name == Event._continueCurrentHerding)) {
return Main.type_0_PRT_TYPE;

}
if ((e.name == Event._newPlan)) {
return Main.type_2_PRT_TYPE;

}
if ((e.name == Event._GetEnv)) {
return Main.type_21_PRT_TYPE;

}
if ((e.name == Event._SetEnv)) {
return Main.type_19_PRT_TYPE;

}
if ((e.name == Event._EnvState)) {
return Main.type_19_PRT_TYPE;

}
if ((e.name == Event._UpdateRobotState)) {
return Main.type_9_PRT_TYPE;

}
if ((e.name == Event._GetRobotState)) {
return Main.type_0_PRT_TYPE;

}
if ((e.name == Event._ExecutePlan)) {
return Main.type_16_PRT_TYPE;

}
if ((e.name == Event._CancelPlan)) {
return Main.type_0_PRT_TYPE;

}
if ((e.name == Event._GeneratePlanFor)) {
return Main.type_15_PRT_TYPE;

}
if ((e.name == Event._CancelOperation)) {
return Main.type_0_PRT_TYPE;

}
if ((e.name == Event._MotionPlanFor)) {
return Main.type_17_PRT_TYPE;

}
if ((e.name == Event._FailureToComputePlan)) {
return Main.type_0_PRT_TYPE;

}
if ((e.name == Event._ReachedDestination)) {
return Main.type_1_PRT_TYPE;

}
if ((e.name == Event._FailureExecuting)) {
return Main.type_0_PRT_TYPE;

}
if ((e.name == Event._CancelSucess)) {
return Main.type_1_PRT_TYPE;

}
if ((e.name == Event._BatteryLow)) {
return Main.type_1_PRT_TYPE;

}
if ((e.name == Event._EnvEventDetected)) {
return Main.type_19_PRT_TYPE;

}
if ((e.name == Event._CurrentState)) {
return Main.type_22_PRT_TYPE;

}
if ((e.name == Event._START)) {
return Main.type_1_PRT_TYPE;

}
if ((e.name == Event._CANCEL)) {
return Main.type_0_PRT_TYPE;

}
if ((e.name == Event._TIMEOUT)) {
return Main.type_8_PRT_TYPE;

}
if ((e.name == Event._CANCEL_SUCCESS)) {
return Main.type_8_PRT_TYPE;

}
if ((e.name == Event._CANCEL_FAILURE)) {
return Main.type_8_PRT_TYPE;

}
if ((e.name == Event._local)) {
return Main.type_0_PRT_TYPE;

}
if ((e.name == Event._done)) {
return Main.type_0_PRT_TYPE;

}
if ((e.name == Event._initial_setup)) {
return Main.type_18_PRT_TYPE;

}
if ((e.name == Event._infer)) {
return Main.type_0_PRT_TYPE;

}
if ((e.name == Event._UNIT)) {
return Main.type_0_PRT_TYPE;

}
if ((e.name == Event._M_hDog)) {
return Main.type_0_PRT_TYPE;

}
if ((e.name == Event._M_sDog)) {
return Main.type_0_PRT_TYPE;

}
if ((e.name == Event._M_rDog)) {
return Main.type_0_PRT_TYPE;

}
if ((e.name == Event._M_hCat)) {
return Main.type_0_PRT_TYPE;

}
if ((e.name == Event._M_sCat)) {
return Main.type_0_PRT_TYPE;

}
if ((e.name == Event._M_rCat)) {
return Main.type_0_PRT_TYPE;

}
if ((e.name == Event._M_hMice)) {
return Main.type_0_PRT_TYPE;

}
if ((e.name == Event._M_sMice)) {
return Main.type_0_PRT_TYPE;

}
if ((e.name == Event._M_rMice)) {
return Main.type_0_PRT_TYPE;

}
assert(false, "Internal error");

;

}
static void InvokeMotionPlanner(SM_HANDLE myHandle, Continuation entryCtxt) {
PRT_VALUE_ARRAY locals;
SM_EVENT currentEvent;
PRT_VALUE currentArg;
PRT_VALUE_ARRAY argCloneVar_37;
PRT_VALUE_ARRAY argCloneVar_38;
StackFrame retTo_102;

dummy:
retTo_102 = entryCtxt.PopReturnTo();
locals = retTo_102.locals;
currentEvent = retTo_102.currentEvent;
currentArg = retTo_102.currentArg;
if ((retTo_102.pc == 0)) {
goto start;
}
if ((retTo_102.pc == 1)) {
goto InvokeMotionPlanner_0;
}
if ((retTo_102.pc == 2)) {
goto InvokeMotionPlanner_1;
}
assert(false, "Internal error");

start:
argCloneVar_37 = new PRT_VALUE_ARRAY[2];
argCloneVar_37[0] = PRT_VALUE.PrtCloneValue(locals[0]);
argCloneVar_37[1] = PRT_VALUE.PrtMkDefaultValue(Main.type_1_PRT_TYPE);
entryCtxt.PushReturnTo(0, argCloneVar_37, currentEvent, currentArg);

InvokeMotionPlanner_0:
Main.InitializeObstacles(myHandle, entryCtxt);

;
if ((entryCtxt.reason == ContinuationReason.Return)) {

} else {
entryCtxt.PushReturnTo(1, locals, currentEvent, currentArg);
return;

}
argCloneVar_38 = new PRT_VALUE_ARRAY[2];
argCloneVar_38[1] = PRT_VALUE.PrtCloneValue(locals[2]);
argCloneVar_38[0] = PRT_VALUE.PrtCloneValue(locals[1]);
invokeplugin("GenerateMotionPlan", argCloneVar_38[0].nt, argCloneVar_38[1].nt);
entryCtxt.PushReturnTo(0, argCloneVar_38, currentEvent, currentArg);

InvokeMotionPlanner_1:
Main.GetPath(myHandle, entryCtxt);

;
if ((entryCtxt.reason == ContinuationReason.Return)) {

} else {
entryCtxt.PushReturnTo(2, locals, currentEvent, currentArg);
return;

}

;
entryCtxt.Return();
return;

;

}
static void GetPath(SM_HANDLE myHandle, Continuation entryCtxt) {
PRT_VALUE_ARRAY locals;
SM_EVENT currentEvent;
PRT_VALUE currentArg;
StackFrame retTo_103;

dummy:
retTo_103 = entryCtxt.PopReturnTo();
locals = retTo_103.locals;
currentEvent = retTo_103.currentEvent;
currentArg = retTo_103.currentArg;
if ((retTo_103.pc == 0)) {
goto start;
}
assert(false, "Internal error");

start:

;
entryCtxt.Return();
return;

;

}
static void AddObstacle(SM_HANDLE myHandle, Continuation entryCtxt) {
PRT_VALUE_ARRAY locals;
SM_EVENT currentEvent;
PRT_VALUE currentArg;
StackFrame retTo_104;

dummy:
retTo_104 = entryCtxt.PopReturnTo();
locals = retTo_104.locals;
currentEvent = retTo_104.currentEvent;
currentArg = retTo_104.currentArg;
if ((retTo_104.pc == 0)) {
goto start;
}
assert(false, "Internal error");

start:

;
entryCtxt.Return();
return;

;

}
static void ResetObstacle(SM_HANDLE myHandle, Continuation entryCtxt) {
PRT_VALUE_ARRAY locals;
SM_EVENT currentEvent;
PRT_VALUE currentArg;
StackFrame retTo_105;

dummy:
retTo_105 = entryCtxt.PopReturnTo();
locals = retTo_105.locals;
currentEvent = retTo_105.currentEvent;
currentArg = retTo_105.currentArg;
if ((retTo_105.pc == 0)) {
goto start;
}
assert(false, "Internal error");

start:

;
entryCtxt.Return();
return;

;

}
static void InitializeObstacles(SM_HANDLE myHandle, Continuation entryCtxt) {
PRT_VALUE_ARRAY locals;
SM_EVENT currentEvent;
PRT_VALUE currentArg;
PRT_VALUE tmp_144;
PRT_VALUE_ARRAY argCloneVar_39;
int tmpVar_104;
PRT_VALUE retVal_4;
PRT_VALUE tmpVar_105;
PRT_VALUE tmpVar_106;
PRT_VALUE_ARRAY argCloneVar_40;
PRT_VALUE tmp_145;
PRT_VALUE tmpVar_107;
StackFrame retTo_106;

dummy:
retTo_106 = entryCtxt.PopReturnTo();
locals = retTo_106.locals;
currentEvent = retTo_106.currentEvent;
currentArg = retTo_106.currentArg;
if ((retTo_106.pc == 0)) {
goto start;
}
if ((retTo_106.pc == 1)) {
goto InitializeObstacles_0;
}
if ((retTo_106.pc == 2)) {
goto InitializeObstacles_1;
}
assert(false, "Internal error");

start:
tmp_144 = PRT_VALUE.PrtMkDefaultValue(Main.type_1_PRT_TYPE);
PRT_VALUE.PrtPrimSetInt(tmp_144, 0);
locals[1] = PRT_VALUE.PrtCloneValue(tmp_144);
argCloneVar_39 = null;
invokeplugin("ResetObstacle");
entryCtxt.PushReturnTo(0, argCloneVar_39, currentEvent, currentArg);

InitializeObstacles_0:
Main.ResetObstacle(myHandle, entryCtxt);

;
if ((entryCtxt.reason == ContinuationReason.Return)) {

} else {
entryCtxt.PushReturnTo(1, locals, currentEvent, currentArg);
return;

}

InitializeObstacles_loop_start_0:
tmpVar_104 = PRT_VALUE.PrtSeqSizeOf(locals[0]);
retVal_4 = PRT_VALUE.PrtMkDefaultValue(Main.type_1_PRT_TYPE);
PRT_VALUE.PrtPrimSetInt(retVal_4, tmpVar_104);
tmpVar_105 = PRT_VALUE.PrtMkDefaultValue(Main.type_5_PRT_TYPE);
PRT_VALUE.PrtPrimSetBool(tmpVar_105, (locals[1].nt < retVal_4.nt));
if (!tmpVar_105.bl) {
goto InitializeObstacles_loop_end_0;
}
tmpVar_106 = PRT_VALUE.PrtSeqGet(locals[0], locals[1]);
argCloneVar_40 = new PRT_VALUE_ARRAY[1];
argCloneVar_40[0] = PRT_VALUE.PrtCloneValue(tmpVar_106);
invokeplugin("AddObstacle", argCloneVar_40[0].nt);
entryCtxt.PushReturnTo(0, argCloneVar_40, currentEvent, currentArg);

InitializeObstacles_1:
Main.AddObstacle(myHandle, entryCtxt);

;
if ((entryCtxt.reason == ContinuationReason.Return)) {

} else {
entryCtxt.PushReturnTo(2, locals, currentEvent, currentArg);
return;

}
tmp_145 = PRT_VALUE.PrtMkDefaultValue(Main.type_1_PRT_TYPE);
PRT_VALUE.PrtPrimSetInt(tmp_145, 1);
tmpVar_107 = PRT_VALUE.PrtMkDefaultValue(Main.type_1_PRT_TYPE);
PRT_VALUE.PrtPrimSetInt(tmpVar_107, (locals[1].nt + tmp_145.nt));
locals[1] = PRT_VALUE.PrtCloneValue(tmpVar_107);
goto InitializeObstacles_loop_start_0;
InitializeObstacles_loop_end_0:

;

;

;
entryCtxt.Return();
return;

;

}
static void Seal(SM_HANDLE myHandle, Continuation entryCtxt) {
PRT_VALUE_ARRAY locals;
SM_EVENT currentEvent;
PRT_VALUE currentArg;
StackFrame retTo_107;

dummy:
retTo_107 = entryCtxt.PopReturnTo();
locals = retTo_107.locals;
currentEvent = retTo_107.currentEvent;
currentArg = retTo_107.currentArg;
if ((retTo_107.pc == 0)) {
goto start;
}
assert(false, "Internal error");

start:

;
entryCtxt.Return();
return;

;

}
static void Unseal(SM_HANDLE myHandle, Continuation entryCtxt) {
PRT_VALUE_ARRAY locals;
SM_EVENT currentEvent;
PRT_VALUE currentArg;
StackFrame retTo_108;

dummy:
retTo_108 = entryCtxt.PopReturnTo();
locals = retTo_108.locals;
currentEvent = retTo_108.currentEvent;
currentArg = retTo_108.currentArg;
if ((retTo_108.pc == 0)) {
goto start;
}
assert(false, "Internal error");

start:

;
entryCtxt.Return();
return;

;

}
static void PRINT(SM_HANDLE myHandle, Continuation entryCtxt) {
PRT_VALUE_ARRAY locals;
SM_EVENT currentEvent;
PRT_VALUE currentArg;
StackFrame retTo_109;

dummy:
retTo_109 = entryCtxt.PopReturnTo();
locals = retTo_109.locals;
currentEvent = retTo_109.currentEvent;
currentArg = retTo_109.currentArg;
if ((retTo_109.pc == 0)) {
goto start;
}
assert(false, "Internal error");

start:

;
entryCtxt.Return();
return;

;

}
static void InitializeMotionPlanning(SM_HANDLE myHandle, Continuation entryCtxt) {
PRT_VALUE_ARRAY locals;
SM_EVENT currentEvent;
PRT_VALUE currentArg;
PRT_VALUE tmp_146;
PRT_VALUE_ARRAY argCloneVar_41;
PRT_VALUE_ARRAY argCloneVar_42;
PRT_VALUE ret_7;
PRT_VALUE tmpVar_108;
PRT_VALUE tmp_147;
bool tmpVar_109;
PRT_VALUE tmpVar_110;
PRT_VALUE tmpVar_111;
int tmpVar_112;
PRT_VALUE retVal_5;
PRT_VALUE tmpTuple_19;
PRT_VALUE idx_0;
PRT_VALUE val_0;
int tmpVar_113;
PRT_VALUE retVal_6;
PRT_VALUE tmp_148;
PRT_VALUE tmpVar_114;
PRT_VALUE tmpTuple_20;
PRT_VALUE idx_1;
PRT_VALUE val_1;
PRT_VALUE tmp_149;
PRT_VALUE tmpVar_115;
PRT_VALUE tmpTuple_21;
PRT_VALUE_ARRAY argCloneVar_43;
PRT_VALUE ret_8;
bool tmpVar_116;
PRT_VALUE tmpVar_117;
PRT_VALUE tmpVar_118;
int tmpVar_119;
PRT_VALUE retVal_7;
PRT_VALUE tmpTuple_22;
PRT_VALUE idx_2;
PRT_VALUE val_2;
int tmpVar_120;
PRT_VALUE retVal_8;
PRT_VALUE tmp_150;
PRT_VALUE tmpVar_121;
PRT_VALUE tmpTuple_23;
PRT_VALUE idx_3;
PRT_VALUE val_3;
PRT_VALUE tmp_151;
PRT_VALUE tmpVar_122;
PRT_VALUE tmpTuple_24;
PRT_VALUE tmpVar_123;
int tmpVar_124;
PRT_VALUE retVal_9;
PRT_VALUE tmpTuple_25;
PRT_VALUE idx_4;
PRT_VALUE val_4;
int tmpVar_125;
PRT_VALUE retVal_10;
PRT_VALUE tmp_152;
PRT_VALUE tmpVar_126;
PRT_VALUE tmpTuple_26;
PRT_VALUE idx_5;
PRT_VALUE val_5;
PRT_VALUE tmp_153;
PRT_VALUE tmpVar_127;
PRT_VALUE tmpTuple_27;
PRT_VALUE tmpVar_128;
int tmpVar_129;
PRT_VALUE retVal_11;
PRT_VALUE tmpTuple_28;
PRT_VALUE idx_6;
PRT_VALUE val_6;
int tmpVar_130;
PRT_VALUE retVal_12;
PRT_VALUE tmp_154;
PRT_VALUE tmpVar_131;
PRT_VALUE tmpTuple_29;
PRT_VALUE idx_7;
PRT_VALUE val_7;
PRT_VALUE tmp_155;
PRT_VALUE tmpVar_132;
PRT_VALUE tmpTuple_30;
PRT_VALUE tmp_156;
PRT_VALUE tmpVar_133;
StackFrame retTo_110;

dummy:
retTo_110 = entryCtxt.PopReturnTo();
locals = retTo_110.locals;
currentEvent = retTo_110.currentEvent;
currentArg = retTo_110.currentArg;
if ((retTo_110.pc == 0)) {
goto start;
}
if ((retTo_110.pc == 1)) {
goto InitializeMotionPlanning_0;
}
if ((retTo_110.pc == 2)) {
goto InitializeMotionPlanning_1;
}
if ((retTo_110.pc == 3)) {
goto InitializeMotionPlanning_2;
}
assert(false, "Internal error");

start:
tmp_146 = PRT_VALUE.PrtMkDefaultValue(Main.type_1_PRT_TYPE);
PRT_VALUE.PrtPrimSetInt(tmp_146, 1);
locals[3] = PRT_VALUE.PrtCloneValue(tmp_146);
argCloneVar_41 = new PRT_VALUE_ARRAY[3];
argCloneVar_41[2] = PRT_VALUE.PrtMkDefaultValue(Main.type_2_PRT_TYPE);
argCloneVar_41[1] = PRT_VALUE.PrtMkDefaultValue(Main.type_2_PRT_TYPE);
argCloneVar_41[0] = PRT_VALUE.PrtMkDefaultValue(Main.type_1_PRT_TYPE);
entryCtxt.PushReturnTo(0, argCloneVar_41, currentEvent, currentArg);

InitializeMotionPlanning_0:
Main.ROBOT_SCAN_LOCATIONS(myHandle, entryCtxt);

;
if ((entryCtxt.reason == ContinuationReason.Return)) {
locals[1] = PRT_VALUE.PrtCloneValue(entryCtxt.retVal);

} else {
entryCtxt.PushReturnTo(1, locals, currentEvent, currentArg);
return;

}

InitializeMotionPlanning_loop_start_0:
argCloneVar_42 = null;
entryCtxt.PushReturnTo(0, argCloneVar_42, currentEvent, currentArg);

InitializeMotionPlanning_1:
Main.SIZE_OF_GRID(myHandle, entryCtxt);

;
if ((entryCtxt.reason == ContinuationReason.Return)) {
ret_7 = entryCtxt.retVal;

} else {
entryCtxt.PushReturnTo(2, locals, currentEvent, currentArg);
return;

}
tmpVar_108 = PRT_VALUE.PrtMkDefaultValue(Main.type_5_PRT_TYPE);
PRT_VALUE.PrtPrimSetBool(tmpVar_108, (locals[3].nt <= ret_7.nt));
if (!tmpVar_108.bl) {
goto InitializeMotionPlanning_loop_end_0;
}
tmp_147 = PRT_VALUE.PrtMkDefaultValue(Main.type_1_PRT_TYPE);
PRT_VALUE.PrtPrimSetInt(tmp_147, 1);
tmpVar_109 = PRT_VALUE.PrtIsEqualValue(locals[3], tmp_147);
tmpVar_110 = PRT_VALUE.PrtMkDefaultValue(Main.type_5_PRT_TYPE);
PRT_VALUE.PrtPrimSetBool(tmpVar_110, tmpVar_109);
if (!tmpVar_110.bl) {
goto InitializeMotionPlanning_if_1_else;
}
tmpVar_111 = PRT_VALUE.PrtMkDefaultValue(Main.type_2_PRT_TYPE);
locals[2] = PRT_VALUE.PrtCloneValue(tmpVar_111);
tmpVar_112 = PRT_VALUE.PrtSeqSizeOf(locals[2]);
retVal_5 = PRT_VALUE.PrtMkDefaultValue(Main.type_1_PRT_TYPE);
PRT_VALUE.PrtPrimSetInt(retVal_5, tmpVar_112);
tmpTuple_19 = PRT_VALUE.PrtMkDefaultValue(Main.type_3_PRT_TYPE);
PRT_VALUE.PrtTupleSet(tmpTuple_19, 0, retVal_5);
PRT_VALUE.PrtTupleSet(tmpTuple_19, 1, locals[3]);
idx_0 = PRT_VALUE.PrtTupleGet(tmpTuple_19, 0);
val_0 = PRT_VALUE.PrtTupleGet(tmpTuple_19, 1);
PRT_VALUE.PrtSeqInsert(locals[2], idx_0, val_0);
tmpVar_113 = PRT_VALUE.PrtSeqSizeOf(locals[2]);
retVal_6 = PRT_VALUE.PrtMkDefaultValue(Main.type_1_PRT_TYPE);
PRT_VALUE.PrtPrimSetInt(retVal_6, tmpVar_113);
tmp_148 = PRT_VALUE.PrtMkDefaultValue(Main.type_1_PRT_TYPE);
PRT_VALUE.PrtPrimSetInt(tmp_148, 1);
tmpVar_114 = PRT_VALUE.PrtMkDefaultValue(Main.type_1_PRT_TYPE);
PRT_VALUE.PrtPrimSetInt(tmpVar_114, (locals[3].nt + tmp_148.nt));
tmpTuple_20 = PRT_VALUE.PrtMkDefaultValue(Main.type_3_PRT_TYPE);
PRT_VALUE.PrtTupleSet(tmpTuple_20, 0, retVal_6);
PRT_VALUE.PrtTupleSet(tmpTuple_20, 1, tmpVar_114);
idx_1 = PRT_VALUE.PrtTupleGet(tmpTuple_20, 0);
val_1 = PRT_VALUE.PrtTupleGet(tmpTuple_20, 1);
PRT_VALUE.PrtSeqInsert(locals[2], idx_1, val_1);
tmp_149 = PRT_VALUE.PrtMkDefaultValue(Main.type_1_PRT_TYPE);
PRT_VALUE.PrtPrimSetInt(tmp_149, 1);
tmpVar_115 = PRT_VALUE.PrtMkDefaultValue(Main.type_1_PRT_TYPE);
PRT_VALUE.PrtPrimSetInt(tmpVar_115, (locals[3].nt + tmp_149.nt));
tmpTuple_21 = PRT_VALUE.PrtMkDefaultValue(Main.type_3_PRT_TYPE);
PRT_VALUE.PrtTupleSet(tmpTuple_21, 0, locals[3]);
PRT_VALUE.PrtTupleSet(tmpTuple_21, 1, tmpVar_115);
PRT_VALUE.PrtMapSet(locals[0], tmpTuple_21, locals[2]);
goto InitializeMotionPlanning_if_1_end;
InitializeMotionPlanning_if_1_else:
argCloneVar_43 = null;
entryCtxt.PushReturnTo(0, argCloneVar_43, currentEvent, currentArg);

InitializeMotionPlanning_2:
Main.SIZE_OF_GRID(myHandle, entryCtxt);

;
if ((entryCtxt.reason == ContinuationReason.Return)) {
ret_8 = entryCtxt.retVal;

} else {
entryCtxt.PushReturnTo(3, locals, currentEvent, currentArg);
return;

}
tmpVar_116 = PRT_VALUE.PrtIsEqualValue(locals[3], ret_8);
tmpVar_117 = PRT_VALUE.PrtMkDefaultValue(Main.type_5_PRT_TYPE);
PRT_VALUE.PrtPrimSetBool(tmpVar_117, tmpVar_116);
if (!tmpVar_117.bl) {
goto InitializeMotionPlanning_if_0_else;
}
tmpVar_118 = PRT_VALUE.PrtMkDefaultValue(Main.type_2_PRT_TYPE);
locals[2] = PRT_VALUE.PrtCloneValue(tmpVar_118);
tmpVar_119 = PRT_VALUE.PrtSeqSizeOf(locals[2]);
retVal_7 = PRT_VALUE.PrtMkDefaultValue(Main.type_1_PRT_TYPE);
PRT_VALUE.PrtPrimSetInt(retVal_7, tmpVar_119);
tmpTuple_22 = PRT_VALUE.PrtMkDefaultValue(Main.type_3_PRT_TYPE);
PRT_VALUE.PrtTupleSet(tmpTuple_22, 0, retVal_7);
PRT_VALUE.PrtTupleSet(tmpTuple_22, 1, locals[3]);
idx_2 = PRT_VALUE.PrtTupleGet(tmpTuple_22, 0);
val_2 = PRT_VALUE.PrtTupleGet(tmpTuple_22, 1);
PRT_VALUE.PrtSeqInsert(locals[2], idx_2, val_2);
tmpVar_120 = PRT_VALUE.PrtSeqSizeOf(locals[2]);
retVal_8 = PRT_VALUE.PrtMkDefaultValue(Main.type_1_PRT_TYPE);
PRT_VALUE.PrtPrimSetInt(retVal_8, tmpVar_120);
tmp_150 = PRT_VALUE.PrtMkDefaultValue(Main.type_1_PRT_TYPE);
PRT_VALUE.PrtPrimSetInt(tmp_150, 1);
tmpVar_121 = PRT_VALUE.PrtMkDefaultValue(Main.type_1_PRT_TYPE);
PRT_VALUE.PrtPrimSetInt(tmpVar_121, (locals[3].nt - tmp_150.nt));
tmpTuple_23 = PRT_VALUE.PrtMkDefaultValue(Main.type_3_PRT_TYPE);
PRT_VALUE.PrtTupleSet(tmpTuple_23, 0, retVal_8);
PRT_VALUE.PrtTupleSet(tmpTuple_23, 1, tmpVar_121);
idx_3 = PRT_VALUE.PrtTupleGet(tmpTuple_23, 0);
val_3 = PRT_VALUE.PrtTupleGet(tmpTuple_23, 1);
PRT_VALUE.PrtSeqInsert(locals[2], idx_3, val_3);
tmp_151 = PRT_VALUE.PrtMkDefaultValue(Main.type_1_PRT_TYPE);
PRT_VALUE.PrtPrimSetInt(tmp_151, 1);
tmpVar_122 = PRT_VALUE.PrtMkDefaultValue(Main.type_1_PRT_TYPE);
PRT_VALUE.PrtPrimSetInt(tmpVar_122, (locals[3].nt - tmp_151.nt));
tmpTuple_24 = PRT_VALUE.PrtMkDefaultValue(Main.type_3_PRT_TYPE);
PRT_VALUE.PrtTupleSet(tmpTuple_24, 0, locals[3]);
PRT_VALUE.PrtTupleSet(tmpTuple_24, 1, tmpVar_122);
PRT_VALUE.PrtMapSet(locals[0], tmpTuple_24, locals[2]);
goto InitializeMotionPlanning_if_0_end;
InitializeMotionPlanning_if_0_else:
tmpVar_123 = PRT_VALUE.PrtMkDefaultValue(Main.type_2_PRT_TYPE);
locals[2] = PRT_VALUE.PrtCloneValue(tmpVar_123);
tmpVar_124 = PRT_VALUE.PrtSeqSizeOf(locals[2]);
retVal_9 = PRT_VALUE.PrtMkDefaultValue(Main.type_1_PRT_TYPE);
PRT_VALUE.PrtPrimSetInt(retVal_9, tmpVar_124);
tmpTuple_25 = PRT_VALUE.PrtMkDefaultValue(Main.type_3_PRT_TYPE);
PRT_VALUE.PrtTupleSet(tmpTuple_25, 0, retVal_9);
PRT_VALUE.PrtTupleSet(tmpTuple_25, 1, locals[3]);
idx_4 = PRT_VALUE.PrtTupleGet(tmpTuple_25, 0);
val_4 = PRT_VALUE.PrtTupleGet(tmpTuple_25, 1);
PRT_VALUE.PrtSeqInsert(locals[2], idx_4, val_4);
tmpVar_125 = PRT_VALUE.PrtSeqSizeOf(locals[2]);
retVal_10 = PRT_VALUE.PrtMkDefaultValue(Main.type_1_PRT_TYPE);
PRT_VALUE.PrtPrimSetInt(retVal_10, tmpVar_125);
tmp_152 = PRT_VALUE.PrtMkDefaultValue(Main.type_1_PRT_TYPE);
PRT_VALUE.PrtPrimSetInt(tmp_152, 1);
tmpVar_126 = PRT_VALUE.PrtMkDefaultValue(Main.type_1_PRT_TYPE);
PRT_VALUE.PrtPrimSetInt(tmpVar_126, (locals[3].nt - tmp_152.nt));
tmpTuple_26 = PRT_VALUE.PrtMkDefaultValue(Main.type_3_PRT_TYPE);
PRT_VALUE.PrtTupleSet(tmpTuple_26, 0, retVal_10);
PRT_VALUE.PrtTupleSet(tmpTuple_26, 1, tmpVar_126);
idx_5 = PRT_VALUE.PrtTupleGet(tmpTuple_26, 0);
val_5 = PRT_VALUE.PrtTupleGet(tmpTuple_26, 1);
PRT_VALUE.PrtSeqInsert(locals[2], idx_5, val_5);
tmp_153 = PRT_VALUE.PrtMkDefaultValue(Main.type_1_PRT_TYPE);
PRT_VALUE.PrtPrimSetInt(tmp_153, 1);
tmpVar_127 = PRT_VALUE.PrtMkDefaultValue(Main.type_1_PRT_TYPE);
PRT_VALUE.PrtPrimSetInt(tmpVar_127, (locals[3].nt - tmp_153.nt));
tmpTuple_27 = PRT_VALUE.PrtMkDefaultValue(Main.type_3_PRT_TYPE);
PRT_VALUE.PrtTupleSet(tmpTuple_27, 0, locals[3]);
PRT_VALUE.PrtTupleSet(tmpTuple_27, 1, tmpVar_127);
PRT_VALUE.PrtMapSet(locals[0], tmpTuple_27, locals[2]);
tmpVar_128 = PRT_VALUE.PrtMkDefaultValue(Main.type_2_PRT_TYPE);
locals[2] = PRT_VALUE.PrtCloneValue(tmpVar_128);
tmpVar_129 = PRT_VALUE.PrtSeqSizeOf(locals[2]);
retVal_11 = PRT_VALUE.PrtMkDefaultValue(Main.type_1_PRT_TYPE);
PRT_VALUE.PrtPrimSetInt(retVal_11, tmpVar_129);
tmpTuple_28 = PRT_VALUE.PrtMkDefaultValue(Main.type_3_PRT_TYPE);
PRT_VALUE.PrtTupleSet(tmpTuple_28, 0, retVal_11);
PRT_VALUE.PrtTupleSet(tmpTuple_28, 1, locals[3]);
idx_6 = PRT_VALUE.PrtTupleGet(tmpTuple_28, 0);
val_6 = PRT_VALUE.PrtTupleGet(tmpTuple_28, 1);
PRT_VALUE.PrtSeqInsert(locals[2], idx_6, val_6);
tmpVar_130 = PRT_VALUE.PrtSeqSizeOf(locals[2]);
retVal_12 = PRT_VALUE.PrtMkDefaultValue(Main.type_1_PRT_TYPE);
PRT_VALUE.PrtPrimSetInt(retVal_12, tmpVar_130);
tmp_154 = PRT_VALUE.PrtMkDefaultValue(Main.type_1_PRT_TYPE);
PRT_VALUE.PrtPrimSetInt(tmp_154, 1);
tmpVar_131 = PRT_VALUE.PrtMkDefaultValue(Main.type_1_PRT_TYPE);
PRT_VALUE.PrtPrimSetInt(tmpVar_131, (locals[3].nt + tmp_154.nt));
tmpTuple_29 = PRT_VALUE.PrtMkDefaultValue(Main.type_3_PRT_TYPE);
PRT_VALUE.PrtTupleSet(tmpTuple_29, 0, retVal_12);
PRT_VALUE.PrtTupleSet(tmpTuple_29, 1, tmpVar_131);
idx_7 = PRT_VALUE.PrtTupleGet(tmpTuple_29, 0);
val_7 = PRT_VALUE.PrtTupleGet(tmpTuple_29, 1);
PRT_VALUE.PrtSeqInsert(locals[2], idx_7, val_7);
tmp_155 = PRT_VALUE.PrtMkDefaultValue(Main.type_1_PRT_TYPE);
PRT_VALUE.PrtPrimSetInt(tmp_155, 1);
tmpVar_132 = PRT_VALUE.PrtMkDefaultValue(Main.type_1_PRT_TYPE);
PRT_VALUE.PrtPrimSetInt(tmpVar_132, (locals[3].nt + tmp_155.nt));
tmpTuple_30 = PRT_VALUE.PrtMkDefaultValue(Main.type_3_PRT_TYPE);
PRT_VALUE.PrtTupleSet(tmpTuple_30, 0, locals[3]);
PRT_VALUE.PrtTupleSet(tmpTuple_30, 1, tmpVar_132);
PRT_VALUE.PrtMapSet(locals[0], tmpTuple_30, locals[2]);

;

InitializeMotionPlanning_if_0_end:

;

;

InitializeMotionPlanning_if_1_end:

;
tmp_156 = PRT_VALUE.PrtMkDefaultValue(Main.type_1_PRT_TYPE);
PRT_VALUE.PrtPrimSetInt(tmp_156, 1);
tmpVar_133 = PRT_VALUE.PrtMkDefaultValue(Main.type_1_PRT_TYPE);
PRT_VALUE.PrtPrimSetInt(tmpVar_133, (locals[3].nt + tmp_156.nt));
locals[3] = PRT_VALUE.PrtCloneValue(tmpVar_133);
goto InitializeMotionPlanning_loop_start_0;
InitializeMotionPlanning_loop_end_0:

;

;
entryCtxt.ReturnVal(locals[0]);
return;

;
entryCtxt.Return();
return;

;

}
static void CAT_CAGE_LOC(SM_HANDLE myHandle, Continuation entryCtxt) {
PRT_VALUE_ARRAY locals;
SM_EVENT currentEvent;
PRT_VALUE currentArg;
PRT_VALUE tmp_157;
StackFrame retTo_111;

dummy:
retTo_111 = entryCtxt.PopReturnTo();
locals = retTo_111.locals;
currentEvent = retTo_111.currentEvent;
currentArg = retTo_111.currentArg;
if ((retTo_111.pc == 0)) {
goto start;
}
assert(false, "Internal error");

start:
tmp_157 = PRT_VALUE.PrtMkDefaultValue(Main.type_1_PRT_TYPE);
PRT_VALUE.PrtPrimSetInt(tmp_157, 4);
entryCtxt.ReturnVal(tmp_157);
return;

;
entryCtxt.Return();
return;

;

}
static void DOG_CAGE_LOC(SM_HANDLE myHandle, Continuation entryCtxt) {
PRT_VALUE_ARRAY locals;
SM_EVENT currentEvent;
PRT_VALUE currentArg;
PRT_VALUE tmp_158;
StackFrame retTo_112;

dummy:
retTo_112 = entryCtxt.PopReturnTo();
locals = retTo_112.locals;
currentEvent = retTo_112.currentEvent;
currentArg = retTo_112.currentArg;
if ((retTo_112.pc == 0)) {
goto start;
}
assert(false, "Internal error");

start:
tmp_158 = PRT_VALUE.PrtMkDefaultValue(Main.type_1_PRT_TYPE);
PRT_VALUE.PrtPrimSetInt(tmp_158, 13);
entryCtxt.ReturnVal(tmp_158);
return;

;
entryCtxt.Return();
return;

;

}
static void MICE_CAGE_LOC(SM_HANDLE myHandle, Continuation entryCtxt) {
PRT_VALUE_ARRAY locals;
SM_EVENT currentEvent;
PRT_VALUE currentArg;
PRT_VALUE tmp_159;
StackFrame retTo_113;

dummy:
retTo_113 = entryCtxt.PopReturnTo();
locals = retTo_113.locals;
currentEvent = retTo_113.currentEvent;
currentArg = retTo_113.currentArg;
if ((retTo_113.pc == 0)) {
goto start;
}
assert(false, "Internal error");

start:
tmp_159 = PRT_VALUE.PrtMkDefaultValue(Main.type_1_PRT_TYPE);
PRT_VALUE.PrtPrimSetInt(tmp_159, 16);
entryCtxt.ReturnVal(tmp_159);
return;

;
entryCtxt.Return();
return;

;

}
static void BATTERY_THRESHOLD(SM_HANDLE myHandle, Continuation entryCtxt) {
PRT_VALUE_ARRAY locals;
SM_EVENT currentEvent;
PRT_VALUE currentArg;
PRT_VALUE tmp_160;
StackFrame retTo_114;

dummy:
retTo_114 = entryCtxt.PopReturnTo();
locals = retTo_114.locals;
currentEvent = retTo_114.currentEvent;
currentArg = retTo_114.currentArg;
if ((retTo_114.pc == 0)) {
goto start;
}
assert(false, "Internal error");

start:
tmp_160 = PRT_VALUE.PrtMkDefaultValue(Main.type_1_PRT_TYPE);
PRT_VALUE.PrtPrimSetInt(tmp_160, 5);
entryCtxt.ReturnVal(tmp_160);
return;

;
entryCtxt.Return();
return;

;

}
static void DOG(SM_HANDLE myHandle, Continuation entryCtxt) {
PRT_VALUE_ARRAY locals;
SM_EVENT currentEvent;
PRT_VALUE currentArg;
PRT_VALUE tmp_161;
StackFrame retTo_115;

dummy:
retTo_115 = entryCtxt.PopReturnTo();
locals = retTo_115.locals;
currentEvent = retTo_115.currentEvent;
currentArg = retTo_115.currentArg;
if ((retTo_115.pc == 0)) {
goto start;
}
assert(false, "Internal error");

start:
tmp_161 = PRT_VALUE.PrtMkDefaultValue(Main.type_1_PRT_TYPE);
PRT_VALUE.PrtPrimSetInt(tmp_161, 0);
entryCtxt.ReturnVal(tmp_161);
return;

;
entryCtxt.Return();
return;

;

}
static void CAT(SM_HANDLE myHandle, Continuation entryCtxt) {
PRT_VALUE_ARRAY locals;
SM_EVENT currentEvent;
PRT_VALUE currentArg;
PRT_VALUE tmp_162;
StackFrame retTo_116;

dummy:
retTo_116 = entryCtxt.PopReturnTo();
locals = retTo_116.locals;
currentEvent = retTo_116.currentEvent;
currentArg = retTo_116.currentArg;
if ((retTo_116.pc == 0)) {
goto start;
}
assert(false, "Internal error");

start:
tmp_162 = PRT_VALUE.PrtMkDefaultValue(Main.type_1_PRT_TYPE);
PRT_VALUE.PrtPrimSetInt(tmp_162, 1);
entryCtxt.ReturnVal(tmp_162);
return;

;
entryCtxt.Return();
return;

;

}
static void MICE(SM_HANDLE myHandle, Continuation entryCtxt) {
PRT_VALUE_ARRAY locals;
SM_EVENT currentEvent;
PRT_VALUE currentArg;
PRT_VALUE tmp_163;
StackFrame retTo_117;

dummy:
retTo_117 = entryCtxt.PopReturnTo();
locals = retTo_117.locals;
currentEvent = retTo_117.currentEvent;
currentArg = retTo_117.currentArg;
if ((retTo_117.pc == 0)) {
goto start;
}
assert(false, "Internal error");

start:
tmp_163 = PRT_VALUE.PrtMkDefaultValue(Main.type_1_PRT_TYPE);
PRT_VALUE.PrtPrimSetInt(tmp_163, 2);
entryCtxt.ReturnVal(tmp_163);
return;

;
entryCtxt.Return();
return;

;

}
static void BATTERY_CHARGE_LOCATION(SM_HANDLE myHandle, Continuation entryCtxt) {
PRT_VALUE_ARRAY locals;
SM_EVENT currentEvent;
PRT_VALUE currentArg;
PRT_VALUE tmp_164;
StackFrame retTo_118;

dummy:
retTo_118 = entryCtxt.PopReturnTo();
locals = retTo_118.locals;
currentEvent = retTo_118.currentEvent;
currentArg = retTo_118.currentArg;
if ((retTo_118.pc == 0)) {
goto start;
}
assert(false, "Internal error");

start:
tmp_164 = PRT_VALUE.PrtMkDefaultValue(Main.type_1_PRT_TYPE);
PRT_VALUE.PrtPrimSetInt(tmp_164, 15);
entryCtxt.ReturnVal(tmp_164);
return;

;
entryCtxt.Return();
return;

;

}
static void ROBOT_START_STATE(SM_HANDLE myHandle, Continuation entryCtxt) {
PRT_VALUE_ARRAY locals;
SM_EVENT currentEvent;
PRT_VALUE currentArg;
PRT_VALUE tmp_165;
PRT_VALUE tmp_166;
PRT_VALUE tmpTuple_31;
StackFrame retTo_119;

dummy:
retTo_119 = entryCtxt.PopReturnTo();
locals = retTo_119.locals;
currentEvent = retTo_119.currentEvent;
currentArg = retTo_119.currentArg;
if ((retTo_119.pc == 0)) {
goto start;
}
assert(false, "Internal error");

start:
tmp_165 = PRT_VALUE.PrtMkDefaultValue(Main.type_1_PRT_TYPE);
PRT_VALUE.PrtPrimSetInt(tmp_165, 1);
tmp_166 = PRT_VALUE.PrtMkDefaultValue(Main.type_1_PRT_TYPE);
PRT_VALUE.PrtPrimSetInt(tmp_166, 20);
tmpTuple_31 = PRT_VALUE.PrtMkDefaultValue(Main.type_9_PRT_TYPE);
PRT_VALUE.PrtTupleSet(tmpTuple_31, 0, tmp_165);
PRT_VALUE.PrtTupleSet(tmpTuple_31, 1, tmp_166);
entryCtxt.ReturnVal(tmpTuple_31);
return;

;
entryCtxt.Return();
return;

;

}
static void SIZE_OF_GRID(SM_HANDLE myHandle, Continuation entryCtxt) {
PRT_VALUE_ARRAY locals;
SM_EVENT currentEvent;
PRT_VALUE currentArg;
PRT_VALUE tmp_167;
StackFrame retTo_120;

dummy:
retTo_120 = entryCtxt.PopReturnTo();
locals = retTo_120.locals;
currentEvent = retTo_120.currentEvent;
currentArg = retTo_120.currentArg;
if ((retTo_120.pc == 0)) {
goto start;
}
assert(false, "Internal error");

start:
tmp_167 = PRT_VALUE.PrtMkDefaultValue(Main.type_1_PRT_TYPE);
PRT_VALUE.PrtPrimSetInt(tmp_167, 16);
entryCtxt.ReturnVal(tmp_167);
return;

;
entryCtxt.Return();
return;

;

}
static void ROBOT_SCAN_LOCATIONS(SM_HANDLE myHandle, Continuation entryCtxt) {
PRT_VALUE_ARRAY locals;
SM_EVENT currentEvent;
PRT_VALUE currentArg;
PRT_VALUE tmp_168;
PRT_VALUE_ARRAY argCloneVar_44;
PRT_VALUE_ARRAY argCloneVar_45;
PRT_VALUE ret_9;
PRT_VALUE tmpVar_134;
int tmpVar_135;
PRT_VALUE retVal_13;
PRT_VALUE tmp_169;
PRT_VALUE tmpVar_136;
PRT_VALUE tmp_170;
PRT_VALUE tmpVar_137;
bool tmpVar_138;
PRT_VALUE tmpVar_139;
PRT_VALUE tmpVar_140;
PRT_VALUE tmp_171;
int tmpVar_141;
PRT_VALUE retVal_14;
PRT_VALUE tmpTuple_32;
PRT_VALUE idx_8;
PRT_VALUE val_8;
PRT_VALUE tmp_172;
PRT_VALUE tmpVar_142;
StackFrame retTo_121;

dummy:
retTo_121 = entryCtxt.PopReturnTo();
locals = retTo_121.locals;
currentEvent = retTo_121.currentEvent;
currentArg = retTo_121.currentArg;
if ((retTo_121.pc == 0)) {
goto start;
}
if ((retTo_121.pc == 1)) {
goto ROBOT_SCAN_LOCATIONS_0;
}
if ((retTo_121.pc == 2)) {
goto ROBOT_SCAN_LOCATIONS_1;
}
assert(false, "Internal error");

start:
tmp_168 = PRT_VALUE.PrtMkDefaultValue(Main.type_1_PRT_TYPE);
PRT_VALUE.PrtPrimSetInt(tmp_168, 0);
locals[0] = PRT_VALUE.PrtCloneValue(tmp_168);
argCloneVar_44 = new PRT_VALUE_ARRAY[1];
argCloneVar_44[0] = PRT_VALUE.PrtMkDefaultValue(Main.type_2_PRT_TYPE);
entryCtxt.PushReturnTo(0, argCloneVar_44, currentEvent, currentArg);

ROBOT_SCAN_LOCATIONS_0:
Main.GetStaticObstacles(myHandle, entryCtxt);

;
if ((entryCtxt.reason == ContinuationReason.Return)) {
locals[2] = PRT_VALUE.PrtCloneValue(entryCtxt.retVal);

} else {
entryCtxt.PushReturnTo(1, locals, currentEvent, currentArg);
return;

}

ROBOT_SCAN_LOCATIONS_loop_start_0:
argCloneVar_45 = null;
entryCtxt.PushReturnTo(0, argCloneVar_45, currentEvent, currentArg);

ROBOT_SCAN_LOCATIONS_1:
Main.SIZE_OF_GRID(myHandle, entryCtxt);

;
if ((entryCtxt.reason == ContinuationReason.Return)) {
ret_9 = entryCtxt.retVal;

} else {
entryCtxt.PushReturnTo(2, locals, currentEvent, currentArg);
return;

}
tmpVar_134 = PRT_VALUE.PrtMkDefaultValue(Main.type_5_PRT_TYPE);
PRT_VALUE.PrtPrimSetBool(tmpVar_134, (locals[0].nt < ret_9.nt));
if (!tmpVar_134.bl) {
goto ROBOT_SCAN_LOCATIONS_loop_end_0;
}
tmpVar_135 = PRT_VALUE.PrtSeqSizeOf(locals[2]);
retVal_13 = PRT_VALUE.PrtMkDefaultValue(Main.type_1_PRT_TYPE);
PRT_VALUE.PrtPrimSetInt(retVal_13, tmpVar_135);
tmp_169 = PRT_VALUE.PrtMkDefaultValue(Main.type_1_PRT_TYPE);
PRT_VALUE.PrtPrimSetInt(tmp_169, 0);
tmpVar_136 = PRT_VALUE.PrtMkDefaultValue(Main.type_5_PRT_TYPE);
PRT_VALUE.PrtPrimSetBool(tmpVar_136, (retVal_13.nt > tmp_169.nt));
if (tmpVar_136.bl) {
tmp_170 = PRT_VALUE.PrtMkDefaultValue(Main.type_1_PRT_TYPE);
PRT_VALUE.PrtPrimSetInt(tmp_170, 0);
tmpVar_137 = PRT_VALUE.PrtSeqGet(locals[2], tmp_170);
tmpVar_138 = PRT_VALUE.PrtIsEqualValue(locals[0], tmpVar_137);
tmpVar_139 = PRT_VALUE.PrtMkDefaultValue(Main.type_5_PRT_TYPE);
PRT_VALUE.PrtPrimSetBool(tmpVar_139, tmpVar_138);

}
tmpVar_140 = PRT_VALUE.PrtMkDefaultValue(Main.type_5_PRT_TYPE);
PRT_VALUE.PrtPrimSetBool(tmpVar_140, (tmpVar_136.bl && tmpVar_139.bl));
if (!tmpVar_140.bl) {
goto ROBOT_SCAN_LOCATIONS_if_0_else;
}
tmp_171 = PRT_VALUE.PrtMkDefaultValue(Main.type_1_PRT_TYPE);
PRT_VALUE.PrtPrimSetInt(tmp_171, 0);
PRT_VALUE.PrtSeqRemove(locals[2], tmp_171);
goto ROBOT_SCAN_LOCATIONS_if_0_end;
ROBOT_SCAN_LOCATIONS_if_0_else:
tmpVar_141 = PRT_VALUE.PrtSeqSizeOf(locals[1]);
retVal_14 = PRT_VALUE.PrtMkDefaultValue(Main.type_1_PRT_TYPE);
PRT_VALUE.PrtPrimSetInt(retVal_14, tmpVar_141);
tmpTuple_32 = PRT_VALUE.PrtMkDefaultValue(Main.type_3_PRT_TYPE);
PRT_VALUE.PrtTupleSet(tmpTuple_32, 0, retVal_14);
PRT_VALUE.PrtTupleSet(tmpTuple_32, 1, locals[0]);
idx_8 = PRT_VALUE.PrtTupleGet(tmpTuple_32, 0);
val_8 = PRT_VALUE.PrtTupleGet(tmpTuple_32, 1);
PRT_VALUE.PrtSeqInsert(locals[1], idx_8, val_8);

;

ROBOT_SCAN_LOCATIONS_if_0_end:

;
tmp_172 = PRT_VALUE.PrtMkDefaultValue(Main.type_1_PRT_TYPE);
PRT_VALUE.PrtPrimSetInt(tmp_172, 1);
tmpVar_142 = PRT_VALUE.PrtMkDefaultValue(Main.type_1_PRT_TYPE);
PRT_VALUE.PrtPrimSetInt(tmpVar_142, (locals[0].nt + tmp_172.nt));
locals[0] = PRT_VALUE.PrtCloneValue(tmpVar_142);
goto ROBOT_SCAN_LOCATIONS_loop_start_0;
ROBOT_SCAN_LOCATIONS_loop_end_0:

;

;
entryCtxt.ReturnVal(locals[1]);
return;

;
entryCtxt.Return();
return;

;

}
static void GetStaticGoals(SM_HANDLE myHandle, Continuation entryCtxt) {
PRT_VALUE_ARRAY locals;
SM_EVENT currentEvent;
PRT_VALUE currentArg;
PRT_VALUE tmp_173;
PRT_VALUE tmp_174;
PRT_VALUE tmp_175;
PRT_VALUE tmp_176;
PRT_VALUE tmpTuple_33;
PRT_VALUE tmp_177;
PRT_VALUE tmp_178;
PRT_VALUE tmp_179;
PRT_VALUE tmp_180;
PRT_VALUE tmpTuple_34;
PRT_VALUE tmp_181;
PRT_VALUE tmp_182;
PRT_VALUE tmp_183;
PRT_VALUE tmp_184;
PRT_VALUE tmpTuple_35;
PRT_VALUE tmp_185;
PRT_VALUE tmp_186;
PRT_VALUE tmp_187;
PRT_VALUE tmp_188;
PRT_VALUE tmpTuple_36;
StackFrame retTo_122;

dummy:
retTo_122 = entryCtxt.PopReturnTo();
locals = retTo_122.locals;
currentEvent = retTo_122.currentEvent;
currentArg = retTo_122.currentArg;
if ((retTo_122.pc == 0)) {
goto start;
}
assert(false, "Internal error");

start:
tmp_173 = PRT_VALUE.PrtMkDefaultValue(Main.type_1_PRT_TYPE);
PRT_VALUE.PrtPrimSetInt(tmp_173, 2);
tmp_174 = PRT_VALUE.PrtMkDefaultValue(Main.type_5_PRT_TYPE);
PRT_VALUE.PrtPrimSetBool(tmp_174, false);
tmp_175 = PRT_VALUE.PrtMkDefaultValue(Main.type_5_PRT_TYPE);
PRT_VALUE.PrtPrimSetBool(tmp_175, false);
tmp_176 = PRT_VALUE.PrtMkDefaultValue(Main.type_5_PRT_TYPE);
PRT_VALUE.PrtPrimSetBool(tmp_176, true);
tmpTuple_33 = PRT_VALUE.PrtMkDefaultValue(Main.type_6_PRT_TYPE);
PRT_VALUE.PrtTupleSet(tmpTuple_33, 0, tmp_174);
PRT_VALUE.PrtTupleSet(tmpTuple_33, 1, tmp_175);
PRT_VALUE.PrtTupleSet(tmpTuple_33, 2, tmp_176);
PRT_VALUE.PrtMapSet(locals[0], tmp_173, tmpTuple_33);
tmp_177 = PRT_VALUE.PrtMkDefaultValue(Main.type_1_PRT_TYPE);
PRT_VALUE.PrtPrimSetInt(tmp_177, 5);
tmp_178 = PRT_VALUE.PrtMkDefaultValue(Main.type_5_PRT_TYPE);
PRT_VALUE.PrtPrimSetBool(tmp_178, true);
tmp_179 = PRT_VALUE.PrtMkDefaultValue(Main.type_5_PRT_TYPE);
PRT_VALUE.PrtPrimSetBool(tmp_179, false);
tmp_180 = PRT_VALUE.PrtMkDefaultValue(Main.type_5_PRT_TYPE);
PRT_VALUE.PrtPrimSetBool(tmp_180, false);
tmpTuple_34 = PRT_VALUE.PrtMkDefaultValue(Main.type_6_PRT_TYPE);
PRT_VALUE.PrtTupleSet(tmpTuple_34, 0, tmp_178);
PRT_VALUE.PrtTupleSet(tmpTuple_34, 1, tmp_179);
PRT_VALUE.PrtTupleSet(tmpTuple_34, 2, tmp_180);
PRT_VALUE.PrtMapSet(locals[0], tmp_177, tmpTuple_34);
tmp_181 = PRT_VALUE.PrtMkDefaultValue(Main.type_1_PRT_TYPE);
PRT_VALUE.PrtPrimSetInt(tmp_181, 10);
tmp_182 = PRT_VALUE.PrtMkDefaultValue(Main.type_5_PRT_TYPE);
PRT_VALUE.PrtPrimSetBool(tmp_182, false);
tmp_183 = PRT_VALUE.PrtMkDefaultValue(Main.type_5_PRT_TYPE);
PRT_VALUE.PrtPrimSetBool(tmp_183, true);
tmp_184 = PRT_VALUE.PrtMkDefaultValue(Main.type_5_PRT_TYPE);
PRT_VALUE.PrtPrimSetBool(tmp_184, false);
tmpTuple_35 = PRT_VALUE.PrtMkDefaultValue(Main.type_6_PRT_TYPE);
PRT_VALUE.PrtTupleSet(tmpTuple_35, 0, tmp_182);
PRT_VALUE.PrtTupleSet(tmpTuple_35, 1, tmp_183);
PRT_VALUE.PrtTupleSet(tmpTuple_35, 2, tmp_184);
PRT_VALUE.PrtMapSet(locals[0], tmp_181, tmpTuple_35);
tmp_185 = PRT_VALUE.PrtMkDefaultValue(Main.type_1_PRT_TYPE);
PRT_VALUE.PrtPrimSetInt(tmp_185, 11);
tmp_186 = PRT_VALUE.PrtMkDefaultValue(Main.type_5_PRT_TYPE);
PRT_VALUE.PrtPrimSetBool(tmp_186, true);
tmp_187 = PRT_VALUE.PrtMkDefaultValue(Main.type_5_PRT_TYPE);
PRT_VALUE.PrtPrimSetBool(tmp_187, false);
tmp_188 = PRT_VALUE.PrtMkDefaultValue(Main.type_5_PRT_TYPE);
PRT_VALUE.PrtPrimSetBool(tmp_188, false);
tmpTuple_36 = PRT_VALUE.PrtMkDefaultValue(Main.type_6_PRT_TYPE);
PRT_VALUE.PrtTupleSet(tmpTuple_36, 0, tmp_186);
PRT_VALUE.PrtTupleSet(tmpTuple_36, 1, tmp_187);
PRT_VALUE.PrtTupleSet(tmpTuple_36, 2, tmp_188);
PRT_VALUE.PrtMapSet(locals[0], tmp_185, tmpTuple_36);
entryCtxt.ReturnVal(locals[0]);
return;

;
entryCtxt.Return();
return;

;

}
static void GetStaticObstacles(SM_HANDLE myHandle, Continuation entryCtxt) {
PRT_VALUE_ARRAY locals;
SM_EVENT currentEvent;
PRT_VALUE currentArg;
int tmpVar_143;
PRT_VALUE retVal_15;
PRT_VALUE tmp_189;
PRT_VALUE tmpTuple_37;
PRT_VALUE idx_9;
PRT_VALUE val_9;
int tmpVar_144;
PRT_VALUE retVal_16;
PRT_VALUE tmp_190;
PRT_VALUE tmpTuple_38;
PRT_VALUE idx_10;
PRT_VALUE val_10;
int tmpVar_145;
PRT_VALUE retVal_17;
PRT_VALUE tmp_191;
PRT_VALUE tmpTuple_39;
PRT_VALUE idx_11;
PRT_VALUE val_11;
StackFrame retTo_123;

dummy:
retTo_123 = entryCtxt.PopReturnTo();
locals = retTo_123.locals;
currentEvent = retTo_123.currentEvent;
currentArg = retTo_123.currentArg;
if ((retTo_123.pc == 0)) {
goto start;
}
assert(false, "Internal error");

start:
tmpVar_143 = PRT_VALUE.PrtSeqSizeOf(locals[0]);
retVal_15 = PRT_VALUE.PrtMkDefaultValue(Main.type_1_PRT_TYPE);
PRT_VALUE.PrtPrimSetInt(retVal_15, tmpVar_143);
tmp_189 = PRT_VALUE.PrtMkDefaultValue(Main.type_1_PRT_TYPE);
PRT_VALUE.PrtPrimSetInt(tmp_189, 6);
tmpTuple_37 = PRT_VALUE.PrtMkDefaultValue(Main.type_3_PRT_TYPE);
PRT_VALUE.PrtTupleSet(tmpTuple_37, 0, retVal_15);
PRT_VALUE.PrtTupleSet(tmpTuple_37, 1, tmp_189);
idx_9 = PRT_VALUE.PrtTupleGet(tmpTuple_37, 0);
val_9 = PRT_VALUE.PrtTupleGet(tmpTuple_37, 1);
PRT_VALUE.PrtSeqInsert(locals[0], idx_9, val_9);
tmpVar_144 = PRT_VALUE.PrtSeqSizeOf(locals[0]);
retVal_16 = PRT_VALUE.PrtMkDefaultValue(Main.type_1_PRT_TYPE);
PRT_VALUE.PrtPrimSetInt(retVal_16, tmpVar_144);
tmp_190 = PRT_VALUE.PrtMkDefaultValue(Main.type_1_PRT_TYPE);
PRT_VALUE.PrtPrimSetInt(tmp_190, 7);
tmpTuple_38 = PRT_VALUE.PrtMkDefaultValue(Main.type_3_PRT_TYPE);
PRT_VALUE.PrtTupleSet(tmpTuple_38, 0, retVal_16);
PRT_VALUE.PrtTupleSet(tmpTuple_38, 1, tmp_190);
idx_10 = PRT_VALUE.PrtTupleGet(tmpTuple_38, 0);
val_10 = PRT_VALUE.PrtTupleGet(tmpTuple_38, 1);
PRT_VALUE.PrtSeqInsert(locals[0], idx_10, val_10);
tmpVar_145 = PRT_VALUE.PrtSeqSizeOf(locals[0]);
retVal_17 = PRT_VALUE.PrtMkDefaultValue(Main.type_1_PRT_TYPE);
PRT_VALUE.PrtPrimSetInt(retVal_17, tmpVar_145);
tmp_191 = PRT_VALUE.PrtMkDefaultValue(Main.type_1_PRT_TYPE);
PRT_VALUE.PrtPrimSetInt(tmp_191, 9);
tmpTuple_39 = PRT_VALUE.PrtMkDefaultValue(Main.type_3_PRT_TYPE);
PRT_VALUE.PrtTupleSet(tmpTuple_39, 0, retVal_17);
PRT_VALUE.PrtTupleSet(tmpTuple_39, 1, tmp_191);
idx_11 = PRT_VALUE.PrtTupleGet(tmpTuple_39, 0);
val_11 = PRT_VALUE.PrtTupleGet(tmpTuple_39, 1);
PRT_VALUE.PrtSeqInsert(locals[0], idx_11, val_11);
entryCtxt.ReturnVal(locals[0]);
return;

;
entryCtxt.Return();
return;

;

}
static void EventDetected(SM_HANDLE myHandle, Continuation entryCtxt) {
PRT_VALUE_ARRAY locals;
SM_EVENT currentEvent;
PRT_VALUE currentArg;
PRT_VALUE tmpVar_146;
PRT_VALUE tmpVal_79;
PRT_VALUE tmpVar_147;
PRT_VALUE tmpVal_80;
PRT_VALUE tmpVar_148;
PRT_VALUE tmpVar_149;
PRT_VALUE tmpVal_81;
PRT_VALUE tmpVar_150;
PRT_VALUE tmp_192;
PRT_VALUE tmp_193;
StackFrame retTo_124;

dummy:
retTo_124 = entryCtxt.PopReturnTo();
locals = retTo_124.locals;
currentEvent = retTo_124.currentEvent;
currentArg = retTo_124.currentArg;
if ((retTo_124.pc == 0)) {
goto start;
}
assert(false, "Internal error");

start:
tmpVar_146 = PRT_VALUE.PrtCastValue(locals[0], Main.type_6_PRT_TYPE);
tmpVal_79 = PRT_VALUE.PrtTupleGet(tmpVar_146, 1);
if (tmpVal_79.bl) {

} else {
tmpVar_147 = PRT_VALUE.PrtCastValue(locals[0], Main.type_6_PRT_TYPE);
tmpVal_80 = PRT_VALUE.PrtTupleGet(tmpVar_147, 0);

}
tmpVar_148 = PRT_VALUE.PrtMkDefaultValue(Main.type_5_PRT_TYPE);
PRT_VALUE.PrtPrimSetBool(tmpVar_148, (tmpVal_79.bl || tmpVal_80.bl));
if (tmpVar_148.bl) {

} else {
tmpVar_149 = PRT_VALUE.PrtCastValue(locals[0], Main.type_6_PRT_TYPE);
tmpVal_81 = PRT_VALUE.PrtTupleGet(tmpVar_149, 2);

}
tmpVar_150 = PRT_VALUE.PrtMkDefaultValue(Main.type_5_PRT_TYPE);
PRT_VALUE.PrtPrimSetBool(tmpVar_150, (tmpVar_148.bl || tmpVal_81.bl));
if (!tmpVar_150.bl) {
goto EventDetected_if_0_else;
}
tmp_192 = PRT_VALUE.PrtMkDefaultValue(Main.type_5_PRT_TYPE);
PRT_VALUE.PrtPrimSetBool(tmp_192, true);
entryCtxt.ReturnVal(tmp_192);
return;
goto EventDetected_if_0_end;
EventDetected_if_0_else:
tmp_193 = PRT_VALUE.PrtMkDefaultValue(Main.type_5_PRT_TYPE);
PRT_VALUE.PrtPrimSetBool(tmp_193, false);
entryCtxt.ReturnVal(tmp_193);
return;

;

EventDetected_if_0_end:

;

;
entryCtxt.Return();
return;

;

}
static activate void Run() {

dummy:
Main.halt_SM_EVENT = SM_EVENT.Construct(Event._halt, 1, false);
Main.null_SM_EVENT = null;
Main.ReDo_SM_EVENT = SM_EVENT.Construct(Event._ReDo, -1, false);
Main.success_SM_EVENT = SM_EVENT.Construct(Event._success, -1, false);
Main.doScanning_SM_EVENT = SM_EVENT.Construct(Event._doScanning, -1, false);
Main.startNewHerding_SM_EVENT = SM_EVENT.Construct(Event._startNewHerding, -1, false);
Main.continueCurrentHerding_SM_EVENT = SM_EVENT.Construct(Event._continueCurrentHerding, -1, false);
Main.newPlan_SM_EVENT = SM_EVENT.Construct(Event._newPlan, -1, false);
Main.GetEnv_SM_EVENT = SM_EVENT.Construct(Event._GetEnv, -1, false);
Main.SetEnv_SM_EVENT = SM_EVENT.Construct(Event._SetEnv, -1, false);
Main.EnvState_SM_EVENT = SM_EVENT.Construct(Event._EnvState, -1, false);
Main.UpdateRobotState_SM_EVENT = SM_EVENT.Construct(Event._UpdateRobotState, -1, false);
Main.GetRobotState_SM_EVENT = SM_EVENT.Construct(Event._GetRobotState, 2, true);
Main.ExecutePlan_SM_EVENT = SM_EVENT.Construct(Event._ExecutePlan, -1, false);
Main.CancelPlan_SM_EVENT = SM_EVENT.Construct(Event._CancelPlan, -1, false);
Main.GeneratePlanFor_SM_EVENT = SM_EVENT.Construct(Event._GeneratePlanFor, -1, false);
Main.CancelOperation_SM_EVENT = SM_EVENT.Construct(Event._CancelOperation, -1, false);
Main.MotionPlanFor_SM_EVENT = SM_EVENT.Construct(Event._MotionPlanFor, -1, false);
Main.FailureToComputePlan_SM_EVENT = SM_EVENT.Construct(Event._FailureToComputePlan, -1, false);
Main.ReachedDestination_SM_EVENT = SM_EVENT.Construct(Event._ReachedDestination, -1, false);
Main.FailureExecuting_SM_EVENT = SM_EVENT.Construct(Event._FailureExecuting, -1, false);
Main.CancelSucess_SM_EVENT = SM_EVENT.Construct(Event._CancelSucess, -1, false);
Main.BatteryLow_SM_EVENT = SM_EVENT.Construct(Event._BatteryLow, -1, false);
Main.EnvEventDetected_SM_EVENT = SM_EVENT.Construct(Event._EnvEventDetected, 1, true);
Main.CurrentState_SM_EVENT = SM_EVENT.Construct(Event._CurrentState, 2, true);
Main.START_SM_EVENT = SM_EVENT.Construct(Event._START, -1, false);
Main.CANCEL_SM_EVENT = SM_EVENT.Construct(Event._CANCEL, -1, false);
Main.TIMEOUT_SM_EVENT = SM_EVENT.Construct(Event._TIMEOUT, -1, false);
Main.CANCEL_SUCCESS_SM_EVENT = SM_EVENT.Construct(Event._CANCEL_SUCCESS, -1, false);
Main.CANCEL_FAILURE_SM_EVENT = SM_EVENT.Construct(Event._CANCEL_FAILURE, -1, false);
Main.local_SM_EVENT = SM_EVENT.Construct(Event._local, -1, false);
Main.done_SM_EVENT = SM_EVENT.Construct(Event._done, -1, false);
Main.initial_setup_SM_EVENT = SM_EVENT.Construct(Event._initial_setup, -1, false);
Main.infer_SM_EVENT = SM_EVENT.Construct(Event._infer, -1, false);
Main.UNIT_SM_EVENT = SM_EVENT.Construct(Event._UNIT, -1, false);
Main.M_hDog_SM_EVENT = SM_EVENT.Construct(Event._M_hDog, -1, false);
Main.M_sDog_SM_EVENT = SM_EVENT.Construct(Event._M_sDog, -1, false);
Main.M_rDog_SM_EVENT = SM_EVENT.Construct(Event._M_rDog, -1, false);
Main.M_hCat_SM_EVENT = SM_EVENT.Construct(Event._M_hCat, -1, false);
Main.M_sCat_SM_EVENT = SM_EVENT.Construct(Event._M_sCat, -1, false);
Main.M_rCat_SM_EVENT = SM_EVENT.Construct(Event._M_rCat, -1, false);
Main.M_hMice_SM_EVENT = SM_EVENT.Construct(Event._M_hMice, -1, false);
Main.M_sMice_SM_EVENT = SM_EVENT.Construct(Event._M_sMice, -1, false);
Main.M_rMice_SM_EVENT = SM_EVENT.Construct(Event._M_rMice, -1, false);
Main.DriverMachine_Init_SM_STATE = SM_STATE.Construct(State._DriverMachine_Init, ActionOrFun._DriverMachine_AnonFun1, ActionOrFun._DriverMachine_AnonFun0, 0, false, StateTemperature.Warm);
Main.RobotTaskPlanner_Init_SM_STATE = SM_STATE.Construct(State._RobotTaskPlanner_Init, ActionOrFun._RobotTaskPlanner_AnonFun1, ActionOrFun._RobotTaskPlanner_AnonFun0, 1, false, StateTemperature.Warm);
Main.RobotTaskPlanner_SetUpSystem_SM_STATE = SM_STATE.Construct(State._RobotTaskPlanner_SetUpSystem, ActionOrFun._RobotTaskPlanner_AnonFun2, ActionOrFun._RobotTaskPlanner_AnonFun0, 1, false, StateTemperature.Warm);
Main.RobotTaskPlanner_ScanningModeOfOperation_SM_STATE = SM_STATE.Construct(State._RobotTaskPlanner_ScanningModeOfOperation, ActionOrFun._RobotTaskPlanner_AnonFun3, ActionOrFun._RobotTaskPlanner_AnonFun0, 6, false, StateTemperature.Warm);
Main.RobotTaskPlanner_ExecutePlan_SM_STATE = SM_STATE.Construct(State._RobotTaskPlanner_ExecutePlan, ActionOrFun._RobotTaskPlanner_AnonFun5, ActionOrFun._RobotTaskPlanner_AnonFun0, 0, false, StateTemperature.Warm);
Main.RobotTaskPlanner_LowBatteryDetected_SM_STATE = SM_STATE.Construct(State._RobotTaskPlanner_LowBatteryDetected, ActionOrFun._RobotTaskPlanner_AnonFun8, ActionOrFun._RobotTaskPlanner_AnonFun0, 4, false, StateTemperature.Warm);
Main.RobotTaskPlanner_TakeActionOnEnvEventDetected_SM_STATE = SM_STATE.Construct(State._RobotTaskPlanner_TakeActionOnEnvEventDetected, ActionOrFun._RobotTaskPlanner_AnonFun9, ActionOrFun._RobotTaskPlanner_AnonFun0, 0, false, StateTemperature.Warm);
Main.RobotTaskPlanner_SelectGoalLocationAndComputePlan_SM_STATE = SM_STATE.Construct(State._RobotTaskPlanner_SelectGoalLocationAndComputePlan, ActionOrFun._RobotTaskPlanner_AnonFun10, ActionOrFun._RobotTaskPlanner_AnonFun0, 5, false, StateTemperature.Warm);
Main.MotionPlanner_Init_SM_STATE = SM_STATE.Construct(State._MotionPlanner_Init, ActionOrFun._MotionPlanner_AnonFun1, ActionOrFun._MotionPlanner_AnonFun0, 1, false, StateTemperature.Warm);
Main.MotionPlanner_WaitForCommands_SM_STATE = SM_STATE.Construct(State._MotionPlanner_WaitForCommands, ActionOrFun._MotionPlanner_AnonFun0, ActionOrFun._MotionPlanner_AnonFun0, 0, false, StateTemperature.Warm);
Main.MotionPlanExecutor_Init_SM_STATE = SM_STATE.Construct(State._MotionPlanExecutor_Init, ActionOrFun._MotionPlanExecutor_AnonFun1, ActionOrFun._MotionPlanExecutor_AnonFun0, 1, false, StateTemperature.Warm);
Main.MotionPlanExecutor_WaitForCommands_SM_STATE = SM_STATE.Construct(State._MotionPlanExecutor_WaitForCommands, ActionOrFun._MotionPlanExecutor_AnonFun0, ActionOrFun._MotionPlanExecutor_AnonFun0, 1, false, StateTemperature.Warm);
Main.MotionPlanExecutor_StartExecutingPlan_SM_STATE = SM_STATE.Construct(State._MotionPlanExecutor_StartExecutingPlan, ActionOrFun._MotionPlanExecutor_AnonFun3, ActionOrFun._MotionPlanExecutor_AnonFun0, 3, false, StateTemperature.Warm);
Main.Environment_Init_SM_STATE = SM_STATE.Construct(State._Environment_Init, ActionOrFun._Environment_AnonFun1, ActionOrFun._Environment_AnonFun0, 1, false, StateTemperature.Warm);
Main.Environment_StartSimulation_SM_STATE = SM_STATE.Construct(State._Environment_StartSimulation, ActionOrFun._Environment_AnonFun0, ActionOrFun._Environment_AnonFun0, 0, false, StateTemperature.Warm);
Main.RobotStateManager_Init_SM_STATE = SM_STATE.Construct(State._RobotStateManager_Init, ActionOrFun._RobotStateManager_AnonFun1, ActionOrFun._RobotStateManager_AnonFun0, 1, false, StateTemperature.Warm);
Main.RobotStateManager_WaitForCommands_SM_STATE = SM_STATE.Construct(State._RobotStateManager_WaitForCommands, ActionOrFun._RobotStateManager_AnonFun0, ActionOrFun._RobotStateManager_AnonFun0, 1, false, StateTemperature.Warm);
Main.RobotStateManager_GetStateFromEnvMachine_SM_STATE = SM_STATE.Construct(State._RobotStateManager_GetStateFromEnvMachine, ActionOrFun._RobotStateManager_AnonFun4, ActionOrFun._RobotStateManager_AnonFun0, 0, false, StateTemperature.Warm);
Main.SenseAndInfer_Init_SM_STATE = SM_STATE.Construct(State._SenseAndInfer_Init, ActionOrFun._SenseAndInfer_AnonFun1, ActionOrFun._SenseAndInfer_AnonFun0, 1, false, StateTemperature.Warm);
Main.SenseAndInfer_PeriodicallySenseUpdate_SM_STATE = SM_STATE.Construct(State._SenseAndInfer_PeriodicallySenseUpdate, ActionOrFun._SenseAndInfer_AnonFun0, ActionOrFun._SenseAndInfer_AnonFun0, 1, true, StateTemperature.Warm);
Main.SenseAndInfer_SenseEnvironment_SM_STATE = SM_STATE.Construct(State._SenseAndInfer_SenseEnvironment, ActionOrFun._SenseAndInfer_AnonFun4, ActionOrFun._SenseAndInfer_AnonFun0, 0, false, StateTemperature.Warm);
Main.Timer_Init_SM_STATE = SM_STATE.Construct(State._Timer_Init, ActionOrFun._Timer_AnonFun1, ActionOrFun._Timer_AnonFun0, 1, false, StateTemperature.Warm);
Main.Timer_WaitForReq_SM_STATE = SM_STATE.Construct(State._Timer_WaitForReq, ActionOrFun._Timer_AnonFun0, ActionOrFun._Timer_AnonFun0, 2, false, StateTemperature.Warm);
Main.Timer_WaitForCancel_SM_STATE = SM_STATE.Construct(State._Timer_WaitForCancel, ActionOrFun._Timer_AnonFun0, ActionOrFun._Timer_AnonFun0, 2, true, StateTemperature.Warm);
Main.Prop_1_Init_SM_STATE = SM_STATE.Construct(State._Prop_1_Init, ActionOrFun._Prop_1_AnonFun1, ActionOrFun._Prop_1_AnonFun0, 0, false, StateTemperature.Warm);
Main.Prop_2_Init_SM_STATE = SM_STATE.Construct(State._Prop_2_Init, ActionOrFun._Prop_2_AnonFun1, ActionOrFun._Prop_2_AnonFun0, 0, false, StateTemperature.Warm);
Main.Prop_6_Init_SM_STATE = SM_STATE.Construct(State._Prop_6_Init, ActionOrFun._Prop_6_AnonFun1, ActionOrFun._Prop_6_AnonFun0, 1, false, StateTemperature.Warm);
Main.Prop_6_Wait_SM_STATE = SM_STATE.Construct(State._Prop_6_Wait, ActionOrFun._Prop_6_AnonFun0, ActionOrFun._Prop_6_AnonFun0, 1, false, StateTemperature.Warm);
Main.Prop_6_Wait_M_hDog_SM_STATE = SM_STATE.Construct(State._Prop_6_Wait_M_hDog, ActionOrFun._Prop_6_AnonFun0, ActionOrFun._Prop_6_AnonFun0, 1, false, StateTemperature.Warm);
Main.Prop_7_Init_SM_STATE = SM_STATE.Construct(State._Prop_7_Init, ActionOrFun._Prop_7_AnonFun1, ActionOrFun._Prop_7_AnonFun0, 1, false, StateTemperature.Warm);
Main.Prop_7_Wait_SM_STATE = SM_STATE.Construct(State._Prop_7_Wait, ActionOrFun._Prop_7_AnonFun0, ActionOrFun._Prop_7_AnonFun0, 2, false, StateTemperature.Warm);
Main.Prop_7_WaitHDog_SM_STATE = SM_STATE.Construct(State._Prop_7_WaitHDog, ActionOrFun._Prop_7_AnonFun0, ActionOrFun._Prop_7_AnonFun0, 1, false, StateTemperature.Warm);
Main.Prop_7_WaitHCat_SM_STATE = SM_STATE.Construct(State._Prop_7_WaitHCat, ActionOrFun._Prop_7_AnonFun0, ActionOrFun._Prop_7_AnonFun0, 2, false, StateTemperature.Warm);
Main.Prop_8_Init_SM_STATE = SM_STATE.Construct(State._Prop_8_Init, ActionOrFun._Prop_8_AnonFun1, ActionOrFun._Prop_8_AnonFun0, 1, false, StateTemperature.Warm);
Main.Prop_8_Wait_SM_STATE = SM_STATE.Construct(State._Prop_8_Wait, ActionOrFun._Prop_8_AnonFun0, ActionOrFun._Prop_8_AnonFun0, 2, false, StateTemperature.Warm);
Main.Prop_8_WaitHCat_SM_STATE = SM_STATE.Construct(State._Prop_8_WaitHCat, ActionOrFun._Prop_8_AnonFun0, ActionOrFun._Prop_8_AnonFun0, 1, false, StateTemperature.Warm);
Main.Prop_8_WaitHMice_SM_STATE = SM_STATE.Construct(State._Prop_8_WaitHMice, ActionOrFun._Prop_8_AnonFun0, ActionOrFun._Prop_8_AnonFun0, 2, false, StateTemperature.Warm);
Main.Prop_9_Init_SM_STATE = SM_STATE.Construct(State._Prop_9_Init, ActionOrFun._Prop_9_AnonFun1, ActionOrFun._Prop_9_AnonFun0, 1, false, StateTemperature.Warm);
Main.Prop_9_Wait_SM_STATE = SM_STATE.Construct(State._Prop_9_Wait, ActionOrFun._Prop_9_AnonFun0, ActionOrFun._Prop_9_AnonFun0, 1, false, StateTemperature.Warm);
Main.Prop_9_WaitHCat_SM_STATE = SM_STATE.Construct(State._Prop_9_WaitHCat, ActionOrFun._Prop_9_AnonFun0, ActionOrFun._Prop_9_AnonFun0, 1, false, StateTemperature.Warm);
Main.Prop_3_Init_SM_STATE = SM_STATE.Construct(State._Prop_3_Init, ActionOrFun._Prop_3_AnonFun1, ActionOrFun._Prop_3_AnonFun0, 1, false, StateTemperature.Warm);
Main.Prop_3_WaitForHerding_SM_STATE = SM_STATE.Construct(State._Prop_3_WaitForHerding, ActionOrFun._Prop_3_AnonFun0, ActionOrFun._Prop_3_AnonFun0, 1, false, StateTemperature.Hot);
Main.Prop_3_Done_SM_STATE = SM_STATE.Construct(State._Prop_3_Done, ActionOrFun._Prop_3_AnonFun0, ActionOrFun._Prop_3_AnonFun0, 0, false, StateTemperature.Warm);
Main.Prop_10a_Init_SM_STATE = SM_STATE.Construct(State._Prop_10a_Init, ActionOrFun._Prop_10a_AnonFun0, ActionOrFun._Prop_10a_AnonFun0, 1, false, StateTemperature.Warm);
Main.Prop_10a_WaitrDog_SM_STATE = SM_STATE.Construct(State._Prop_10a_WaitrDog, ActionOrFun._Prop_10a_AnonFun0, ActionOrFun._Prop_10a_AnonFun0, 1, false, StateTemperature.Hot);
Main.Prop_10a_Done_SM_STATE = SM_STATE.Construct(State._Prop_10a_Done, ActionOrFun._Prop_10a_AnonFun0, ActionOrFun._Prop_10a_AnonFun0, 0, false, StateTemperature.Warm);
Main.Prop_10b_Init_SM_STATE = SM_STATE.Construct(State._Prop_10b_Init, ActionOrFun._Prop_10b_AnonFun0, ActionOrFun._Prop_10b_AnonFun0, 1, false, StateTemperature.Warm);
Main.Prop_10b_WaitrCat_SM_STATE = SM_STATE.Construct(State._Prop_10b_WaitrCat, ActionOrFun._Prop_10b_AnonFun0, ActionOrFun._Prop_10b_AnonFun0, 1, false, StateTemperature.Hot);
Main.Prop_10b_Done_SM_STATE = SM_STATE.Construct(State._Prop_10b_Done, ActionOrFun._Prop_10b_AnonFun0, ActionOrFun._Prop_10b_AnonFun0, 0, false, StateTemperature.Warm);
Main.Prop_10c_Init_SM_STATE = SM_STATE.Construct(State._Prop_10c_Init, ActionOrFun._Prop_10c_AnonFun0, ActionOrFun._Prop_10c_AnonFun0, 1, false, StateTemperature.Warm);
Main.Prop_10c_WaitrMice_SM_STATE = SM_STATE.Construct(State._Prop_10c_WaitrMice, ActionOrFun._Prop_10c_AnonFun0, ActionOrFun._Prop_10c_AnonFun0, 1, false, StateTemperature.Hot);
Main.Prop_10c_Done_SM_STATE = SM_STATE.Construct(State._Prop_10c_Done, ActionOrFun._Prop_10c_AnonFun0, ActionOrFun._Prop_10c_AnonFun0, 0, false, StateTemperature.Warm);
Main.RobotTaskPlanner_Init_SM_STATE.transitions[0] = SM_TRANSITION.Construct(Main.local_SM_EVENT, ActionOrFun._RobotTaskPlanner_AnonFun0, Main.RobotTaskPlanner_SetUpSystem_SM_STATE);
Main.RobotTaskPlanner_SetUpSystem_SM_STATE.transitions[0] = SM_TRANSITION.Construct(Main.local_SM_EVENT, ActionOrFun._RobotTaskPlanner_AnonFun0, Main.RobotTaskPlanner_ScanningModeOfOperation_SM_STATE);
Main.RobotTaskPlanner_ScanningModeOfOperation_SM_STATE.transitions[0] = SM_TRANSITION.Construct(Main.MotionPlanFor_SM_EVENT, ActionOrFun._default, Main.RobotTaskPlanner_ExecutePlan_SM_STATE);
Main.RobotTaskPlanner_ScanningModeOfOperation_SM_STATE.transitions[1] = SM_TRANSITION.Construct(Main.BatteryLow_SM_EVENT, ActionOrFun._RobotTaskPlanner_CancelCurrentExecution, Main.RobotTaskPlanner_LowBatteryDetected_SM_STATE);
Main.RobotTaskPlanner_ScanningModeOfOperation_SM_STATE.transitions[2] = SM_TRANSITION.Construct(Main.startNewHerding_SM_EVENT, ActionOrFun._RobotTaskPlanner_CancelCurrentExecution, Main.RobotTaskPlanner_SelectGoalLocationAndComputePlan_SM_STATE);
Main.RobotTaskPlanner_ScanningModeOfOperation_SM_STATE.transitions[3] = SM_TRANSITION.Construct(Main.EnvEventDetected_SM_EVENT, ActionOrFun._default, Main.RobotTaskPlanner_TakeActionOnEnvEventDetected_SM_STATE);
Main.RobotTaskPlanner_ScanningModeOfOperation_SM_STATE.transitions[4] = SM_TRANSITION.Construct(Main.ReDo_SM_EVENT, ActionOrFun._RobotTaskPlanner_AnonFun0, Main.RobotTaskPlanner_ScanningModeOfOperation_SM_STATE);
Main.RobotTaskPlanner_ScanningModeOfOperation_SM_STATE.transitions[5] = SM_TRANSITION.Construct(Main.success_SM_EVENT, ActionOrFun._RobotTaskPlanner_AnonFun0, Main.RobotTaskPlanner_ScanningModeOfOperation_SM_STATE);
Main.RobotTaskPlanner_LowBatteryDetected_SM_STATE.transitions[0] = SM_TRANSITION.Construct(Main.MotionPlanFor_SM_EVENT, ActionOrFun._default, Main.RobotTaskPlanner_ExecutePlan_SM_STATE);
Main.RobotTaskPlanner_LowBatteryDetected_SM_STATE.transitions[1] = SM_TRANSITION.Construct(Main.BatteryLow_SM_EVENT, ActionOrFun._RobotTaskPlanner_CancelCurrentExecution, Main.RobotTaskPlanner_LowBatteryDetected_SM_STATE);
Main.RobotTaskPlanner_LowBatteryDetected_SM_STATE.transitions[2] = SM_TRANSITION.Construct(Main.ReDo_SM_EVENT, ActionOrFun._RobotTaskPlanner_AnonFun0, Main.RobotTaskPlanner_LowBatteryDetected_SM_STATE);
Main.RobotTaskPlanner_LowBatteryDetected_SM_STATE.transitions[3] = SM_TRANSITION.Construct(Main.success_SM_EVENT, ActionOrFun._RobotTaskPlanner_AnonFun0, Main.RobotTaskPlanner_ScanningModeOfOperation_SM_STATE);
Main.RobotTaskPlanner_SelectGoalLocationAndComputePlan_SM_STATE.transitions[0] = SM_TRANSITION.Construct(Main.MotionPlanFor_SM_EVENT, ActionOrFun._default, Main.RobotTaskPlanner_ExecutePlan_SM_STATE);
Main.RobotTaskPlanner_SelectGoalLocationAndComputePlan_SM_STATE.transitions[1] = SM_TRANSITION.Construct(Main.ReDo_SM_EVENT, ActionOrFun._RobotTaskPlanner_AnonFun0, Main.RobotTaskPlanner_SelectGoalLocationAndComputePlan_SM_STATE);
Main.RobotTaskPlanner_SelectGoalLocationAndComputePlan_SM_STATE.transitions[2] = SM_TRANSITION.Construct(Main.doScanning_SM_EVENT, ActionOrFun._RobotTaskPlanner_AnonFun0, Main.RobotTaskPlanner_ScanningModeOfOperation_SM_STATE);
Main.RobotTaskPlanner_SelectGoalLocationAndComputePlan_SM_STATE.transitions[3] = SM_TRANSITION.Construct(Main.BatteryLow_SM_EVENT, ActionOrFun._RobotTaskPlanner_CancelCurrentExecution, Main.RobotTaskPlanner_LowBatteryDetected_SM_STATE);
Main.RobotTaskPlanner_SelectGoalLocationAndComputePlan_SM_STATE.transitions[4] = SM_TRANSITION.Construct(Main.EnvEventDetected_SM_EVENT, ActionOrFun._default, Main.RobotTaskPlanner_TakeActionOnEnvEventDetected_SM_STATE);
Main.MotionPlanner_Init_SM_STATE.transitions[0] = SM_TRANSITION.Construct(Main.local_SM_EVENT, ActionOrFun._MotionPlanner_AnonFun0, Main.MotionPlanner_WaitForCommands_SM_STATE);
Main.MotionPlanExecutor_Init_SM_STATE.transitions[0] = SM_TRANSITION.Construct(Main.local_SM_EVENT, ActionOrFun._MotionPlanExecutor_AnonFun0, Main.MotionPlanExecutor_WaitForCommands_SM_STATE);
Main.MotionPlanExecutor_WaitForCommands_SM_STATE.transitions[0] = SM_TRANSITION.Construct(Main.ExecutePlan_SM_EVENT, ActionOrFun._MotionPlanExecutor_AnonFun2, Main.MotionPlanExecutor_StartExecutingPlan_SM_STATE);
Main.MotionPlanExecutor_StartExecutingPlan_SM_STATE.transitions[0] = SM_TRANSITION.Construct(Main.local_SM_EVENT, ActionOrFun._MotionPlanExecutor_AnonFun4, Main.MotionPlanExecutor_StartExecutingPlan_SM_STATE);
Main.MotionPlanExecutor_StartExecutingPlan_SM_STATE.transitions[1] = SM_TRANSITION.Construct(Main.done_SM_EVENT, ActionOrFun._MotionPlanExecutor_AnonFun5, Main.MotionPlanExecutor_WaitForCommands_SM_STATE);
Main.MotionPlanExecutor_StartExecutingPlan_SM_STATE.transitions[2] = SM_TRANSITION.Construct(Main.CancelPlan_SM_EVENT, ActionOrFun._MotionPlanExecutor_AnonFun0, Main.MotionPlanExecutor_WaitForCommands_SM_STATE);
Main.Environment_Init_SM_STATE.transitions[0] = SM_TRANSITION.Construct(Main.local_SM_EVENT, ActionOrFun._Environment_AnonFun0, Main.Environment_StartSimulation_SM_STATE);
Main.RobotStateManager_Init_SM_STATE.transitions[0] = SM_TRANSITION.Construct(Main.initial_setup_SM_EVENT, ActionOrFun._RobotStateManager_AnonFun2, Main.RobotStateManager_WaitForCommands_SM_STATE);
Main.RobotStateManager_WaitForCommands_SM_STATE.transitions[0] = SM_TRANSITION.Construct(Main.GetRobotState_SM_EVENT, ActionOrFun._default, Main.RobotStateManager_GetStateFromEnvMachine_SM_STATE);
Main.SenseAndInfer_Init_SM_STATE.transitions[0] = SM_TRANSITION.Construct(Main.local_SM_EVENT, ActionOrFun._SenseAndInfer_AnonFun0, Main.SenseAndInfer_PeriodicallySenseUpdate_SM_STATE);
Main.SenseAndInfer_PeriodicallySenseUpdate_SM_STATE.transitions[0] = SM_TRANSITION.Construct(Main.null_SM_EVENT, ActionOrFun._default, Main.SenseAndInfer_SenseEnvironment_SM_STATE);
Main.Timer_Init_SM_STATE.transitions[0] = SM_TRANSITION.Construct(Main.UNIT_SM_EVENT, ActionOrFun._Timer_AnonFun0, Main.Timer_WaitForReq_SM_STATE);
Main.Timer_WaitForReq_SM_STATE.transitions[0] = SM_TRANSITION.Construct(Main.CANCEL_SM_EVENT, ActionOrFun._Timer_AnonFun2, Main.Timer_WaitForReq_SM_STATE);
Main.Timer_WaitForReq_SM_STATE.transitions[1] = SM_TRANSITION.Construct(Main.START_SM_EVENT, ActionOrFun._Timer_AnonFun0, Main.Timer_WaitForCancel_SM_STATE);
Main.Timer_WaitForCancel_SM_STATE.transitions[0] = SM_TRANSITION.Construct(Main.null_SM_EVENT, ActionOrFun._Timer_AnonFun3, Main.Timer_WaitForReq_SM_STATE);
Main.Timer_WaitForCancel_SM_STATE.transitions[1] = SM_TRANSITION.Construct(Main.CANCEL_SM_EVENT, ActionOrFun._Timer_AnonFun4, Main.Timer_WaitForReq_SM_STATE);
Main.Prop_6_Init_SM_STATE.transitions[0] = SM_TRANSITION.Construct(Main.local_SM_EVENT, ActionOrFun._Prop_6_AnonFun0, Main.Prop_6_Wait_SM_STATE);
Main.Prop_6_Wait_SM_STATE.transitions[0] = SM_TRANSITION.Construct(Main.local_SM_EVENT, ActionOrFun._Prop_6_AnonFun0, Main.Prop_6_Wait_M_hDog_SM_STATE);
Main.Prop_6_Wait_M_hDog_SM_STATE.transitions[0] = SM_TRANSITION.Construct(Main.M_hDog_SM_EVENT, ActionOrFun._Prop_6_AnonFun0, Main.Prop_6_Wait_SM_STATE);
Main.Prop_7_Init_SM_STATE.transitions[0] = SM_TRANSITION.Construct(Main.local_SM_EVENT, ActionOrFun._Prop_7_AnonFun0, Main.Prop_7_Wait_SM_STATE);
Main.Prop_7_Wait_SM_STATE.transitions[0] = SM_TRANSITION.Construct(Main.M_sDog_SM_EVENT, ActionOrFun._Prop_7_AnonFun0, Main.Prop_7_WaitHDog_SM_STATE);
Main.Prop_7_Wait_SM_STATE.transitions[1] = SM_TRANSITION.Construct(Main.M_sCat_SM_EVENT, ActionOrFun._Prop_7_AnonFun0, Main.Prop_7_WaitHCat_SM_STATE);
Main.Prop_7_WaitHDog_SM_STATE.transitions[0] = SM_TRANSITION.Construct(Main.M_hDog_SM_EVENT, ActionOrFun._Prop_7_AnonFun0, Main.Prop_7_Wait_SM_STATE);
Main.Prop_7_WaitHCat_SM_STATE.transitions[0] = SM_TRANSITION.Construct(Main.M_hCat_SM_EVENT, ActionOrFun._Prop_7_AnonFun0, Main.Prop_7_Wait_SM_STATE);
Main.Prop_7_WaitHCat_SM_STATE.transitions[1] = SM_TRANSITION.Construct(Main.M_sDog_SM_EVENT, ActionOrFun._Prop_7_AnonFun0, Main.Prop_7_WaitHDog_SM_STATE);
Main.Prop_8_Init_SM_STATE.transitions[0] = SM_TRANSITION.Construct(Main.local_SM_EVENT, ActionOrFun._Prop_8_AnonFun0, Main.Prop_8_Wait_SM_STATE);
Main.Prop_8_Wait_SM_STATE.transitions[0] = SM_TRANSITION.Construct(Main.M_sCat_SM_EVENT, ActionOrFun._Prop_8_AnonFun0, Main.Prop_8_WaitHCat_SM_STATE);
Main.Prop_8_Wait_SM_STATE.transitions[1] = SM_TRANSITION.Construct(Main.M_sMice_SM_EVENT, ActionOrFun._Prop_8_AnonFun0, Main.Prop_8_WaitHMice_SM_STATE);
Main.Prop_8_WaitHCat_SM_STATE.transitions[0] = SM_TRANSITION.Construct(Main.M_hCat_SM_EVENT, ActionOrFun._Prop_8_AnonFun0, Main.Prop_8_Wait_SM_STATE);
Main.Prop_8_WaitHMice_SM_STATE.transitions[0] = SM_TRANSITION.Construct(Main.M_hMice_SM_EVENT, ActionOrFun._Prop_8_AnonFun0, Main.Prop_8_Wait_SM_STATE);
Main.Prop_8_WaitHMice_SM_STATE.transitions[1] = SM_TRANSITION.Construct(Main.M_sCat_SM_EVENT, ActionOrFun._Prop_8_AnonFun0, Main.Prop_8_WaitHCat_SM_STATE);
Main.Prop_9_Init_SM_STATE.transitions[0] = SM_TRANSITION.Construct(Main.local_SM_EVENT, ActionOrFun._Prop_9_AnonFun0, Main.Prop_9_Wait_SM_STATE);
Main.Prop_9_Wait_SM_STATE.transitions[0] = SM_TRANSITION.Construct(Main.local_SM_EVENT, ActionOrFun._Prop_9_AnonFun0, Main.Prop_9_WaitHCat_SM_STATE);
Main.Prop_9_WaitHCat_SM_STATE.transitions[0] = SM_TRANSITION.Construct(Main.M_hCat_SM_EVENT, ActionOrFun._Prop_9_AnonFun0, Main.Prop_9_Wait_SM_STATE);
Main.Prop_3_Init_SM_STATE.transitions[0] = SM_TRANSITION.Construct(Main.local_SM_EVENT, ActionOrFun._Prop_3_AnonFun0, Main.Prop_3_WaitForHerding_SM_STATE);
Main.Prop_3_WaitForHerding_SM_STATE.transitions[0] = SM_TRANSITION.Construct(Main.local_SM_EVENT, ActionOrFun._Prop_3_AnonFun0, Main.Prop_3_Done_SM_STATE);
Main.Prop_10a_Init_SM_STATE.transitions[0] = SM_TRANSITION.Construct(Main.M_hDog_SM_EVENT, ActionOrFun._Prop_10a_AnonFun0, Main.Prop_10a_WaitrDog_SM_STATE);
Main.Prop_10a_WaitrDog_SM_STATE.transitions[0] = SM_TRANSITION.Construct(Main.M_rDog_SM_EVENT, ActionOrFun._Prop_10a_AnonFun0, Main.Prop_10a_Done_SM_STATE);
Main.Prop_10b_Init_SM_STATE.transitions[0] = SM_TRANSITION.Construct(Main.M_hCat_SM_EVENT, ActionOrFun._Prop_10b_AnonFun0, Main.Prop_10b_WaitrCat_SM_STATE);
Main.Prop_10b_WaitrCat_SM_STATE.transitions[0] = SM_TRANSITION.Construct(Main.M_rCat_SM_EVENT, ActionOrFun._Prop_10b_AnonFun0, Main.Prop_10b_Done_SM_STATE);
Main.Prop_10c_Init_SM_STATE.transitions[0] = SM_TRANSITION.Construct(Main.M_hMice_SM_EVENT, ActionOrFun._Prop_10c_AnonFun0, Main.Prop_10c_WaitrMice_SM_STATE);
Main.Prop_10c_WaitrMice_SM_STATE.transitions[0] = SM_TRANSITION.Construct(Main.M_rMice_SM_EVENT, ActionOrFun._Prop_10c_AnonFun0, Main.Prop_10c_Done_SM_STATE);
DriverMachine_instance = 0;
RobotTaskPlanner_instance = 0;
MotionPlanner_instance = 0;
MotionPlanExecutor_instance = 0;
Environment_instance = 0;
RobotStateManager_instance = 0;
SenseAndInfer_instance = 0;
Timer_instance = 0;
Prop_1_instance = 0;
Prop_2_instance = 0;
Prop_6_instance = 0;
Prop_7_instance = 0;
Prop_8_instance = 0;
Prop_9_instance = 0;
Prop_3_instance = 0;
Prop_10a_instance = 0;
Prop_10b_instance = 0;
Prop_10c_instance = 0;
Prop_1_handles = new SET_Prop_1;
Prop_2_handles = new SET_Prop_2;
Prop_6_handles = new SET_Prop_6;
Prop_7_handles = new SET_Prop_7;
Prop_8_handles = new SET_Prop_8;
Prop_9_handles = new SET_Prop_9;
Prop_3_handles = new SET_Prop_3;
Prop_10a_handles = new SET_Prop_10a;
Prop_10b_handles = new SET_Prop_10b;
Prop_10c_handles = new SET_Prop_10c;
Main.Prop_1_observes = new SM_EVENT_SET;
Main.Prop_1_observes = (Main.Prop_1_observes + Main.M_hCat_SM_EVENT);
Main.Prop_1_observes = (Main.Prop_1_observes + Main.M_hDog_SM_EVENT);
Main.Prop_1_observes = (Main.Prop_1_observes + Main.M_rDog_SM_EVENT);
Main.Prop_1_observes = (Main.Prop_1_observes + Main.M_rCat_SM_EVENT);
Main.Prop_2_observes = new SM_EVENT_SET;
Main.Prop_2_observes = (Main.Prop_2_observes + Main.M_hCat_SM_EVENT);
Main.Prop_2_observes = (Main.Prop_2_observes + Main.M_rCat_SM_EVENT);
Main.Prop_2_observes = (Main.Prop_2_observes + Main.M_hMice_SM_EVENT);
Main.Prop_2_observes = (Main.Prop_2_observes + Main.M_rMice_SM_EVENT);
Main.Prop_6_observes = new SM_EVENT_SET;
Main.Prop_6_observes = (Main.Prop_6_observes + Main.M_sDog_SM_EVENT);
Main.Prop_6_observes = (Main.Prop_6_observes + Main.M_hCat_SM_EVENT);
Main.Prop_6_observes = (Main.Prop_6_observes + Main.M_rCat_SM_EVENT);
Main.Prop_6_observes = (Main.Prop_6_observes + Main.M_hDog_SM_EVENT);
Main.Prop_7_observes = new SM_EVENT_SET;
Main.Prop_7_observes = (Main.Prop_7_observes + Main.M_sDog_SM_EVENT);
Main.Prop_7_observes = (Main.Prop_7_observes + Main.M_sCat_SM_EVENT);
Main.Prop_7_observes = (Main.Prop_7_observes + Main.M_hDog_SM_EVENT);
Main.Prop_7_observes = (Main.Prop_7_observes + Main.M_hDog_SM_EVENT);
Main.Prop_8_observes = new SM_EVENT_SET;
Main.Prop_8_observes = (Main.Prop_8_observes + Main.M_sCat_SM_EVENT);
Main.Prop_8_observes = (Main.Prop_8_observes + Main.M_sMice_SM_EVENT);
Main.Prop_8_observes = (Main.Prop_8_observes + Main.M_hCat_SM_EVENT);
Main.Prop_8_observes = (Main.Prop_8_observes + Main.M_hMice_SM_EVENT);
Main.Prop_9_observes = new SM_EVENT_SET;
Main.Prop_9_observes = (Main.Prop_9_observes + Main.M_sCat_SM_EVENT);
Main.Prop_9_observes = (Main.Prop_9_observes + Main.M_sDog_SM_EVENT);
Main.Prop_9_observes = (Main.Prop_9_observes + Main.M_hMice_SM_EVENT);
Main.Prop_9_observes = (Main.Prop_9_observes + Main.M_hCat_SM_EVENT);
Main.Prop_9_observes = (Main.Prop_9_observes + Main.M_hDog_SM_EVENT);
Main.Prop_9_observes = (Main.Prop_9_observes + Main.M_rMice_SM_EVENT);
Main.Prop_3_observes = new SM_EVENT_SET;
Main.Prop_3_observes = (Main.Prop_3_observes + Main.M_hCat_SM_EVENT);
Main.Prop_3_observes = (Main.Prop_3_observes + Main.M_hDog_SM_EVENT);
Main.Prop_3_observes = (Main.Prop_3_observes + Main.M_hMice_SM_EVENT);
Main.Prop_10a_observes = new SM_EVENT_SET;
Main.Prop_10a_observes = (Main.Prop_10a_observes + Main.M_hDog_SM_EVENT);
Main.Prop_10a_observes = (Main.Prop_10a_observes + Main.M_rDog_SM_EVENT);
Main.Prop_10b_observes = new SM_EVENT_SET;
Main.Prop_10b_observes = (Main.Prop_10b_observes + Main.M_hCat_SM_EVENT);
Main.Prop_10b_observes = (Main.Prop_10b_observes + Main.M_rCat_SM_EVENT);
Main.Prop_10c_observes = new SM_EVENT_SET;
Main.Prop_10c_observes = (Main.Prop_10c_observes + Main.M_hMice_SM_EVENT);
Main.Prop_10c_observes = (Main.Prop_10c_observes + Main.M_rMice_SM_EVENT);
Main.field_0_PRT_FIELD_NAME = new PRT_FIELD_NAME;
Main.field_1_PRT_FIELD_NAME = new PRT_FIELD_NAME;
Main.field_2_PRT_FIELD_NAME = new PRT_FIELD_NAME;
Main.field_3_PRT_FIELD_NAME = new PRT_FIELD_NAME;
Main.field_4_PRT_FIELD_NAME = new PRT_FIELD_NAME;
Main.field_5_PRT_FIELD_NAME = new PRT_FIELD_NAME;
Main.field_6_PRT_FIELD_NAME = new PRT_FIELD_NAME;
Main.field_7_PRT_FIELD_NAME = new PRT_FIELD_NAME;
Main.field_8_PRT_FIELD_NAME = new PRT_FIELD_NAME;
Main.field_9_PRT_FIELD_NAME = new PRT_FIELD_NAME;
Main.field_10_PRT_FIELD_NAME = new PRT_FIELD_NAME;
Main.field_11_PRT_FIELD_NAME = new PRT_FIELD_NAME;
Main.field_12_PRT_FIELD_NAME = new PRT_FIELD_NAME;
Main.field_13_PRT_FIELD_NAME = new PRT_FIELD_NAME;
Main.field_14_PRT_FIELD_NAME = new PRT_FIELD_NAME;
Main.field_15_PRT_FIELD_NAME = new PRT_FIELD_NAME;
Main.field_16_PRT_FIELD_NAME = new PRT_FIELD_NAME;
Main.field_17_PRT_FIELD_NAME = new PRT_FIELD_NAME;
Main.type_0_PRT_TYPE = PRT_TYPE.PrtMkPrimitiveType(PRT_TYPE_KIND.PRT_KIND_NULL);
Main.type_1_PRT_TYPE = PRT_TYPE.PrtMkPrimitiveType(PRT_TYPE_KIND.PRT_KIND_INT);
Main.type_2_PRT_TYPE = PRT_TYPE.PrtMkSeqType(Main.type_1_PRT_TYPE);
Main.type_3_PRT_TYPE = PRT_TYPE.PrtMkTupType(2);
PRT_TYPE.PrtSetFieldType(Main.type_3_PRT_TYPE, 0, Main.type_1_PRT_TYPE);
PRT_TYPE.PrtSetFieldType(Main.type_3_PRT_TYPE, 1, Main.type_1_PRT_TYPE);
Main.type_4_PRT_TYPE = PRT_TYPE.PrtMkMapType(Main.type_3_PRT_TYPE, Main.type_2_PRT_TYPE);
Main.type_5_PRT_TYPE = PRT_TYPE.PrtMkPrimitiveType(PRT_TYPE_KIND.PRT_KIND_BOOL);
Main.type_6_PRT_TYPE = PRT_TYPE.PrtMkNmdTupType(3);
PRT_TYPE.PrtSetFieldName(Main.type_6_PRT_TYPE, 0, Main.field_0_PRT_FIELD_NAME);
PRT_TYPE.PrtSetFieldType(Main.type_6_PRT_TYPE, 0, Main.type_5_PRT_TYPE);
PRT_TYPE.PrtSetFieldName(Main.type_6_PRT_TYPE, 1, Main.field_1_PRT_FIELD_NAME);
PRT_TYPE.PrtSetFieldType(Main.type_6_PRT_TYPE, 1, Main.type_5_PRT_TYPE);
PRT_TYPE.PrtSetFieldName(Main.type_6_PRT_TYPE, 2, Main.field_2_PRT_FIELD_NAME);
PRT_TYPE.PrtSetFieldType(Main.type_6_PRT_TYPE, 2, Main.type_5_PRT_TYPE);
Main.type_7_PRT_TYPE = PRT_TYPE.PrtMkMapType(Main.type_1_PRT_TYPE, Main.type_6_PRT_TYPE);
Main.type_8_PRT_TYPE = PRT_TYPE.PrtMkPrimitiveType(PRT_TYPE_KIND.PRT_KIND_REAL);
Main.type_9_PRT_TYPE = PRT_TYPE.PrtMkNmdTupType(2);
PRT_TYPE.PrtSetFieldName(Main.type_9_PRT_TYPE, 0, Main.field_4_PRT_FIELD_NAME);
PRT_TYPE.PrtSetFieldType(Main.type_9_PRT_TYPE, 0, Main.type_1_PRT_TYPE);
PRT_TYPE.PrtSetFieldName(Main.type_9_PRT_TYPE, 1, Main.field_5_PRT_FIELD_NAME);
PRT_TYPE.PrtSetFieldType(Main.type_9_PRT_TYPE, 1, Main.type_1_PRT_TYPE);
Main.type_10_PRT_TYPE = PRT_TYPE.PrtMkNmdTupType(2);
PRT_TYPE.PrtSetFieldName(Main.type_10_PRT_TYPE, 0, Main.field_3_PRT_FIELD_NAME);
PRT_TYPE.PrtSetFieldType(Main.type_10_PRT_TYPE, 0, Main.type_9_PRT_TYPE);
PRT_TYPE.PrtSetFieldName(Main.type_10_PRT_TYPE, 1, Main.field_6_PRT_FIELD_NAME);
PRT_TYPE.PrtSetFieldType(Main.type_10_PRT_TYPE, 1, Main.type_8_PRT_TYPE);
Main.type_11_PRT_TYPE = PRT_TYPE.PrtMkTupType(2);
PRT_TYPE.PrtSetFieldType(Main.type_11_PRT_TYPE, 0, Main.type_8_PRT_TYPE);
PRT_TYPE.PrtSetFieldType(Main.type_11_PRT_TYPE, 1, Main.type_8_PRT_TYPE);
Main.type_12_PRT_TYPE = PRT_TYPE.PrtMkPrimitiveType(PRT_TYPE_KIND.PRT_KIND_EVENT);
Main.type_13_PRT_TYPE = PRT_TYPE.PrtMkNmdTupType(3);
PRT_TYPE.PrtSetFieldName(Main.type_13_PRT_TYPE, 0, Main.field_7_PRT_FIELD_NAME);
PRT_TYPE.PrtSetFieldType(Main.type_13_PRT_TYPE, 0, Main.type_5_PRT_TYPE);
PRT_TYPE.PrtSetFieldName(Main.type_13_PRT_TYPE, 1, Main.field_8_PRT_FIELD_NAME);
PRT_TYPE.PrtSetFieldType(Main.type_13_PRT_TYPE, 1, Main.type_5_PRT_TYPE);
PRT_TYPE.PrtSetFieldName(Main.type_13_PRT_TYPE, 2, Main.field_9_PRT_FIELD_NAME);
PRT_TYPE.PrtSetFieldType(Main.type_13_PRT_TYPE, 2, Main.type_5_PRT_TYPE);
Main.type_14_PRT_TYPE = PRT_TYPE.PrtMkNmdTupType(3);
PRT_TYPE.PrtSetFieldName(Main.type_14_PRT_TYPE, 0, Main.field_10_PRT_FIELD_NAME);
PRT_TYPE.PrtSetFieldType(Main.type_14_PRT_TYPE, 0, Main.type_8_PRT_TYPE);
PRT_TYPE.PrtSetFieldName(Main.type_14_PRT_TYPE, 1, Main.field_11_PRT_FIELD_NAME);
PRT_TYPE.PrtSetFieldType(Main.type_14_PRT_TYPE, 1, Main.type_8_PRT_TYPE);
PRT_TYPE.PrtSetFieldName(Main.type_14_PRT_TYPE, 2, Main.field_12_PRT_FIELD_NAME);
PRT_TYPE.PrtSetFieldType(Main.type_14_PRT_TYPE, 2, Main.type_1_PRT_TYPE);
Main.type_15_PRT_TYPE = PRT_TYPE.PrtMkNmdTupType(2);
PRT_TYPE.PrtSetFieldName(Main.type_15_PRT_TYPE, 0, Main.field_13_PRT_FIELD_NAME);
PRT_TYPE.PrtSetFieldType(Main.type_15_PRT_TYPE, 0, Main.type_1_PRT_TYPE);
PRT_TYPE.PrtSetFieldName(Main.type_15_PRT_TYPE, 1, Main.field_14_PRT_FIELD_NAME);
PRT_TYPE.PrtSetFieldType(Main.type_15_PRT_TYPE, 1, Main.type_1_PRT_TYPE);
Main.type_16_PRT_TYPE = PRT_TYPE.PrtMkNmdTupType(1);
PRT_TYPE.PrtSetFieldName(Main.type_16_PRT_TYPE, 0, Main.field_15_PRT_FIELD_NAME);
PRT_TYPE.PrtSetFieldType(Main.type_16_PRT_TYPE, 0, Main.type_2_PRT_TYPE);
Main.type_17_PRT_TYPE = PRT_TYPE.PrtMkNmdTupType(3);
PRT_TYPE.PrtSetFieldName(Main.type_17_PRT_TYPE, 0, Main.field_13_PRT_FIELD_NAME);
PRT_TYPE.PrtSetFieldType(Main.type_17_PRT_TYPE, 0, Main.type_1_PRT_TYPE);
PRT_TYPE.PrtSetFieldName(Main.type_17_PRT_TYPE, 1, Main.field_14_PRT_FIELD_NAME);
PRT_TYPE.PrtSetFieldType(Main.type_17_PRT_TYPE, 1, Main.type_1_PRT_TYPE);
PRT_TYPE.PrtSetFieldName(Main.type_17_PRT_TYPE, 2, Main.field_15_PRT_FIELD_NAME);
PRT_TYPE.PrtSetFieldType(Main.type_17_PRT_TYPE, 2, Main.type_2_PRT_TYPE);
Main.type_18_PRT_TYPE = PRT_TYPE.PrtMkPrimitiveType(PRT_TYPE_KIND.PRT_KIND_ANY);
Main.type_19_PRT_TYPE = PRT_TYPE.PrtMkNmdTupType(2);
PRT_TYPE.PrtSetFieldName(Main.type_19_PRT_TYPE, 0, Main.field_4_PRT_FIELD_NAME);
PRT_TYPE.PrtSetFieldType(Main.type_19_PRT_TYPE, 0, Main.type_1_PRT_TYPE);
PRT_TYPE.PrtSetFieldName(Main.type_19_PRT_TYPE, 1, Main.field_16_PRT_FIELD_NAME);
PRT_TYPE.PrtSetFieldType(Main.type_19_PRT_TYPE, 1, Main.type_18_PRT_TYPE);
Main.type_20_PRT_TYPE = PRT_TYPE.PrtMkNmdTupType(2);
PRT_TYPE.PrtSetFieldName(Main.type_20_PRT_TYPE, 0, Main.field_4_PRT_FIELD_NAME);
PRT_TYPE.PrtSetFieldType(Main.type_20_PRT_TYPE, 0, Main.type_1_PRT_TYPE);
PRT_TYPE.PrtSetFieldName(Main.type_20_PRT_TYPE, 1, Main.field_16_PRT_FIELD_NAME);
PRT_TYPE.PrtSetFieldType(Main.type_20_PRT_TYPE, 1, Main.type_0_PRT_TYPE);
Main.type_21_PRT_TYPE = PRT_TYPE.PrtMkNmdTupType(2);
PRT_TYPE.PrtSetFieldName(Main.type_21_PRT_TYPE, 0, Main.field_17_PRT_FIELD_NAME);
PRT_TYPE.PrtSetFieldType(Main.type_21_PRT_TYPE, 0, Main.type_8_PRT_TYPE);
PRT_TYPE.PrtSetFieldName(Main.type_21_PRT_TYPE, 1, Main.field_4_PRT_FIELD_NAME);
PRT_TYPE.PrtSetFieldType(Main.type_21_PRT_TYPE, 1, Main.type_1_PRT_TYPE);
Main.type_22_PRT_TYPE = PRT_TYPE.PrtMkNmdTupType(2);
PRT_TYPE.PrtSetFieldName(Main.type_22_PRT_TYPE, 0, Main.field_10_PRT_FIELD_NAME);
PRT_TYPE.PrtSetFieldType(Main.type_22_PRT_TYPE, 0, Main.type_9_PRT_TYPE);
PRT_TYPE.PrtSetFieldName(Main.type_22_PRT_TYPE, 1, Main.field_16_PRT_FIELD_NAME);
PRT_TYPE.PrtSetFieldType(Main.type_22_PRT_TYPE, 1, Main.type_18_PRT_TYPE);
Main.type_23_PRT_TYPE = PRT_TYPE.PrtMkMapType(Main.type_1_PRT_TYPE, Main.type_18_PRT_TYPE);
Main.CreateMachine_DriverMachine(null);

;

}
};

class SM_NULL { };

class MachineId
{
	static int nextMachineId = 0;

	static int GetNextId()
	{
		int ret = nextMachineId;
		nextMachineId = nextMachineId + 1;
		return ret;
	}
};

set SM_EVENT_SET SM_EVENT;

class SM_EVENT {    
    Event name;
    int maxInstances;
	bool doAssume;

    static SM_EVENT Construct(Event name, int mInstances, bool doAssume) {
		SM_EVENT smEvent = new SM_EVENT;
		smEvent.name = name;
		smEvent.maxInstances = mInstances;
		smEvent.doAssume = doAssume;
		return smEvent;
    }
};

array SM_TRANSITION_ARRAY[] SM_TRANSITION;

class SM_TRANSITION {
    SM_EVENT evt;
	ActionOrFun fun; // isPush <==> fun == ActionOrFun._default
	SM_STATE to;

	static SM_TRANSITION Construct(SM_EVENT evt, ActionOrFun fun, SM_STATE to) {
	    SM_TRANSITION transition;
		transition = new SM_TRANSITION;
		transition.evt = evt;
		transition.fun = fun;
		transition.to = to;
		return transition;
	}
};

class SM_STATE {
    State name;
	ActionOrFun entryFun;
	ActionOrFun exitFun;
	SM_TRANSITION_ARRAY transitions;
	bool hasNullTransition;
	StateTemperature temperature;

	static SM_STATE Construct(State name, ActionOrFun entryFun, ActionOrFun exitFun, int numTransitions, bool hasNullTransition, StateTemperature temperature) {
	    SM_STATE state;
		state = new SM_STATE;
		state.name = name;
		state.entryFun = entryFun;
		state.exitFun = exitFun;
		state.transitions = new SM_TRANSITION_ARRAY[numTransitions];
		state.hasNullTransition = hasNullTransition;
		state.temperature = temperature;
		return state;
	}

	SM_TRANSITION FindPushTransition(SM_EVENT evt) {
	    int i;
		i = 0;
		while (i < sizeof(transitions)) {
		    if (transitions[i].evt == evt && transitions[i].fun == ActionOrFun._default) {
			    return transitions[i];
			}
		    i = i + 1;
		}
		return null;
	}

	SM_TRANSITION FindTransition(SM_EVENT evt) {
	    int i;
		i = 0;
		while (i < sizeof(transitions)) {
		    if (transitions[i].evt == evt) {
			    return transitions[i];
			}
		    i = i + 1;
		}
		return null;
	}
};

set SM_HANDLE_SET SM_HANDLE;

class SM_HANDLE {
	static SM_HANDLE_SET halted = new SM_HANDLE_SET;
	static SM_HANDLE_SET enabled = new SM_HANDLE_SET;
	static SM_HANDLE_SET hot = new SM_HANDLE_SET;
	StateStack stack;
	Continuation cont;
	EVENT_BUFFER buffer;
	int maxBufferSize;
	Machine machineName;
	int machineId;
	int instance;
	SM_EVENT currentEvent;
    PRT_VALUE currentArg;
	SM_EVENT_SET receiveSet;

    static SM_HANDLE Construct(Machine mName, int inst, int maxBSize) {
    	SM_HANDLE handle;
		PRT_TYPE prtType;
		handle = new SM_HANDLE;
		handle.stack = null;
		handle.cont = Continuation.Construct();
		handle.buffer = EVENT_BUFFER.Construct();
		handle.maxBufferSize = maxBSize;
		handle.machineName = mName;
		handle.machineId = MachineId.GetNextId();
		handle.instance = inst;
		handle.currentEvent = null;
		prtType = PRT_TYPE.PrtMkPrimitiveType(PRT_TYPE_KIND.PRT_KIND_NULL);
		handle.currentArg = PRT_VALUE.PrtMkDefaultValue(prtType);
		handle.receiveSet = new SM_EVENT_SET;
		return handle;
    }

    void Push() {
		StateStack s;
		s = new StateStack;
		s.next = stack;
		stack = s;
    }
    
    void Pop() {
		stack = stack.next;
    }

    void EnqueueEvent(SM_EVENT e, PRT_VALUE arg, SM_HANDLE source) {
        bool b;
		bool isEnabled;
		PRT_TYPE prtType;
    	assert(e != null, "Enqueued event must be non-null");
		//assertion to check if argument passed inhabits the payload type.
		prtType = Main.PayloadOf(e);
		if (prtType.typeKind != PRT_TYPE_KIND.PRT_KIND_NULL) 
		{
			b = PRT_VALUE.PrtInhabitsType(arg, prtType);
			assert(b, "Type of payload does not match the expected type with event");
		}
		else
		{
			assert(arg.type.typeKind == PRT_TYPE_KIND.PRT_KIND_NULL, "Type of payload does not match the expected type with event");
		}
		if (this in halted)
		{
			trace("<EnqueueLog> {0}-{1} Machine has been halted and Event {2} is dropped\n", machineName, instance, e.name);
		}
		else
		{
			if (arg != null)
			{
				trace("<EnqueueLog> Enqueued Event < {0}, ", e.name); PRT_VALUE.Print(arg); trace(" > in Machine {0}-{1} by {2}-{3}\n", machineName, instance, source.machineName, source.instance);
			}
			else
			{
				trace("<EnqueueLog> Enqueued Event < {0} > in Machine {1}-{2} by {3}-{4}\n", e.name, machineName, instance, source.machineName, source.instance);
			}

			buffer.EnqueueEvent(e, arg);
			if (maxBufferSize != -1 && buffer.eventBufferSize > maxBufferSize)
			{
				trace("<EXCEPTION> Event Buffer Size Exceeded {0} in Machine {1}-{2}\n", maxBufferSize, machineName, instance);
				assert(false);
			}
			if (this in SM_HANDLE.enabled) 
			{
			    // do nothing because cannot change the status
			} 
			else 
			{
			   	isEnabled = buffer.IsEnabled(this);
				if (isEnabled) {
					SM_HANDLE.enabled = SM_HANDLE.enabled + this;
				}
			}
			if (this in SM_HANDLE.enabled) 
			{
			   	invokescheduler("enabled", machineId, source.machineId);
			}
		}
    }
	
    void DequeueEvent(bool hasNullTransition) {
	    PRT_TYPE nullType;
		currentEvent = null;
		currentArg = null;
		while (true) {
			buffer.DequeueEvent(this);
			if (currentEvent != null) 
			{
				assert (currentArg != null, "Internal error");
				assert (this in SM_HANDLE.enabled, "Internal error");
				trace("<DequeueLog> Dequeued Event < {0}, ", currentEvent.name); PRT_VALUE.Print(currentArg); trace(" > at Machine {0}-{1}\n", machineName, instance);
				receiveSet = new SM_EVENT_SET;
				return;
			} 
			else if (hasNullTransition || (currentEvent in receiveSet)) 
			{
				assert (this in SM_HANDLE.enabled, "Internal error");
				trace("<NullTransLog> Null transition taken by Machine {0}-{1}\n", machineName, instance);
				nullType = PRT_TYPE.PrtMkPrimitiveType(PRT_TYPE_KIND.PRT_KIND_NULL);
				currentArg = PRT_VALUE.PrtMkDefaultValue(nullType);
				FairScheduler.AtYieldStatic(this);
				FairChoice.AtYieldOrChooseStatic();
				receiveSet = new SM_EVENT_SET;
				yield;
				return;
			} 
			else 
			{
				invokescheduler("blocked", machineId);
				assume (this in SM_HANDLE.enabled);
				SM_HANDLE.enabled = SM_HANDLE.enabled - this;
				assert (sizeof(SM_HANDLE.enabled) != 0 || sizeof(SM_HANDLE.hot) == 0, "Deadlock");
				FairScheduler.AtYieldStatic(this);
				FairChoice.AtYieldOrChooseStatic();
				yield;
			}
        }
    }
};

class EVENT_NODE {
    EVENT_NODE next;
    EVENT_NODE prev;
    SM_EVENT e;
	PRT_VALUE arg;
};

class EVENT_BUFFER {
    EVENT_NODE head;
	int eventBufferSize;
    static EVENT_BUFFER Construct() {
        EVENT_BUFFER buffer;
		EVENT_NODE head;
    	head = new EVENT_NODE;
    	head.next = head;
    	head.prev = head;
    	head.e = null;
    	buffer = new EVENT_BUFFER; 
		buffer.head = head;
		buffer.eventBufferSize = 0;
		return buffer;
    }

    int CalculateInstances(SM_EVENT e) {
        EVENT_NODE elem;
		int currInstances;
		currInstances = 0;
        elem = head.next;
        while (elem != head) {
            if (elem.e.name == e.name) {
				currInstances = currInstances + 1;
			}
			elem = elem.next;
        }
		assert(currInstances <= e.maxInstances, "Internal error");
		return currInstances;
    }
	

    void EnqueueEvent(SM_EVENT e, PRT_VALUE arg) {
        EVENT_NODE elem;
		int currInstances;
	
		if (e.maxInstances == -1)
		{
			elem = new EVENT_NODE;
			elem.e = e;
			elem.arg = arg;
			elem.prev = head.prev;
			elem.next = head;
			elem.prev.next = elem;    
			elem.next.prev = elem;
			eventBufferSize = eventBufferSize + 1;
		}
		else
		{
			currInstances = CalculateInstances(e);
			if (currInstances == e.maxInstances)
			{
				if (e.doAssume)
				{
					assume(false);
				}
				else
				{
					trace("<Exception> Attempting to enqueue event {0} more than max instance of {1}\n", e.name, e.maxInstances);
					assert(false);
				}
			}
			else
			{
    			elem = new EVENT_NODE;
    			elem.e = e;
				elem.arg = arg;
    			elem.prev = head.prev;
    			elem.next = head;
    			elem.prev.next = elem;    
    			elem.next.prev = elem;
				eventBufferSize = eventBufferSize + 1;
			}
		}
	}

    void DequeueEvent(SM_HANDLE owner) {
    	SM_EVENT_SET deferredSet;
		SM_EVENT_SET receiveSet;
        EVENT_NODE iter;
		bool doDequeue;

		deferredSet = owner.stack.deferredSet;
		receiveSet = owner.receiveSet;
        iter = head.next;
        while (iter != head) {
		    if (sizeof(receiveSet) == 0) {
				doDequeue = !(iter.e in deferredSet);
			} else {
				doDequeue = iter.e in receiveSet;
			}
			if (doDequeue) 
			{
				iter.next.prev = iter.prev;
				iter.prev.next = iter.next;
				owner.currentEvent = iter.e;
				owner.currentArg = iter.arg;
				eventBufferSize = eventBufferSize - 1;
				return;
			} 
			iter = iter.next;
        }
		return;
    }

    bool IsEnabled(SM_HANDLE owner) {
        EVENT_NODE iter;
		SM_EVENT_SET deferredSet;
		SM_EVENT_SET receiveSet;
		bool enabled;

		deferredSet = owner.stack.deferredSet;
		receiveSet = owner.receiveSet;
        iter = head.next;
        while (iter != head) {
			if (sizeof(receiveSet) == 0)
			{
				enabled = !(iter.e in deferredSet);
			}
			else 
			{
				enabled = iter.e in receiveSet; 
			}
			if (enabled)
			{
				return true;
			}
			iter = iter.next;
        }
		return false;
    }
};

array SM_EVENT_ARRAY[] SM_EVENT;
array ActionOrFun_ARRAY[] ActionOrFun;

class StateStack {
    SM_STATE state;
    SM_EVENT_SET deferredSet;
    SM_EVENT_SET actionSet;
    SM_EVENT_ARRAY es;
    ActionOrFun_ARRAY as;
    StateStack next;

    ActionOrFun Find(SM_EVENT f) {
        ActionOrFun af;
        int i = 0;
		while (i < sizeof(es)) {
			if (es[i] == f) {
				return as[i];
			} else {
				i = i + 1;
			}
		}
		af = next.Find(f);
		return af;
    }

    void AddStackDeferredSet(SM_EVENT_SET localDeferredSet) {
        if (next == null)
			return;
		localDeferredSet = localDeferredSet + next.deferredSet;
    }

    void AddStackActionSet(SM_EVENT_SET localActionSet) {
        if (next == null)
			return;
		localActionSet = localActionSet + next.actionSet;
    }

	bool HasNullTransitionOrAction() {
		if (state.hasNullTransition) return true;
		return (Main.null_SM_EVENT in actionSet);
	}
};

enum ContinuationReason { Return, Nondet, Pop, Raise, Receive, Send, NewMachine };

class StackFrame {
    int pc;
	PRT_VALUE_ARRAY locals;
    SM_EVENT currentEvent;
    PRT_VALUE currentArg;
	StackFrame next;
};

class Continuation {
    StackFrame returnTo;
    ContinuationReason reason;
    SM_HANDLE id;
    PRT_VALUE retVal;

    // The nondet field is different from the fields above because it is used 
    // by ReentrancyHelper to pass the choice to the nondet choice point.
    // Therefore, nondet should not be reinitialized in this class.
    bool nondet;

    static Continuation Construct() {
        Continuation res;
		res = new Continuation;
		res.returnTo = null;
		res.reason = ContinuationReason.Return;
		res.id = null;
		res.retVal = null;
		res.nondet = false;
		return res;
    }

	void Reset() {
		this.returnTo = null;
		this.reason = ContinuationReason.Return;
		this.id = null;
		this.retVal = null;
		this.nondet = false;
    }

    StackFrame PopReturnTo() {
        StackFrame topOfStack;
		topOfStack = this.returnTo;
		this.returnTo = topOfStack.next;
		topOfStack.next = null;
		return topOfStack;
    }

    void PushReturnTo(int ret, PRT_VALUE_ARRAY locals, SM_EVENT currentEvent, PRT_VALUE currentArg) {
        StackFrame tmp;
		tmp = new StackFrame;
		tmp.pc = ret;
		tmp.locals = locals;
		tmp.currentEvent = currentEvent;
		tmp.currentArg = currentArg;
		tmp.next = this.returnTo;
		this.returnTo = tmp;
    }

    void Return() {
    	PRT_TYPE nullType;
        this.returnTo = null;
		this.reason = ContinuationReason.Return;
		this.id = null;
		nullType = PRT_TYPE.PrtMkPrimitiveType(PRT_TYPE_KIND.PRT_KIND_NULL);
		this.retVal = PRT_VALUE.PrtMkDefaultValue(nullType);
    }

    void ReturnVal(PRT_VALUE val) {
        this.returnTo = null;
		this.reason = ContinuationReason.Return;
		this.id = null;
		this.retVal = val;
    }

    void Pop() {
        this.returnTo = null;
		this.reason = ContinuationReason.Pop;
		this.id = null;
		this.retVal = null;
    }

    void Raise() {
        this.returnTo = null;
		this.reason = ContinuationReason.Raise;
		this.id = null;
		this.retVal = null;
    }

    void Send(int ret, PRT_VALUE_ARRAY locals, SM_EVENT currentEvent, PRT_VALUE currentArg) {
        this.returnTo = null;
		this.reason = ContinuationReason.Send;
		this.id = null;
		this.retVal = null;
		this.PushReturnTo(ret, locals, currentEvent, currentArg);
    }

    void NewMachine(int ret, PRT_VALUE_ARRAY locals, SM_EVENT currentEvent, PRT_VALUE currentArg, SM_HANDLE o) {
        this.returnTo = null;
		this.reason = ContinuationReason.NewMachine;
		this.id = o;
		this.retVal = null;
		this.PushReturnTo(ret, locals, currentEvent, currentArg);
    }

    void Receive(int ret, PRT_VALUE_ARRAY locals, SM_EVENT currentEvent, PRT_VALUE currentArg) {
        this.returnTo = null;
		this.reason = ContinuationReason.Receive;
		this.id = null;
		this.retVal = null;
		this.PushReturnTo(ret, locals, currentEvent, currentArg);
    }

    void Nondet(int ret, PRT_VALUE_ARRAY locals, SM_EVENT currentEvent, PRT_VALUE currentArg) {
        this.returnTo = null;
		this.reason = ContinuationReason.Nondet;
		this.id = null;
		this.retVal = null;
		this.PushReturnTo(ret, locals, currentEvent, currentArg);
    }
};

// Add an instance of FairScheduler per running P machine.
// Add an instance of FairChoice per running P machine and fair choice in that machine.
// Invoke FairScheduler.AtYieldStatic and FairChoice.AtYieldOrChooseStatic at each yield.
// Invoke FairScheduler.AtChooseStatic and FairChoice.AtYieldOrChooseStatic at each choose.
set FairSchedulers FairScheduler;
class FairScheduler {      
    static FairSchedulers all = new FairSchedulers;
    static FairSchedulers accepted = new FairSchedulers;
    static bool noYieldFromNowOn = false;
    SM_HANDLE handle;

    static void Init(FairScheduler fs, SM_HANDLE h) {
		fs.handle = h;
		all = all + fs;
    }

    void AtYield(SM_HANDLE running) {
		assume (!noYieldFromNowOn);
		if (running == handle || !(handle in SM_HANDLE.enabled)) {
		   FairScheduler.accepted = FairScheduler.accepted + this;
		   FairCycle.Accept();
		}
    }

    static void AtYieldStatic(SM_HANDLE running) {
		foreach (FairScheduler m in all) {
			m.AtYield(running);
		}
    }

    static void AtChooseStatic() {
    	if (noYieldFromNowOn) {
			FairCycle.Accept();
			return;
		}
		noYieldFromNowOn = choose(bool);
		if (noYieldFromNowOn) {
			FairScheduler.all = new FairSchedulers;
			FairScheduler.accepted = new FairSchedulers;
		}
    }
};

set FairChoices FairChoice;
class FairChoice {
    static FairChoices all = new FairChoices;
    static FairChoices accepted = new FairChoices;
    bool lastChoice;

    static void Init(FairChoice fs) {
		fs.lastChoice = false;
		all = all + fs;
    }

    void AtYieldOrChoose() {
        bool b;
		b = choose(bool);
      	if (b) {
			FairChoice.all = FairChoice.all - this;
		}
    }
    
    static void AtYieldOrChooseStatic() {
		foreach (FairChoice m in all) {
			m.AtYieldOrChoose();
		}
    }

    void AtChoose(bool b) {
        assume (this in FairChoice.all);
        if (b != lastChoice) {
			lastChoice = b;
			FairChoice.accepted = FairChoice.accepted + this;
			FairCycle.Accept();
		}
    }
};

enum GateStatus { Init, Selected, Closed };
enum StateTemperature { Cold, Warm, Hot };

class FairCycle {
    static GateStatus gate = GateStatus.Init;
	static StateTemperature temperature = StateTemperature.Warm;

    static void GateProgress() {
        bool b;
        if (gate == GateStatus.Selected) {
			b = choose(bool);
			if (b) {
				gate = GateStatus.Closed;
			}
		}
    }

    static void Accept() {
        if (gate == GateStatus.Closed && 
			temperature == StateTemperature.Hot &&
			sizeof(FairChoice.accepted) == sizeof(FairChoice.all) && 
       	    sizeof(FairScheduler.accepted) == sizeof(FairScheduler.all))
		{
			trace("Accepting transition\n");
			accept(true);
      		FairChoice.accepted = new FairChoices;
			FairScheduler.accepted = new FairSchedulers;
		}	
    }
};enum PRT_TYPE_KIND
{
	PRT_KIND_ANY, 
	PRT_KIND_BOOL, 
	PRT_KIND_EVENT, 
	PRT_KIND_FORGN, 
	PRT_KIND_REAL, 
	PRT_KIND_INT, 
	PRT_KIND_MAP, 
	PRT_KIND_NMDTUP, 
	PRT_KIND_NULL,
	PRT_KIND_SEQ, 
	PRT_KIND_TUPLE
};

class PRT_FIELD_NAME {

};

array PRT_TYPE_ARRAY[] PRT_TYPE;
array PRT_FIELD_NAME_ARRAY[] PRT_FIELD_NAME;

class PRT_TYPE {
    PRT_TYPE_KIND typeKind;

    int arity;
    PRT_FIELD_NAME_ARRAY fieldNames;
    PRT_TYPE_ARRAY fieldTypes;

    PRT_TYPE innerType;

    PRT_TYPE domType;
    PRT_TYPE codType;

    static PRT_TYPE BuildDefault(PRT_TYPE_KIND typeKind) {
        PRT_TYPE type;
		type = new PRT_TYPE;
		type.typeKind = typeKind;
		type.arity = 0;
		type.fieldNames = null;
		type.fieldTypes = null;
		type.innerType = null;
		type.domType = null;
		type.codType = null;
		return type;
    }

    static PRT_TYPE PrtMkPrimitiveType(PRT_TYPE_KIND primType) {
        PRT_TYPE type;
		type = BuildDefault(primType);
		return type;
    }

    static PRT_TYPE PrtMkMapType(PRT_TYPE domType, PRT_TYPE codType) {
        PRT_TYPE type;
		type = BuildDefault(PRT_TYPE_KIND.PRT_KIND_MAP);
		type.domType = domType;
		type.codType = codType;
		return type;
    }

    static PRT_TYPE PrtMkNmdTupType(int arity) {
        PRT_TYPE type;
		type = BuildDefault(PRT_TYPE_KIND.PRT_KIND_NMDTUP);
		type.arity = arity;
		type.fieldNames = new PRT_FIELD_NAME_ARRAY[arity];
		type.fieldTypes = new PRT_TYPE_ARRAY[arity];
		return type;
    }

    static PRT_TYPE PrtMkSeqType(PRT_TYPE innerType) {
        PRT_TYPE type;
		type = BuildDefault(PRT_TYPE_KIND.PRT_KIND_SEQ);
		type.innerType = innerType;
		return type;
    }

    static PRT_TYPE PrtMkTupType(int arity) {
        PRT_TYPE type;
		type = BuildDefault(PRT_TYPE_KIND.PRT_KIND_TUPLE);
		type.arity = arity;
		type.fieldTypes = new PRT_TYPE_ARRAY[arity];
		return type;
    }

    static void PrtSetFieldType(PRT_TYPE tupleType, int index, PRT_TYPE fieldType) {
        tupleType.fieldTypes[index] = fieldType;
    }

    static void PrtSetFieldName(PRT_TYPE tupleType, int index, PRT_FIELD_NAME fieldName) {
        tupleType.fieldNames[index] = fieldName;
    }
};
array PRT_VALUE_ARRAY[] PRT_VALUE;

class PRT_VALUE {
    PRT_TYPE type;

    bool bl;
    SM_EVENT ev;
    int nt;
    SM_HANDLE mach;

    PRT_VALUE_ARRAY tuple;
    
    PRT_SEQ seq;

    PRT_MAP map;

	static void Print(PRT_VALUE value)
	{
		PRT_TYPE_KIND tkind;
		bool isNullValue;
		int i;

		isNullValue = PrtIsNullValue(value);
		tkind = value.type.typeKind;
		if (tkind == PRT_TYPE_KIND.PRT_KIND_BOOL)
		{
			if(value.bl == true)
				trace("true");
			else
				trace("false");
		}
		
		if (tkind == PRT_TYPE_KIND.PRT_KIND_EVENT)
		{
			if(isNullValue)
				trace("null");
			else
				trace("{0}", value.ev.name);
		}

		if (tkind == PRT_TYPE_KIND.PRT_KIND_REAL)
		{
			if(isNullValue)
				trace("null");
			else
				trace("{0}-{1}", value.mach.machineName, value.mach.instance);
		}

		if (tkind == PRT_TYPE_KIND.PRT_KIND_INT)
			trace("{0}", value.nt);

		if (tkind == PRT_TYPE_KIND.PRT_KIND_MAP)
		{
			i = 0;
			trace("map : (");
			while (i < value.map.size) {
				trace("(");
				Print(value.map.keys[i]);
				trace(",");
				Print(value.map.values[i]);
				trace(")");
				i = i + 1;
			}
			trace(")");
		}
		
		if(tkind ==  PRT_TYPE_KIND.PRT_KIND_NULL)
		{
			trace("null");
		}
		
		if(tkind == PRT_TYPE_KIND.PRT_KIND_SEQ)
		{
			i = 0;
			trace("seq : (");
			while(i < value.seq.size) {
				Print(value.seq.contents[i]);
				trace(",");
				i = i + 1;
			}
			trace(")");
		}
		
		if(tkind == PRT_TYPE_KIND.PRT_KIND_TUPLE)
		{
			i = 0;
			trace("tuple : (");
			while(i < value.type.arity)
			{
				Print(value.tuple[i]);
				trace(",");
				i = i + 1;
			}
			trace(")");
		}
		
		if(tkind == PRT_TYPE_KIND.PRT_KIND_NMDTUP)
		{
			i = 0;
			trace("namedTup : (");
			while(i < value.type.arity)
			{
				trace("field_{0}: ", i);
				Print(value.tuple[i]);
				trace(",");
				i = i + 1;
			}
			trace(")");
		}
	}

    static PRT_VALUE PrtMkDefaultValue(PRT_TYPE type) {
        int i;
        PRT_VALUE value;
		value = new PRT_VALUE;
		value.type = type;
		value.bl = false;
		value.ev = null;
		value.nt = 0;
		value.mach = null;
		value.tuple = null;
		value.seq = null;
		value.map = null;

		if (type.typeKind == PRT_TYPE_KIND.PRT_KIND_ANY) {
		  value.type =  PRT_TYPE.PrtMkPrimitiveType(PRT_TYPE_KIND.PRT_KIND_NULL); 
		} else if (type.typeKind == PRT_TYPE_KIND.PRT_KIND_TUPLE || type.typeKind == PRT_TYPE_KIND.PRT_KIND_NMDTUP) {
			value.tuple = new PRT_VALUE_ARRAY[type.arity];
			i = 0;
			while (i < type.arity) {
				value.tuple[i] = PrtMkDefaultValue(type.fieldTypes[i]);
				i = i + 1;
			}
		} else if (type.typeKind == PRT_TYPE_KIND.PRT_KIND_SEQ) {
			value.seq = PRT_SEQ.PrtMkDefaultSeq();
		} else if (type.typeKind == PRT_TYPE_KIND.PRT_KIND_MAP) {
			value.map = PRT_MAP.PrtMkDefaultMap();
		}
		return value;
    }

    static PRT_VALUE PrtCloneValue(PRT_VALUE value) {
        int i;
		PRT_VALUE newValue;
		newValue = new PRT_VALUE;
		newValue.type = value.type;
		newValue.bl = value.bl;
		newValue.ev = value.ev;
		newValue.nt = value.nt;
		newValue.mach = value.mach;
		newValue.tuple = value.tuple;
		newValue.seq = value.seq;
		newValue.map = value.map;
	
		if (value.type.typeKind == PRT_TYPE_KIND.PRT_KIND_TUPLE || value.type.typeKind == PRT_TYPE_KIND.PRT_KIND_NMDTUP) {
			newValue.tuple = new PRT_VALUE_ARRAY[value.type.arity];
			i = 0;
			while (i < value.type.arity) {
				newValue.tuple[i] = PrtCloneValue(value.tuple[i]);
				i = i + 1;
			}
		} else if (value.type.typeKind == PRT_TYPE_KIND.PRT_KIND_SEQ) {
			newValue.seq = value.seq.Clone();
		} else if (value.type.typeKind == PRT_TYPE_KIND.PRT_KIND_MAP) {
			newValue.map = value.map.Clone();
		}
		return newValue;
    }

    static bool PrtInhabitsType(PRT_VALUE value, PRT_TYPE type) {
        PRT_TYPE_KIND tkind;
		PRT_TYPE_KIND vkind;
		int i;
		bool isNullValue;
		bool retVal;
		bool b;

		isNullValue = PrtIsNullValue(value);
		tkind = type.typeKind;
		vkind = value.type.typeKind;

		if (tkind == PRT_TYPE_KIND.PRT_KIND_ANY)
			return true;

		if (tkind == PRT_TYPE_KIND.PRT_KIND_BOOL)
			return vkind == PRT_TYPE_KIND.PRT_KIND_BOOL;
	
		if (tkind == PRT_TYPE_KIND.PRT_KIND_EVENT)
			return (vkind == PRT_TYPE_KIND.PRT_KIND_EVENT || isNullValue);

		if (tkind == PRT_TYPE_KIND.PRT_KIND_REAL)
			return (vkind == PRT_TYPE_KIND.PRT_KIND_REAL || isNullValue);

		if (tkind == PRT_TYPE_KIND.PRT_KIND_INT)
			return vkind == PRT_TYPE_KIND.PRT_KIND_INT;

		if (tkind == PRT_TYPE_KIND.PRT_KIND_MAP)
		{
			if (vkind != PRT_TYPE_KIND.PRT_KIND_MAP)
			{
				return false;
			}
			retVal = value.map.InhabitsType(type);
			return retVal;
		}

		if (tkind == PRT_TYPE_KIND.PRT_KIND_NMDTUP)
		{
			if (vkind != PRT_TYPE_KIND.PRT_KIND_NMDTUP)
			{
				return false;
			}

			if (type.arity != value.type.arity)
			{
				return false;
			}

			i = 0;
			while (i < type.arity)
			{
				if (type.fieldNames[i] != value.type.fieldNames[i])
				{
					return false;
				}
				b = PrtInhabitsType(value.tuple[i], type.fieldTypes[i]);
				if (!b)
				{
					return false;
				}
				i = i + 1;
			}
			return true;
		}

		if (tkind == PRT_TYPE_KIND.PRT_KIND_TUPLE)
		{
			if (vkind != PRT_TYPE_KIND.PRT_KIND_TUPLE)
			{
				return false;
			}

			if (type.arity != value.type.arity)
			{
				return false;
			}

			i = 0;
			while (i < type.arity)
			{
				b = PrtInhabitsType(value.tuple[i], type.fieldTypes[i]);
				if (!b)
				{
					return false;
				}
				i = i + 1;
			}
			return true;
		}

		if (tkind == PRT_TYPE_KIND.PRT_KIND_SEQ)
		{
			if (vkind != PRT_TYPE_KIND.PRT_KIND_SEQ)
			{
				return false;
			}
			retVal = value.seq.InhabitsType(type);
			return retVal;
		}
		trace("Invalid tkind value : {0}", tkind);
		assert (false);
		return false;
    }

    static bool PrtIsNullValue(PRT_VALUE value) {
		PRT_TYPE_KIND kind;
		kind = value.type.typeKind;
		assert (kind != PRT_TYPE_KIND.PRT_KIND_ANY, "Value must have a concrete type");

		if (kind == PRT_TYPE_KIND.PRT_KIND_EVENT)
			return value.ev == null;

		if (kind == PRT_TYPE_KIND.PRT_KIND_REAL)
			return value.mach == null;

		if (kind == PRT_TYPE_KIND.PRT_KIND_NULL)
			return true;

		return false;
    }

    static PRT_VALUE PrtCastValue(PRT_VALUE value, PRT_TYPE type) {
        bool b;
		PRT_VALUE newValue;
		b = PrtInhabitsType(value, type);
        assert (b, "value must be a member of type");
		newValue = PrtCloneValue(value);
		value.type = type;
		return newValue;
    }

    static bool PrtIsEqualValue(PRT_VALUE value1, PRT_VALUE value2)
    {
        PRT_TYPE type1 = value1.type;
		PRT_TYPE type2 = value2.type;
		PRT_TYPE_KIND kind1 = type1.typeKind;
		PRT_TYPE_KIND kind2 = type2.typeKind;
		bool isNullValue1;
		bool isNullValue2;
		bool retVal;
		int i;
		bool b;

		isNullValue1 = PrtIsNullValue(value1);
		isNullValue2 = PrtIsNullValue(value2);

		if (isNullValue1 && isNullValue2) 
		{
			return true;
		}
		else if (kind1 != kind2)
		{
			return false;
		}
		else if (value1 == value2)
		{
			return true;
		}

		if (kind1 == PRT_TYPE_KIND.PRT_KIND_BOOL)
			return value1.bl == value2.bl;

		if (kind1 == PRT_TYPE_KIND.PRT_KIND_EVENT)
			return value1.ev == value2.ev;

		if (kind1 == PRT_TYPE_KIND.PRT_KIND_REAL)
			return value1.mach == value2.mach;

		if (kind1 == PRT_TYPE_KIND.PRT_KIND_INT)
			return value1.nt == value2.nt;

		if (kind1 == PRT_TYPE_KIND.PRT_KIND_MAP)
		{
			retVal = value1.map.Equals(value2.map);
			return retVal;
		}

		if (kind1 == PRT_TYPE_KIND.PRT_KIND_NMDTUP)
		{
			if (type1.arity != type2.arity)
			{
				return false;
			}
			i = 0;
			while (i < type1.arity)
			{
				if (type1.fieldNames[i] != type2.fieldNames[i])
				{
					return false;
				}
				b = PrtIsEqualValue(value1.tuple[i], value2.tuple[i]);
				if (!b)
				{
					return false;
				}
				i = i + 1;
			}
			return true;
		}

		if (kind1 == PRT_TYPE_KIND.PRT_KIND_SEQ)
		{
			retVal = value1.seq.Equals(value2.seq);
			return retVal;
		}

		if (kind1 == PRT_TYPE_KIND.PRT_KIND_TUPLE)
		{
			if (type1.arity != type2.arity)
			{
				return false;
			}
			i = 0;
			while (i < type1.arity)
			{
 				b = PrtIsEqualValue(value1.tuple[i], value2.tuple[i]);
				if (!b)
				{
					return false;
				}
				i = i + 1;
			}
			return true;
		}
    }

    static void PrtPrimSetBool(PRT_VALUE prmVal, bool value) {
        prmVal.bl = value;
    }

    static bool PrtPrimGetBool(PRT_VALUE prmVal) {
        return prmVal.bl;
    }

    static void PrtPrimSetEvent(PRT_VALUE prmVal, SM_EVENT value) {
        prmVal.ev = value;
    }

    static SM_EVENT PrtPrimGetEvent(PRT_VALUE prmVal) {
        return prmVal.ev;
    }

    static void PrtPrimSetInt(PRT_VALUE prmVal, int value) {
        prmVal.nt = value;
    }

    static int PrtPrimGetInt(PRT_VALUE prmVal) {
        return prmVal.nt;
    }

    static void PrtPrimSetMachine(PRT_VALUE prmVal, SM_HANDLE value) {
        prmVal.mach = value;
    }

    static SM_HANDLE PrtPrimGetMachine(PRT_VALUE prmVal) {
        return prmVal.mach;
    }

    static void PrtTupleSet(PRT_VALUE tuple, int index, PRT_VALUE value) {
        tuple.tuple[index] = PrtCloneValue(value);
    }

    static PRT_VALUE PrtTupleGet(PRT_VALUE tuple, int index) {
        PRT_VALUE retVal;
		retVal = PRT_VALUE.PrtCloneValue(tuple.tuple[index]);
        return retVal;
    }

    static void PrtSeqSet(PRT_VALUE seq, PRT_VALUE index, PRT_VALUE value) {
        seq.seq.Set(index.nt, value);
    }

    static void PrtSeqInsert(PRT_VALUE seq, PRT_VALUE index, PRT_VALUE value) {
        seq.seq.Insert(index.nt, value);
    }

    static void PrtSeqRemove(PRT_VALUE seq, PRT_VALUE index) {
        seq.seq.Remove(index.nt);
    }

    static PRT_VALUE PrtSeqGet(PRT_VALUE seq, PRT_VALUE index) {
        PRT_VALUE retVal;
		retVal = seq.seq.Get(index.nt);
		return retVal;
    }

    static PRT_VALUE PrtSeqGetNoClone(PRT_VALUE seq, PRT_VALUE index) {
        PRT_VALUE retVal;
		retVal = seq.seq.GetNoClone(index.nt);
		return retVal;
    }

	static int PrtSeqSizeOf(PRT_VALUE seq) {
        int retVal;
		retVal = seq.seq.SizeOf();
		return retVal;
    }

    static void PrtMapSet(PRT_VALUE map, PRT_VALUE key, PRT_VALUE value) {
        map.map.Set(key, value);
    }

	static void PrtMapInsert(PRT_VALUE map, PRT_VALUE key, PRT_VALUE value) {
	    bool b;
		b = map.map.Exists(key);
		assert(!b, "key must not exist in map");
	    map.map.Set(key, value);
	}

    static void PrtMapRemove(PRT_VALUE map, PRT_VALUE key) {
        map.map.Remove(key);
    }

    static PRT_VALUE PrtMapGet(PRT_VALUE map, PRT_VALUE key) {
        PRT_VALUE retVal;
		retVal = map.map.Get(key);
		return retVal;
    }

    static PRT_VALUE PrtMapGetNoClone(PRT_VALUE map, PRT_VALUE key) {
        PRT_VALUE retVal;
		retVal = map.map.GetNoClone(key);
		return retVal;
    }

    static PRT_VALUE PrtMapGetKeys(PRT_VALUE map) {
        PRT_VALUE retVal;
		retVal = map.map.GetKeys(map.type.domType);
		return retVal;
    }

    static PRT_VALUE PrtMapGetValues(PRT_VALUE map) {
        PRT_VALUE retVal;
        retVal = map.map.GetValues(map.type.codType);
		return retVal;
    }

    static bool PrtMapExists(PRT_VALUE map, PRT_VALUE key) {
        bool retVal;
        retVal = map.map.Exists(key);
		return retVal;
    }

    static int PrtMapSizeOf(PRT_VALUE map) {
        int retVal;
        retVal = map.map.SizeOf();
		return retVal;
    }
};

class PRT_SEQ {
    int size;
    PRT_VALUE_ARRAY contents;

    static PRT_SEQ PrtMkDefaultSeq() {
        PRT_SEQ seq;
        seq = new PRT_SEQ;
		seq.size = 0;
		seq.contents = new PRT_VALUE_ARRAY[0];
		return seq;
    }

    PRT_SEQ Clone() {
        int i;
        PRT_SEQ seq;
		seq = new PRT_SEQ;
		seq.size = size;
		seq.contents = new PRT_VALUE_ARRAY[size];
		i = 0;
		while (i < size) {
			seq.contents[i] = PRT_VALUE.PrtCloneValue(contents[i]);
			i = i + 1;
		}
		return seq;
    }

    void Set(int index, PRT_VALUE value) {
		assert (0 <= index && index < size, "index out of bound");
        contents[index] = PRT_VALUE.PrtCloneValue(value);
    }

    void Insert(int index, PRT_VALUE value) {
    	PRT_VALUE_ARRAY newContents;
		int i;
		assert (0 <= index && index <= size, "index out of bound");
		newContents = new PRT_VALUE_ARRAY[size+1];
		i = 0;
		while (i < size + 1) {
			if (i < index) {
				newContents[i] = contents[i];
			} else if (i == index) {
				newContents[i] = PRT_VALUE.PrtCloneValue(value);
			} else {
				newContents[i] = contents[i-1];
			}
			i = i + 1;
		}
		contents = newContents;
		size = size + 1;	
    }

    void Remove(int index) {
		int i;
		assert (0 <= index && index < size, "index out of bound");
		i = index;
		while (i < size - 1) {
			contents[i] = contents[i+1];
			i = i + 1;
		}
		size = size - 1;	
    }

    PRT_VALUE Get(int index) {
        PRT_VALUE retVal;
		assert (0 <= index && index < size, "index out of bound");
        retVal = PRT_VALUE.PrtCloneValue(contents[index]);
		return retVal;
    }

	PRT_VALUE GetNoClone(int index) {
        PRT_VALUE retVal;
		assert (0 <= index && index < size, "index out of bound");
        return contents[index];
    }

    int SizeOf() {
        return size;
    }

    bool InhabitsType(PRT_TYPE type) {
        int i;
		bool b;

		i = 0;
		while (i < size)
		{
			b = PRT_VALUE.PrtInhabitsType(contents[i], type.innerType);
			if (!b) {
				return false;
			}
			i = i + 1;
		}
		return true;
    }

    bool Equals(PRT_SEQ seq) {
        int i;
		bool b;
		if (size != seq.size)
		{
			return false;
		}
		i = 0;
		while (i < size)
		{
			b = PRT_VALUE.PrtIsEqualValue(contents[i], seq.contents[i]);
			if (!b)
			{
				return false;
			}
			i = i + 1;
		}
		return true;
    }
};

class PRT_MAP {
    int size;
    PRT_VALUE_ARRAY keys;
    PRT_VALUE_ARRAY values;

    static PRT_MAP PrtMkDefaultMap() {
        PRT_MAP map;
		map = new PRT_MAP;
		map.size = 0;
		map.keys = new PRT_VALUE_ARRAY[0];
		map.values = new PRT_VALUE_ARRAY[0];
		return map;
    }

    PRT_MAP Clone() {
        int i;
        PRT_MAP map;
		map = new PRT_MAP;
		map.size = size;
		map.keys = new PRT_VALUE_ARRAY[size];
		map.values = new PRT_VALUE_ARRAY[size];
		i = 0;
		while (i < size) {
			map.keys[i] = PRT_VALUE.PrtCloneValue(keys[i]);
			map.values[i] = PRT_VALUE.PrtCloneValue(values[i]);	    
			i = i + 1;
		}
		return map;
    }

    void Set(PRT_VALUE key, PRT_VALUE value) {
        int i;
		bool b;
		PRT_VALUE_ARRAY newKeys;
		PRT_VALUE_ARRAY newValues;
		int j;

		i = 0;
		while (i < size) {
			b = PRT_VALUE.PrtIsEqualValue(keys[i], key);
			if (b) {
				values[i] = PRT_VALUE.PrtCloneValue(value);
				return;
			} else {
				i = i + 1;
			}
		}

		newKeys = new PRT_VALUE_ARRAY[size + 1];
		newValues = new PRT_VALUE_ARRAY[size + 1];
		j = 0;
		while (j < size) {
			newKeys[j] = keys[j];
			newValues[j] = values[j];
			j = j + 1;
		}
		newKeys[size] = PRT_VALUE.PrtCloneValue(key);
		newValues[size] = PRT_VALUE.PrtCloneValue(value);

		keys = newKeys;
		values = newValues;
		size = size + 1;
    }

    void Remove(PRT_VALUE key) {
        int i;
		bool b;
		PRT_VALUE_ARRAY newKeys;
		PRT_VALUE_ARRAY newValues;
		int j;

		i = 0;
		while (i < size) {
			b = PRT_VALUE.PrtIsEqualValue(keys[i], key);
			if (b) {
				newKeys = new PRT_VALUE_ARRAY[size - 1];
				newValues = new PRT_VALUE_ARRAY[size - 1];
				j = 0;
				while (j < size) {
					if (j < i) {
	    				newKeys[j] = keys[j];
	    	    		newValues[j] = values[j];
					} else if (j > i) {
	    				newKeys[j-1] = keys[j];
	    	    		newValues[j-1] = values[j];		        
					}
	    			j = j + 1;
				}

				keys = newKeys;
				values = newValues;
				size = size - 1;
				return;	        
			} else {
				i = i + 1;
			}
		}
        assert (false, "key not found");
    }

    PRT_VALUE Get(PRT_VALUE key) {
		int i;
		bool b;
		PRT_VALUE retVal;

		i = 0;
		while (i < size) {
			b = PRT_VALUE.PrtIsEqualValue(keys[i], key);
			if (b) {
				retVal = PRT_VALUE.PrtCloneValue(values[i]);
				return retVal;
			} else {
				i = i + 1;
			}
		}
		assert (false, "key not found");
		return null;
    }

	PRT_VALUE GetNoClone(PRT_VALUE key) {
		int i;
		bool b;
		PRT_VALUE retVal;

		i = 0;
		while (i < size) {
			b = PRT_VALUE.PrtIsEqualValue(keys[i], key);
			if (b) {
				return values[i];
			} else {
				i = i + 1;
			}
		}
		assert (false, "key not found");
		return null;
    }

    PRT_VALUE GetKeys(PRT_TYPE domType) {
        PRT_VALUE retVal;
		PRT_TYPE seqType;
        int i;
		PRT_SEQ seq;
		seq = new PRT_SEQ;
		seq.size = size;
		seq.contents = new PRT_VALUE_ARRAY[size];
		i = 0;
		while (i < size) {
			seq.contents[i] = PRT_VALUE.PrtCloneValue(keys[i]);
			i = i + 1;
		}
		seqType = PRT_TYPE.PrtMkSeqType(domType);
		retVal = PRT_VALUE.PrtMkDefaultValue(seqType);
		retVal.seq = seq;
        return retVal;
    }

    PRT_VALUE GetValues(PRT_TYPE codType) {
        PRT_VALUE retVal;
		PRT_TYPE seqType;
        int i;
		PRT_SEQ seq;
		seq = new PRT_SEQ;
		seq.size = size;
		seq.contents = new PRT_VALUE_ARRAY[size];
		i = 0;
		while (i < size) {
			seq.contents[i] = PRT_VALUE.PrtCloneValue(values[i]);
			i = i + 1;
		}
		seqType = PRT_TYPE.PrtMkSeqType(codType);
		retVal = PRT_VALUE.PrtMkDefaultValue(seqType);
		retVal.seq = seq;
        return retVal;
    }

    bool Exists(PRT_VALUE key) {
        int i;
		bool b;

		i = 0;
		while (i < size) {
			b = PRT_VALUE.PrtIsEqualValue(keys[i], key);
			if (b) {
				return true;
			} else {
				i = i + 1;
			}
		}
        return false;
    }

    int SizeOf() {
        return size;
    }

    bool IsSameMapping(PRT_VALUE key, PRT_VALUE value) {
        int i;
		bool b;

		i = 0;
		while (i < size) {
			b = PRT_VALUE.PrtIsEqualValue(keys[i], key);
			if (b) {
				b = PRT_VALUE.PrtIsEqualValue(values[i], value);
				return b;
			} else {
				i = i + 1;
			}
		}
		return false;
    }

    bool InhabitsType(PRT_TYPE type) {
        int i;
		bool b;

		i = 0;
		while (i < size)
		{
			b = PRT_VALUE.PrtInhabitsType(keys[i], type.domType);
			if (!b) {
				return false;
			}
			b = PRT_VALUE.PrtInhabitsType(values[i], type.codType);
			if (!b) {
				return false;
			}
			i = i + 1;
		}
		return true;
    }

    bool Equals(PRT_MAP map) {
		int i;
		bool b;

		if (size != map.size)
		{
			return false;
		}

		i = 0;
		while (i < size) 
		{
            b = map.IsSameMapping(keys[i], values[i]);
			if (!b)
			{
				return false;
			}
			i = i + 1;
		}
		return true;
    }	
};


