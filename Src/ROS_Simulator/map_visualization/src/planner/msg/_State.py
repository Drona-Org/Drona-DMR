"""autogenerated by genpy from planner/State.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class State(genpy.Message):
  _md5sum = "4d85fdbe44c726b9f69e47110705f167"
  _type = "planner/State"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """int32 x
int32 y
int32 z
int32 v
int32 f
int32[6] assignment

"""
  __slots__ = ['x','y','z','v','f','assignment']
  _slot_types = ['int32','int32','int32','int32','int32','int32[6]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       x,y,z,v,f,assignment

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(State, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.x is None:
        self.x = 0
      if self.y is None:
        self.y = 0
      if self.z is None:
        self.z = 0
      if self.v is None:
        self.v = 0
      if self.f is None:
        self.f = 0
      if self.assignment is None:
        self.assignment = [0,0,0,0,0,0]
    else:
      self.x = 0
      self.y = 0
      self.z = 0
      self.v = 0
      self.f = 0
      self.assignment = [0,0,0,0,0,0]

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_5i.pack(_x.x, _x.y, _x.z, _x.v, _x.f))
      buff.write(_struct_6i.pack(*self.assignment))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 20
      (_x.x, _x.y, _x.z, _x.v, _x.f,) = _struct_5i.unpack(str[start:end])
      start = end
      end += 24
      self.assignment = _struct_6i.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_5i.pack(_x.x, _x.y, _x.z, _x.v, _x.f))
      buff.write(self.assignment.tostring())
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 20
      (_x.x, _x.y, _x.z, _x.v, _x.f,) = _struct_5i.unpack(str[start:end])
      start = end
      end += 24
      self.assignment = numpy.frombuffer(str[start:end], dtype=numpy.int32, count=6)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_6i = struct.Struct("<6i")
_struct_5i = struct.Struct("<5i")
